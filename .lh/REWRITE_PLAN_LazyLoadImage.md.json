{
    "sourceFile": "REWRITE_PLAN_LazyLoadImage.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1759231642360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759231673887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   - `config.ts`（默认配置与类型）\r\n - `features/`\r\n   - `lqip/`\r\n     - `useLQIP.ts`（LQIP 生成与缓存）\r\n-    - `LQIPWorkerPool.ts`（可选：简化版线程池）\r\n+    - `LQIPWorkerPool.ts`（可选：简化版线程池，单实例）\r\n   - `cache/`\r\n     - `useImageCache.ts`（IndexedDB + 内存缓存 + 统计）\r\n   - `concurrency/`\r\n     - `useConcurrency.ts`（简化并发队列与优先级）\r\n"
                },
                {
                    "date": 1759231735879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n ## 4) 重构实施步骤（可执行，带清单）\r\n \r\n ### 阶段 A：骨架搭建（目录/最小可运行）\r\n \r\n-- [ ] A1 创建 `src/components/@LazyLoadImage/` 目录与子目录\r\n+- [ ] A1 创建 `src/components/LazyLoadImage/` 目录与子目录\r\n - [ ] A2 新建 `core/LazyLoadImage.tsx`：仅 Intersection + 基本加载与就绪显示\r\n - [ ] A3 新建 `core/useIntersection.ts`：封装单一 IO 逻辑（root/rootRef/rootMargin/threshold）\r\n - [ ] A4 新建 `core/useImageState.ts`：状态机（idle → loading → ready/error），保证 `decode()` 后再就绪\r\n - [ ] A5 新建 `core/config.ts` 与 `utils/types.ts`：默认配置/类型草案\r\n"
                },
                {
                    "date": 1759231768166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n # @LazyLoadImage 重构计划（完全重构版）\r\n \r\n-本计划基于 `LAZYIMAGE_FEATURES.md` 与 `LAZYIMAGE_OPTIMIZATION_ANALYSIS.md`，对 `LazyImage` 组件进行完全重构，迁移到 `src/components/@LazyLoadImage/` 目录。在保证原有 89 项功能等价覆盖的前提下，采用更清晰的分层与模块边界，提升可维护性、性能与扩展性。\r\n+本计划基于 `LAZYIMAGE_FEATURES.md` 与 `LAZYIMAGE_OPTIMIZATION_ANALYSIS.md`，对 `LazyImage` 组件进行完全重构，迁移到 `src/components/LazyLoadImage/` 目录。在保证原有 89 项功能等价覆盖的前提下，采用更清晰的分层与模块边界，提升可维护性、性能与扩展性。\r\n \r\n ---\r\n \r\n ## 1) 新目录与模块边界\r\n \r\n-目标根目录：`src/components/@LazyLoadImage/`\r\n+目标根目录：`src/components/LazyLoadImage/`\r\n \r\n - `core/`\r\n   - `LazyLoadImage.tsx`（核心组件：最小职责）\r\n   - `useIntersection.ts`（统一 IntersectionObserver）\r\n"
                }
            ],
            "date": 1759231642360,
            "name": "Commit-0",
            "content": "# @LazyLoadImage 重构计划（完全重构版）\r\n\r\n本计划基于 `LAZYIMAGE_FEATURES.md` 与 `LAZYIMAGE_OPTIMIZATION_ANALYSIS.md`，对 `LazyImage` 组件进行完全重构，迁移到 `src/components/@LazyLoadImage/` 目录。在保证原有 89 项功能等价覆盖的前提下，采用更清晰的分层与模块边界，提升可维护性、性能与扩展性。\r\n\r\n---\r\n\r\n## 1) 新目录与模块边界\r\n\r\n目标根目录：`src/components/@LazyLoadImage/`\r\n\r\n- `core/`\r\n  - `LazyLoadImage.tsx`（核心组件：最小职责）\r\n  - `useIntersection.ts`（统一 IntersectionObserver）\r\n  - `useImageState.ts`（装载/错误/就绪状态机）\r\n  - `config.ts`（默认配置与类型）\r\n- `features/`\r\n  - `lqip/`\r\n    - `useLQIP.ts`（LQIP 生成与缓存）\r\n    - `LQIPWorkerPool.ts`（可选：简化版线程池）\r\n  - `cache/`\r\n    - `useImageCache.ts`（IndexedDB + 内存缓存 + 统计）\r\n  - `concurrency/`\r\n    - `useConcurrency.ts`（简化并发队列与优先级）\r\n  - `memory/`\r\n    - `useMemoryManager.ts`（注册/估算/回收策略）\r\n  - `scroll/`\r\n    - `useScrollManager.ts`（滚动状态/速度/动态 rootMargin）\r\n  - `error/`\r\n    - `useErrorBoundary.tsx`（错误边界与兜底）\r\n  - `performance/`\r\n    - `performanceMonitor.ts`（统一指标/报告）\r\n- `components/`\r\n  - `Placeholder.tsx`\r\n  - `LoadingIndicator.tsx`\r\n  - `ImageErrorUI.tsx`\r\n- `hoc/`\r\n  - `withEnhancements.tsx`（可选：增强包装组合 features）\r\n- `workers/`\r\n  - `lqip-worker.js`\r\n- `style/`\r\n  - `style.module.css`\r\n- `utils/`\r\n  - `retry.ts`、`url.ts`、`idle.ts`、`types.ts`、`invariant.ts`\r\n- `index.ts`（导出清单）\r\n\r\n设计原则：\r\n- 核心组件仅依赖 `core/*` 与最小必要的 `features/*`，通过 props 控制启用。\r\n- 每个 `feature` 自包含实现、类型与最少对外 API。\r\n- 取消旧实现中的重复逻辑与隐式耦合，统一在 `core` 层组装。\r\n\r\n---\r\n\r\n## 2) 对齐 89 项功能的模块映射（概览）\r\n\r\n- 基础懒加载（7）→ `core/useIntersection.ts` + `core/LazyLoadImage.tsx`\r\n- 高级加载优化（15）→ `features/concurrency`、`features/cache`、`utils/*`\r\n- LQIP（9）→ `features/lqip/*` + `workers/lqip-worker.js`\r\n- 虚拟滚动（8）→ `features/scroll/useScrollManager.ts` + `core/useIntersection.ts`\r\n- 内存管理（8）→ `features/memory/useMemoryManager.ts`\r\n- 错误处理（7）→ `features/error/useErrorBoundary.tsx` + `components/ImageErrorUI.tsx`\r\n- 性能监控（9）→ `features/performance/performanceMonitor.ts`\r\n- 用户体验（8）→ `components/Placeholder.tsx`、`LoadingIndicator.tsx`、`style/*`\r\n- 开发者工具（9）→ `core/config.ts`、`index.ts`、`types.ts`、`performance/*`\r\n- 扩展性（9）→ `hoc/withEnhancements.tsx` + hooks/模块化输出\r\n\r\n后续会在“任务清单”中细化为可执行子任务并逐步 check。\r\n\r\n---\r\n\r\n## 3) 公共类型与配置（草案）\r\n\r\n- `CoreProps`: `src`, `alt`, 容器/图片/占位符样式与类名、Intersection 参数\r\n- `AdvancedProps`: LQIP、Cache、Concurrency、Memory、Scroll、Performance、ErrorBoundary、LoadingIndicator、Fallbacks\r\n- `Config`: 默认参数（rootMargin、threshold、retry、cacheMaxBytes、lqipWidth/quality/format、workerTimeout、memoryLimit、scrollSpeedThreshold 等）\r\n\r\n---\r\n\r\n## 4) 重构实施步骤（可执行，带清单）\r\n\r\n### 阶段 A：骨架搭建（目录/最小可运行）\r\n- [ ] A1 创建 `src/components/@LazyLoadImage/` 目录与子目录\r\n- [ ] A2 新建 `core/LazyLoadImage.tsx`：仅 Intersection + 基本加载与就绪显示\r\n- [ ] A3 新建 `core/useIntersection.ts`：封装单一 IO 逻辑（root/rootRef/rootMargin/threshold）\r\n- [ ] A4 新建 `core/useImageState.ts`：状态机（idle → loading → ready/error），保证 `decode()` 后再就绪\r\n- [ ] A5 新建 `core/config.ts` 与 `utils/types.ts`：默认配置/类型草案\r\n- [ ] A6 新建 `components/Placeholder.tsx`、`LoadingIndicator.tsx`、`ImageErrorUI.tsx`\r\n- [ ] A7 新建 `style/style.module.css`：容器与占位默认样式（含灰色渐变）\r\n- [ ] A8 新建 `index.ts`：导出核心组件与类型\r\n\r\n### 阶段 B：特性拼装（逐项引入）\r\n- [ ] B1 Cache：`features/cache/useImageCache.ts`（IndexedDB + 内存 + 统计）并在核心加载路径接入\r\n- [ ] B2 Concurrency：`features/concurrency/useConcurrency.ts`（简化优先级与队列）接入加载入口\r\n- [ ] B3 Retry/URL busting：`utils/retry.ts`、`utils/url.ts` 接入加载失败路径\r\n- [ ] B4 Fallback 源：在 `core/LazyLoadImage.tsx` 的加载器里串联 `fallbackSrcs`\r\n- [ ] B5 LQIP：`features/lqip/useLQIP.ts` + `workers/lqip-worker.js`（缓存优先、worker 降级）\r\n- [ ] B6 Scroll 优化：`features/scroll/useScrollManager.ts`（动态 rootMargin、快速滚动延迟）\r\n- [ ] B7 Memory：`features/memory/useMemoryManager.ts`（注册/估算/回收/距离更新）\r\n- [ ] B8 ErrorBoundary：`features/error/useErrorBoundary.tsx` + UI 组件在核心外层包裹\r\n- [ ] B9 Performance：`features/performance/performanceMonitor.ts` 钩入关键路径（首图、平均、worker init 等）\r\n\r\n### 阶段 C：开发者/体验增强\r\n- [ ] C1 配置合并与校验：`core/config.ts` 导出 `getConfig/setGlobalConfig/reset`\r\n- [ ] C2 `hoc/withEnhancements.tsx`：将 Scroll/Memory/SmartLoading 等封装为可选增强\r\n- [ ] C3 响应式/高分屏支持：`sizes/srcSet` 与 `decoding/fetchpriority/preload/preconnect`\r\n- [ ] C4 指示器最小显示时长/状态动画与可定制占位符管线\r\n- [ ] C5 监控面板/调试信息（dev-only）\r\n\r\n### 阶段 D：回归与对齐\r\n- [ ] D1 对照 `LAZYIMAGE_FEATURES.md` 逐项验证 89 项功能存在与路径\r\n- [ ] D2 出具 API 对齐表（旧 → 新），确保功能等价（无需兼容层）\r\n- [ ] D3 补充缺失单测/基本集成测试用例\r\n- [ ] D4 文档与示例：Quick/VirtualScroll/Horizontal/Worker/LQIP/Diagnostics 等示例页\r\n\r\n---\r\n\r\n## 5) 关键技术决策\r\n\r\n- IO 统一：只在 `core/useIntersection.ts` 保持单一来源，`scroll` 仅提供动态 rootMargin、延迟策略，不再各处复制 IO 逻辑。\r\n- LQIP 策略：缓存优先，其次 worker，失败降级主线程，所有产物写入 LQIP 缓存。\r\n- 并发策略：上限 3（可配置），高优先级可直通，保证 LCP 资源不被队列阻塞。\r\n- 内存策略：按可见性+距离触发回收，估算统一按 `w*h*4` 上限估算。\r\n- 错误策略：加载错误与渲染错误分离，统一 ErrorBoundary 显示/恢复。\r\n\r\n---\r\n\r\n## 6) 交付节奏（建议）\r\n\r\n- 周 1：完成阶段 A（可运行骨架）\r\n- 周 2：完成阶段 B（关键特性）\r\n- 周 3：完成阶段 C、D（开发者增强与对齐验收）\r\n\r\n---\r\n\r\n## 7) 追踪清单（滚动维护）\r\n\r\n- [ ] 目录创建并提交\r\n- [ ] 核心组件渲染首图路径打通\r\n- [ ] 缓存/并发/重试/兜底接入\r\n- [ ] LQIP + Worker + 缓存落盘\r\n- [ ] Scroll 动态 rootMargin 与快速滚动延迟\r\n- [ ] Memory 注册/距离/回收闭环\r\n- [ ] 错误边界/错误 UI/恢复\r\n- [ ] 性能监控指标可用（平均/首图/worker-init）\r\n- [ ] 文档/示例/对齐 89 项功能\r\n\r\n---\r\n\r\n说明：该重构为“完全重构”，无需兼容旧 API；但所有功能必须等价覆盖（89 项）。后续每完成一个阶段与子任务，请在本清单上以 `[x]` 标记完成。\r\n"
        }
    ]
}