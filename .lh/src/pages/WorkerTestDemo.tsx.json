{
    "sourceFile": "src/pages/WorkerTestDemo.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1759221334736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759222544905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,172 +1,246 @@\n-/**\r\n- * Worker 测试演示页面\r\n- * 测试 LQIP Worker 功能是否正常工作\r\n- */\r\n+import \"vane-lazy-image/style.css\";\r\n \r\n-import React, { useEffect, useState } from \"react\";\r\n import {\r\n-  detectWorkerCapabilities,\r\n-  getWorkerRecommendation,\r\n-  getWorkerStatusReport,\r\n-  testWorkerFunctionality,\r\n-} from \"../components/LazyImage/utils/workerDetection\";\r\n+  LazyImageEnhanced,\r\n+  MemoryCacheMonitor,\r\n+  useEnhancedImageCache,\r\n+  useEnhancedMemoryManager,\r\n+  useScrollManager,\r\n+} from \"vane-lazy-image\";\r\n+import React, { useEffect, useRef, useState } from \"react\";\r\n \r\n-import { LazyImage } from \"../components/LazyImage\";\r\n+const VirtualScrollDemo: React.FC = () => {\r\n+  // 使用增强版 Hook\r\n+  const imageCache = useEnhancedImageCache({\r\n+    maxBytes: 100 * 1024 * 1024, // 100MB\r\n+    enableHitRateTracking: true,\r\n+    enableSizeDistributionAnalysis: true,\r\n+    enableCleanupHistory: true,\r\n+    enableIndexedDBMonitoring: true,\r\n+    enablePerformanceMetrics: true,\r\n+  });\r\n \r\n-const WorkerTestDemo: React.FC = () => {\r\n-  const [workerStatus, setWorkerStatus] = useState<any>(null);\r\n-  const [testResults, setTestResults] = useState<any>(null);\r\n-  const [isLoading, setIsLoading] = useState(false);\r\n+  const memoryManager = useEnhancedMemoryManager({\r\n+    maxMemoryUsage: 120 * 1024 * 1024, // 120MB\r\n+    unloadDistance: 1800,\r\n+    unloadDelay: 4000,\r\n+    enableLifecycleTracking: true,\r\n+    enableLeakDetection: true,\r\n+    enableTrendAnalysis: true,\r\n+  });\r\n \r\n-  // 测试图片 URL\r\n-  const testImageUrl = \"https://picsum.photos/800/600?random=1\";\r\n+  const scrollManager = useScrollManager({\r\n+    scrollAxis: \"vertical\",\r\n+    scrollSpeedThreshold: 1.8,\r\n+    bufferZoneMultiplier: 1.6,\r\n+    maxBufferZone: 1000,\r\n+    minBufferZone: 150,\r\n+  });\r\n \r\n-  useEffect(() => {\r\n-    // 检测 Worker 能力\r\n-    const capabilities = detectWorkerCapabilities();\r\n-    const recommendation = getWorkerRecommendation();\r\n-    const statusReport = getWorkerStatusReport();\r\n+  const [showDebugInfo, setShowDebugInfo] = useState(false);\r\n+  const containerRef = useRef<HTMLDivElement>(null);\r\n \r\n-    setWorkerStatus({\r\n-      capabilities,\r\n-      recommendation,\r\n-      statusReport,\r\n-    });\r\n-  }, []);\r\n+  // 生成大量测试图片\r\n+  const generateImages = (count: number) => {\r\n+    return Array.from({ length: count }, (_, i) => ({\r\n+      id: i,\r\n+      src: `https://picsum.photos/400/300?random=${i + 1000}`,\r\n+      alt: `Test image ${i + 1}`,\r\n+      height: 200 + (i % 5) * 50, // 变化的高度\r\n+    }));\r\n+  };\r\n \r\n-  const handleTestWorker = async () => {\r\n-    setIsLoading(true);\r\n-    try {\r\n-      const isWorking = await testWorkerFunctionality();\r\n-      setTestResults({\r\n-        isWorking,\r\n-        timestamp: new Date().toISOString(),\r\n-      });\r\n-    } catch (error) {\r\n-      setTestResults({\r\n-        isWorking: false,\r\n-        error: error instanceof Error ? error.message : \"未知错误\",\r\n-        timestamp: new Date().toISOString(),\r\n-      });\r\n-    } finally {\r\n-      setIsLoading(false);\r\n+  const images = generateImages(200); // 200张图片用于测试\r\n+\r\n+  // 设置滚动容器\r\n+  useEffect(() => {\r\n+    if (containerRef.current) {\r\n+      scrollManager.setRoot(containerRef.current);\r\n     }\r\n-  };\r\n+  }, [scrollManager]);\r\n \r\n   return (\r\n-    <div style={{ padding: \"20px\", maxWidth: \"1200px\", margin: \"0 auto\" }}>\r\n-      <h1>Web Worker 功能测试</h1>\r\n+    <div style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\r\n+      {/* 控制面板 */}\r\n+      <div\r\n+        style={{\r\n+          padding: \"16px\",\r\n+          background: \"#f5f5f5\",\r\n+          borderBottom: \"1px solid #ddd\",\r\n+          flexShrink: 0,\r\n+        }}\r\n+      >\r\n+        <h2 style={{ margin: \"0 0 16px 0\" }}>虚拟滚动 LazyImage 演示</h2>\r\n \r\n-      {/* Worker 状态信息 */}\r\n-      <div style={{ marginBottom: \"30px\" }}>\r\n-        <h2>Worker 能力检测</h2>\r\n-        {workerStatus && (\r\n-          <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: \"20px\" }}>\r\n-            <div>\r\n-              <h3>浏览器支持情况</h3>\r\n-              <ul>\r\n-                <li>Web Workers: {workerStatus.capabilities.hasWorker ? \"✅\" : \"❌\"}</li>\r\n-                <li>OffscreenCanvas: {workerStatus.capabilities.hasOffscreenCanvas ? \"✅\" : \"❌\"}</li>\r\n-                <li>CreateImageBitmap: {workerStatus.capabilities.hasCreateImageBitmap ? \"✅\" : \"❌\"}</li>\r\n-                <li>Fetch API: {workerStatus.capabilities.hasFetch ? \"✅\" : \"❌\"}</li>\r\n-                <li>Transferable Objects: {workerStatus.capabilities.hasTransferableObjects ? \"✅\" : \"❌\"}</li>\r\n-                <li>性能等级: {workerStatus.capabilities.estimatedPerformance}</li>\r\n-              </ul>\r\n-            </div>\r\n-            <div>\r\n-              <h3>推荐配置</h3>\r\n-              <ul>\r\n-                <li>使用 Worker: {workerStatus.recommendation.shouldUseWorker ? \"✅\" : \"❌\"}</li>\r\n-                <li>最大 Worker 数: {workerStatus.recommendation.maxWorkers}</li>\r\n-                <li>启用降级: {workerStatus.recommendation.enableFallback ? \"✅\" : \"❌\"}</li>\r\n-                <li>原因: {workerStatus.recommendation.reason}</li>\r\n-              </ul>\r\n-            </div>\r\n-          </div>\r\n-        )}\r\n-      </div>\r\n+        {/* 使用新的统一监控组件 */}\r\n+        <MemoryCacheMonitor\r\n+          memoryManager={memoryManager}\r\n+          imageCache={imageCache}\r\n+          scrollManager={scrollManager}\r\n+          title=\"虚拟滚动性能监控\"\r\n+          showMemoryChart={true}\r\n+          showCacheChart={true}\r\n+          showScrollInfo={true}\r\n+          showControls={true}\r\n+          updateInterval={1000}\r\n+          style={{ marginBottom: \"16px\" }}\r\n+        />\r\n \r\n-      {/* Worker 功能测试 */}\r\n-      <div style={{ marginBottom: \"30px\" }}>\r\n-        <h2>Worker 功能测试</h2>\r\n-        <button\r\n-          onClick={handleTestWorker}\r\n-          disabled={isLoading}\r\n+        {/* 调试控制按钮 */}\r\n+        <div\r\n           style={{\r\n\\ No newline at end of file\n-            padding: \"10px 20px\",\r\n-            backgroundColor: isLoading ? \"#ccc\" : \"#007bff\",\r\n-            color: \"white\",\r\n-            border: \"none\",\r\n-            borderRadius: \"4px\",\r\n-            cursor: isLoading ? \"not-allowed\" : \"pointer\",\r\n+            background: \"white\",\r\n+            padding: \"12px\",\r\n+            borderRadius: \"8px\",\r\n+            border: \"1px solid #ddd\",\r\n+            display: \"flex\",\r\n+            gap: \"8px\",\r\n+            alignItems: \"center\",\r\n+            marginBottom: \"16px\",\r\n           }}\r\n         >\r\n-          {isLoading ? \"测试中...\" : \"测试 Worker 功能\"}\r\n-        </button>\r\n+          <button\r\n+            onClick={() => setShowDebugInfo(!showDebugInfo)}\r\n+            style={{\r\n+              padding: \"6px 12px\",\r\n+              background: showDebugInfo ? \"#52c41a\" : \"#d9d9d9\",\r\n+              color: showDebugInfo ? \"white\" : \"#666\",\r\n+              border: \"none\",\r\n+              borderRadius: 4,\r\n+              cursor: \"pointer\",\r\n+              fontSize: 12,\r\n+            }}\r\n+          >\r\n+            {showDebugInfo ? \"关闭调试\" : \"开启调试\"}\r\n+          </button>\r\n \r\n-        {testResults && (\r\n-          <div style={{ marginTop: \"15px\", padding: \"15px\", backgroundColor: \"#f8f9fa\", borderRadius: \"4px\" }}>\r\n-            <h4>测试结果</h4>\r\n-            <p>状态: {testResults.isWorking ? \"✅ 正常工作\" : \"❌ 无法工作\"}</p>\r\n-            <p>时间: {testResults.timestamp}</p>\r\n-            {testResults.error && <p style={{ color: \"red\" }}>错误: {testResults.error}</p>}\r\n-          </div>\r\n-        )}\r\n-      </div>\r\n+          <button\r\n+            onClick={() => {\r\n+              // 强制刷新所有图片\r\n+              window.location.reload();\r\n+            }}\r\n+            style={{\r\n+              padding: \"6px 12px\",\r\n+              background: \"#fa8c16\",\r\n+              color: \"white\",\r\n+              border: \"none\",\r\n+              borderRadius: 4,\r\n+              cursor: \"pointer\",\r\n+              fontSize: 12,\r\n+            }}\r\n+          >\r\n+            🔄 刷新页面\r\n+          </button>\r\n+        </div>\r\n \r\n-      {/* LQIP 功能演示 */}\r\n-      <div style={{ marginBottom: \"30px\" }}>\r\n-        <h2>LQIP 功能演示</h2>\r\n-        <p>下面的图片将使用 Web Worker 生成 LQIP（低质量图像占位符）：</p>\r\n-        \r\n-        <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(auto-fit, minmax(300px, 1fr))\", gap: \"20px\" }}>\r\n-          <div>\r\n-            <h4>启用 LQIP Worker</h4>\r\n-            <LazyImage\r\n-              src={testImageUrl}\r\n-              alt=\"测试图片 1\"\r\n-              style={{ width: \"100%\", height: \"200px\", objectFit: \"cover\" }}\r\n-              enableLQIP={true}\r\n-              lqipWidth={24}\r\n-              lqipQuality={0.6}\r\n-              enableLQIPWorker={true}\r\n-              showLoadingIndicator={true}\r\n-            />\r\n+        {/* 虚拟滚动特性说明 */}\r\n+        <div\r\n+          style={{\r\n+            background: \"white\",\r\n+            padding: \"12px\",\r\n+            borderRadius: \"8px\",\r\n+            border: \"1px solid #ddd\",\r\n+          }}\r\n+        >\r\n+          <h4 style={{ margin: \"0 0 8px 0\", color: \"#333\" }}>\r\n+            虚拟滚动优化特性\r\n+          </h4>\r\n+          <div\r\n+            style={{\r\n+              fontSize: \"12px\",\r\n+              color: \"#666\",\r\n+              display: \"grid\",\r\n+              gridTemplateColumns: \"repeat(auto-fit, minmax(250px, 1fr))\",\r\n+              gap: \"8px\",\r\n+            }}\r\n+          >\r\n+            <div>✅ 智能加载：根据滚动速度调整加载策略</div>\r\n+            <div>✅ 内存管理：自动卸载离开视窗的图片</div>\r\n+            <div>✅ 动态缓冲：根据滚动方向调整预加载区域</div>\r\n+            <div>✅ 优先级调整：距离视窗越近优先级越高</div>\r\n+            <div>✅ 生命周期追踪：详细的图片状态监控</div>\r\n+            <div>✅ 缓存命中率：智能缓存策略和性能分析</div>\r\n           </div>\r\n-          \r\n-          <div>\r\n-            <h4>禁用 LQIP Worker（主线程）</h4>\r\n-            <LazyImage\r\n-              src={testImageUrl}\r\n-              alt=\"测试图片 2\"\r\n-              style={{ width: \"100%\", height: \"200px\", objectFit: \"cover\" }}\r\n-              enableLQIP={true}\r\n-              lqipWidth={24}\r\n-              lqipQuality={0.6}\r\n-              enableLQIPWorker={false}\r\n-              showLoadingIndicator={true}\r\n-            />\r\n+          <div\r\n+            style={{\r\n+              marginTop: \"8px\",\r\n+              padding: \"8px\",\r\n+              backgroundColor: \"#f0f0f0\",\r\n+              borderRadius: \"4px\",\r\n+              fontSize: \"11px\",\r\n+            }}\r\n+          >\r\n+            <strong>增强配置参数:</strong>\r\n+            <br />\r\n+            滚动阈值: 1.8 px/ms | 内存限制: 120MB | 卸载距离: 1800px\r\n+            <br />\r\n+            缓存容量: 100MB | 泄漏检测: 开启 | 趋势分析: 开启\r\n           </div>\r\n         </div>\r\n       </div>\r\n \r\n-      {/* 详细状态报告 */}\r\n-      {workerStatus && (\r\n-        <div style={{ marginBottom: \"30px\" }}>\r\n-          <h2>详细状态报告</h2>\r\n-          <pre style={{ \r\n-            backgroundColor: \"#f8f9fa\", \r\n-            padding: \"15px\", \r\n-            borderRadius: \"4px\", \r\n-            overflow: \"auto\",\r\n-            fontSize: \"12px\"\r\n-          }}>\r\n-            {JSON.stringify(workerStatus.statusReport, null, 2)}\r\n-          </pre>\r\n+      {/* 滚动容器 */}\r\n+      <div\r\n+        ref={containerRef}\r\n+        style={{\r\n+          flex: 1,\r\n+          overflow: \"auto\",\r\n+          padding: \"16px\",\r\n+        }}\r\n+      >\r\n+        <div\r\n+          style={{\r\n+            display: \"grid\",\r\n+            gridTemplateColumns: \"repeat(auto-fill, minmax(300px, 1fr))\",\r\n+            gap: \"16px\",\r\n+          }}\r\n+        >\r\n+          {images.map((image, index) => (\r\n+            <div\r\n+              key={image.id}\r\n+              style={{\r\n+                background: \"white\",\r\n+                borderRadius: \"8px\",\r\n+                overflow: \"hidden\",\r\n+                boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\",\r\n+                height: image.height,\r\n+              }}\r\n+            >\r\n+              <LazyImageEnhanced\r\n+                src={image.src}\r\n+                alt={image.alt}\r\n+                style={{\r\n+                  width: \"100%\",\r\n+                  height: \"100%\",\r\n+                  objectFit: \"cover\",\r\n+                }}\r\n+                showLoadingIndicator={true}\r\n+                enableLQIP={true}\r\n+                enableLQIPWorker={true}\r\n+                workerOptions={{\r\n+                  maxWorkers: 2,\r\n+                  taskTimeout: 30000,\r\n+                }}\r\n+              />\r\n+            </div>\r\n+          ))}\r\n         </div>\r\n-      )}\r\n+\r\n+        {/* 底部提示 */}\r\n+        <div\r\n+          style={{\r\n+            textAlign: \"center\",\r\n+            padding: \"40px 20px\",\r\n+            color: \"#666\",\r\n+            fontSize: \"14px\",\r\n+          }}\r\n+        >\r\n+          <p>🎉 已加载 {images.length} 张图片</p>\r\n+          <p>快速滚动试试看，观察内存管理和智能加载的效果！</p>\r\n+        </div>\r\n+      </div>\r\n     </div>\r\n   );\r\n };\r\n \r\n-export default WorkerTestDemo;\n+export default VirtualScrollDemo;\r\n"
                },
                {
                    "date": 1759222637933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,8 +214,14 @@\n                   height: \"100%\",\r\n                   objectFit: \"cover\",\r\n                 }}\r\n                 showLoadingIndicator={true}\r\n+                placeholderStyle={{\r\n+                  background:\r\n+                    \"linear-gradient(45deg, #f0f0f0 25%, transparent 25%), linear-gradient(-45deg, #f0f0f0 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #f0f0f0 75%), linear-gradient(-45deg, transparent 75%, #f0f0f0 75%)\",\r\n+                  backgroundSize: \"20px 20px\",\r\n+                  backgroundPosition: \"0 0, 0 10px, 10px -10px, -10px 0px\",\r\n+                }}\r\n                 enableLQIP={true}\r\n                 enableLQIPWorker={true}\r\n                 workerOptions={{\r\n                   maxWorkers: 2,\r\n@@ -242,5 +248,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n-export default VirtualScrollDemo;\n\\ No newline at end of file\n+export default VirtualScrollDemo;\r\n"
                },
                {
                    "date": 1759222684988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,9 +213,8 @@\n                   width: \"100%\",\r\n                   height: \"100%\",\r\n                   objectFit: \"cover\",\r\n                 }}\r\n-                showLoadingIndicator={true}\r\n                 placeholderStyle={{\r\n                   background:\r\n                     \"linear-gradient(45deg, #f0f0f0 25%, transparent 25%), linear-gradient(-45deg, #f0f0f0 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #f0f0f0 75%), linear-gradient(-45deg, transparent 75%, #f0f0f0 75%)\",\r\n                   backgroundSize: \"20px 20px\",\r\n"
                },
                {
                    "date": 1759222738675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,14 +213,8 @@\n                   width: \"100%\",\r\n                   height: \"100%\",\r\n                   objectFit: \"cover\",\r\n                 }}\r\n-                placeholderStyle={{\r\n-                  background:\r\n-                    \"linear-gradient(45deg, #f0f0f0 25%, transparent 25%), linear-gradient(-45deg, #f0f0f0 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #f0f0f0 75%), linear-gradient(-45deg, transparent 75%, #f0f0f0 75%)\",\r\n-                  backgroundSize: \"20px 20px\",\r\n-                  backgroundPosition: \"0 0, 0 10px, 10px -10px, -10px 0px\",\r\n-                }}\r\n                 enableLQIP={true}\r\n                 enableLQIPWorker={true}\r\n                 workerOptions={{\r\n                   maxWorkers: 2,\r\n"
                },
                {
                    "date": 1759223181189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n-import \"vane-lazy-image/style.css\";\r\n+import \"../components/LazyImage/style/style.module.css\";\r\n \r\n import {\r\n   LazyImageEnhanced,\r\n   MemoryCacheMonitor,\r\n   useEnhancedImageCache,\r\n   useEnhancedMemoryManager,\r\n   useScrollManager,\r\n-} from \"vane-lazy-image\";\r\n+} from \"../components/LazyImage\";\r\n import React, { useEffect, useRef, useState } from \"react\";\r\n \r\n const VirtualScrollDemo: React.FC = () => {\r\n   // 使用增强版 Hook\r\n@@ -194,9 +194,9 @@\n             gridTemplateColumns: \"repeat(auto-fill, minmax(300px, 1fr))\",\r\n             gap: \"16px\",\r\n           }}\r\n         >\r\n-          {images.map((image, index) => (\r\n+          {images.map((image) => (\r\n             <div\r\n               key={image.id}\r\n               style={{\r\n                 background: \"white\",\r\n"
                }
            ],
            "date": 1759221334736,
            "name": "Commit-0",
            "content": "/**\r\n * Worker 测试演示页面\r\n * 测试 LQIP Worker 功能是否正常工作\r\n */\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  detectWorkerCapabilities,\r\n  getWorkerRecommendation,\r\n  getWorkerStatusReport,\r\n  testWorkerFunctionality,\r\n} from \"../components/LazyImage/utils/workerDetection\";\r\n\r\nimport { LazyImage } from \"../components/LazyImage\";\r\n\r\nconst WorkerTestDemo: React.FC = () => {\r\n  const [workerStatus, setWorkerStatus] = useState<any>(null);\r\n  const [testResults, setTestResults] = useState<any>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // 测试图片 URL\r\n  const testImageUrl = \"https://picsum.photos/800/600?random=1\";\r\n\r\n  useEffect(() => {\r\n    // 检测 Worker 能力\r\n    const capabilities = detectWorkerCapabilities();\r\n    const recommendation = getWorkerRecommendation();\r\n    const statusReport = getWorkerStatusReport();\r\n\r\n    setWorkerStatus({\r\n      capabilities,\r\n      recommendation,\r\n      statusReport,\r\n    });\r\n  }, []);\r\n\r\n  const handleTestWorker = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const isWorking = await testWorkerFunctionality();\r\n      setTestResults({\r\n        isWorking,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    } catch (error) {\r\n      setTestResults({\r\n        isWorking: false,\r\n        error: error instanceof Error ? error.message : \"未知错误\",\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\", maxWidth: \"1200px\", margin: \"0 auto\" }}>\r\n      <h1>Web Worker 功能测试</h1>\r\n\r\n      {/* Worker 状态信息 */}\r\n      <div style={{ marginBottom: \"30px\" }}>\r\n        <h2>Worker 能力检测</h2>\r\n        {workerStatus && (\r\n          <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: \"20px\" }}>\r\n            <div>\r\n              <h3>浏览器支持情况</h3>\r\n              <ul>\r\n                <li>Web Workers: {workerStatus.capabilities.hasWorker ? \"✅\" : \"❌\"}</li>\r\n                <li>OffscreenCanvas: {workerStatus.capabilities.hasOffscreenCanvas ? \"✅\" : \"❌\"}</li>\r\n                <li>CreateImageBitmap: {workerStatus.capabilities.hasCreateImageBitmap ? \"✅\" : \"❌\"}</li>\r\n                <li>Fetch API: {workerStatus.capabilities.hasFetch ? \"✅\" : \"❌\"}</li>\r\n                <li>Transferable Objects: {workerStatus.capabilities.hasTransferableObjects ? \"✅\" : \"❌\"}</li>\r\n                <li>性能等级: {workerStatus.capabilities.estimatedPerformance}</li>\r\n              </ul>\r\n            </div>\r\n            <div>\r\n              <h3>推荐配置</h3>\r\n              <ul>\r\n                <li>使用 Worker: {workerStatus.recommendation.shouldUseWorker ? \"✅\" : \"❌\"}</li>\r\n                <li>最大 Worker 数: {workerStatus.recommendation.maxWorkers}</li>\r\n                <li>启用降级: {workerStatus.recommendation.enableFallback ? \"✅\" : \"❌\"}</li>\r\n                <li>原因: {workerStatus.recommendation.reason}</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Worker 功能测试 */}\r\n      <div style={{ marginBottom: \"30px\" }}>\r\n        <h2>Worker 功能测试</h2>\r\n        <button\r\n          onClick={handleTestWorker}\r\n          disabled={isLoading}\r\n          style={{\r\n            padding: \"10px 20px\",\r\n            backgroundColor: isLoading ? \"#ccc\" : \"#007bff\",\r\n            color: \"white\",\r\n            border: \"none\",\r\n            borderRadius: \"4px\",\r\n            cursor: isLoading ? \"not-allowed\" : \"pointer\",\r\n          }}\r\n        >\r\n          {isLoading ? \"测试中...\" : \"测试 Worker 功能\"}\r\n        </button>\r\n\r\n        {testResults && (\r\n          <div style={{ marginTop: \"15px\", padding: \"15px\", backgroundColor: \"#f8f9fa\", borderRadius: \"4px\" }}>\r\n            <h4>测试结果</h4>\r\n            <p>状态: {testResults.isWorking ? \"✅ 正常工作\" : \"❌ 无法工作\"}</p>\r\n            <p>时间: {testResults.timestamp}</p>\r\n            {testResults.error && <p style={{ color: \"red\" }}>错误: {testResults.error}</p>}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* LQIP 功能演示 */}\r\n      <div style={{ marginBottom: \"30px\" }}>\r\n        <h2>LQIP 功能演示</h2>\r\n        <p>下面的图片将使用 Web Worker 生成 LQIP（低质量图像占位符）：</p>\r\n        \r\n        <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(auto-fit, minmax(300px, 1fr))\", gap: \"20px\" }}>\r\n          <div>\r\n            <h4>启用 LQIP Worker</h4>\r\n            <LazyImage\r\n              src={testImageUrl}\r\n              alt=\"测试图片 1\"\r\n              style={{ width: \"100%\", height: \"200px\", objectFit: \"cover\" }}\r\n              enableLQIP={true}\r\n              lqipWidth={24}\r\n              lqipQuality={0.6}\r\n              enableLQIPWorker={true}\r\n              showLoadingIndicator={true}\r\n            />\r\n          </div>\r\n          \r\n          <div>\r\n            <h4>禁用 LQIP Worker（主线程）</h4>\r\n            <LazyImage\r\n              src={testImageUrl}\r\n              alt=\"测试图片 2\"\r\n              style={{ width: \"100%\", height: \"200px\", objectFit: \"cover\" }}\r\n              enableLQIP={true}\r\n              lqipWidth={24}\r\n              lqipQuality={0.6}\r\n              enableLQIPWorker={false}\r\n              showLoadingIndicator={true}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* 详细状态报告 */}\r\n      {workerStatus && (\r\n        <div style={{ marginBottom: \"30px\" }}>\r\n          <h2>详细状态报告</h2>\r\n          <pre style={{ \r\n            backgroundColor: \"#f8f9fa\", \r\n            padding: \"15px\", \r\n            borderRadius: \"4px\", \r\n            overflow: \"auto\",\r\n            fontSize: \"12px\"\r\n          }}>\r\n            {JSON.stringify(workerStatus.statusReport, null, 2)}\r\n          </pre>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WorkerTestDemo;"
        }
    ]
}