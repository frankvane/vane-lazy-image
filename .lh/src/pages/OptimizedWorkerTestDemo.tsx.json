{
    "sourceFile": "src/pages/OptimizedWorkerTestDemo.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1759223181069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759223850551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,38 +76,84 @@\n       {/* Worker 状态信息 */}\r\n       <div style={{ marginBottom: \"30px\" }}>\r\n         <h2>Worker 能力检测</h2>\r\n         {workerStatus && (\r\n-          <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: \"20px\" }}>\r\n+          <div\r\n+            style={{\r\n+              display: \"grid\",\r\n+              gridTemplateColumns: \"1fr 1fr\",\r\n+              gap: \"20px\",\r\n+            }}\r\n+          >\r\n             <div>\r\n               <h3>浏览器支持情况</h3>\r\n               <ul>\r\n-                <li>Web Workers: {workerStatus.capabilities.hasWorker ? \"✅\" : \"❌\"}</li>\r\n-                <li>OffscreenCanvas: {workerStatus.capabilities.hasOffscreenCanvas ? \"✅\" : \"❌\"}</li>\r\n-                <li>CreateImageBitmap: {workerStatus.capabilities.hasCreateImageBitmap ? \"✅\" : \"❌\"}</li>\r\n-                <li>Fetch API: {workerStatus.capabilities.hasFetch ? \"✅\" : \"❌\"}</li>\r\n-                <li>Transferable Objects: {workerStatus.capabilities.hasTransferableObjects ? \"✅\" : \"❌\"}</li>\r\n-                <li>性能等级: {workerStatus.capabilities.estimatedPerformance}</li>\r\n+                <li>\r\n+                  Web Workers:{\" \"}\r\n+                  {workerStatus.capabilities.hasWorker ? \"✅\" : \"❌\"}\r\n+                </li>\r\n+                <li>\r\n+                  OffscreenCanvas:{\" \"}\r\n+                  {workerStatus.capabilities.hasOffscreenCanvas ? \"✅\" : \"❌\"}\r\n+                </li>\r\n+                <li>\r\n+                  CreateImageBitmap:{\" \"}\r\n+                  {workerStatus.capabilities.hasCreateImageBitmap ? \"✅\" : \"❌\"}\r\n+                </li>\r\n+                <li>\r\n+                  Fetch API: {workerStatus.capabilities.hasFetch ? \"✅\" : \"❌\"}\r\n+                </li>\r\n+                <li>\r\n+                  Transferable Objects:{\" \"}\r\n+                  {workerStatus.capabilities.hasTransferableObjects\r\n+                    ? \"✅\"\r\n+                    : \"❌\"}\r\n+                </li>\r\n+                <li>\r\n+                  性能等级: {workerStatus.capabilities.estimatedPerformance}\r\n+                </li>\r\n               </ul>\r\n             </div>\r\n             <div>\r\n               <h3>推荐配置</h3>\r\n               <ul>\r\n-                <li>使用 Worker: {workerStatus.recommendation.shouldUseWorker ? \"✅\" : \"❌\"}</li>\r\n-                <li>最大 Worker 数: {workerStatus.recommendation.maxWorkers}</li>\r\n-                <li>启用降级: {workerStatus.recommendation.enableFallback ? \"✅\" : \"❌\"}</li>\r\n+                <li>\r\n+                  使用 Worker:{\" \"}\r\n+                  {workerStatus.recommendation.shouldUseWorker ? \"✅\" : \"❌\"}\r\n+                </li>\r\n+                <li>\r\n+                  最大 Worker 数: {workerStatus.recommendation.maxWorkers}\r\n+                </li>\r\n+                <li>\r\n+                  启用降级:{\" \"}\r\n+                  {workerStatus.recommendation.enableFallback ? \"✅\" : \"❌\"}\r\n+                </li>\r\n                 <li>原因: {workerStatus.recommendation.reason}</li>\r\n               </ul>\r\n             </div>\r\n           </div>\r\n         )}\r\n       </div>\r\n \r\n       {/* 控制面板 */}\r\n-      <div style={{ marginBottom: \"30px\", padding: \"20px\", backgroundColor: \"#f8f9fa\", borderRadius: \"8px\" }}>\r\n+      <div\r\n+        style={{\r\n+          marginBottom: \"30px\",\r\n+          padding: \"20px\",\r\n+          backgroundColor: \"#f8f9fa\",\r\n+          borderRadius: \"8px\",\r\n+        }}\r\n+      >\r\n         <h2>测试控制</h2>\r\n \r\n-        <div style={{ display: \"flex\", gap: \"20px\", alignItems: \"center\", marginBottom: \"20px\" }}>\r\n+        <div\r\n+          style={{\r\n+            display: \"flex\",\r\n+            gap: \"20px\",\r\n+            alignItems: \"center\",\r\n+            marginBottom: \"20px\",\r\n+          }}\r\n+        >\r\n           <div>\r\n             <label>图片数量: </label>\r\n             <select\r\n               value={imageCount}\r\n@@ -150,13 +196,22 @@\n           </button>\r\n         </div>\r\n \r\n         {testResults && (\r\n-          <div style={{ padding: \"15px\", backgroundColor: \"white\", borderRadius: \"4px\", marginTop: \"15px\" }}>\r\n+          <div\r\n+            style={{\r\n+              padding: \"15px\",\r\n+              backgroundColor: \"white\",\r\n+              borderRadius: \"4px\",\r\n+              marginTop: \"15px\",\r\n+            }}\r\n+          >\r\n             <h4>测试结果</h4>\r\n             <p>状态: {testResults.isWorking ? \"✅ 正常工作\" : \"❌ 无法工作\"}</p>\r\n             <p>时间: {testResults.timestamp}</p>\r\n-            {testResults.error && <p style={{ color: \"red\" }}>错误: {testResults.error}</p>}\r\n+            {testResults.error && (\r\n+              <p style={{ color: \"red\" }}>错误: {testResults.error}</p>\r\n+            )}\r\n           </div>\r\n         )}\r\n       </div>\r\n \r\n@@ -164,12 +219,24 @@\n       <div style={{ marginBottom: \"30px\" }}>\r\n         <h2>性能对比测试</h2>\r\n         <p>对比启用和禁用 Worker 的加载性能：</p>\r\n \r\n-        <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: \"20px\" }}>\r\n+        <div\r\n+          style={{\r\n+            display: \"grid\",\r\n+            gridTemplateColumns: \"1fr 1fr\",\r\n+            gap: \"20px\",\r\n+          }}\r\n+        >\r\n           <div>\r\n             <h4>启用 LQIP Worker</h4>\r\n-            <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(auto-fit, minmax(150px, 1fr))\", gap: \"10px\" }}>\r\n+            <div\r\n+              style={{\r\n+                display: \"grid\",\r\n+                gridTemplateColumns: \"repeat(auto-fit, minmax(150px, 1fr))\",\r\n+                gap: \"10px\",\r\n+              }}\r\n+            >\r\n               {images.slice(0, Math.min(6, imageCount)).map((image, index) => (\r\n                 <LazyImage\r\n                   key={`worker-${image.id}`}\r\n                   src={image.src}\r\n@@ -187,9 +254,15 @@\n           </div>\r\n \r\n           <div>\r\n             <h4>禁用 LQIP Worker（主线程）</h4>\r\n-            <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(auto-fit, minmax(150px, 1fr))\", gap: \"10px\" }}>\r\n+            <div\r\n+              style={{\r\n+                display: \"grid\",\r\n+                gridTemplateColumns: \"repeat(auto-fit, minmax(150px, 1fr))\",\r\n+                gap: \"10px\",\r\n+              }}\r\n+            >\r\n               {images.slice(0, Math.min(6, imageCount)).map((image, index) => (\r\n                 <LazyImage\r\n                   key={`main-${image.id}`}\r\n                   src={image.src}\r\n@@ -212,9 +285,15 @@\n       <div style={{ marginBottom: \"30px\" }}>\r\n         <h2>单张大图 LQIP 测试</h2>\r\n         <p>测试大图片的 LQIP 生成效果：</p>\r\n \r\n-        <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: \"20px\" }}>\r\n+        <div\r\n+          style={{\r\n+            display: \"grid\",\r\n+            gridTemplateColumns: \"1fr 1fr\",\r\n+            gap: \"20px\",\r\n+          }}\r\n+        >\r\n           <div>\r\n             <h4>启用 Worker</h4>\r\n             <LazyImage\r\n               src={testImageUrl}\r\n@@ -248,22 +327,42 @@\n \r\n       {/* 优化建议 */}\r\n       <div style={{ marginBottom: \"30px\" }}>\r\n         <h2>性能优化建议</h2>\r\n-        <div style={{ backgroundColor: \"#f8f9fa\", padding: \"20px\", borderRadius: \"8px\" }}>\r\n+        <div\r\n+          style={{\r\n+            backgroundColor: \"#f8f9fa\",\r\n+            padding: \"20px\",\r\n+            borderRadius: \"8px\",\r\n+          }}\r\n+        >\r\n           <h4>解决初始化延迟的方法：</h4>\r\n           <ul>\r\n-            <li>✅ <strong>减少初始图片数量</strong> - 从 200 张减少到 20 张</li>\r\n-            <li>✅ <strong>启用优先级加载</strong> - 优先加载可见区域的图片</li>\r\n-            <li>✅ <strong>优化 LQIP 参数</strong> - 降低质量和尺寸减少处理时间</li>\r\n-            <li>✅ <strong>简化监控配置</strong> - 减少不必要的性能分析</li>\r\n-            <li>✅ <strong>使用本地图片</strong> - 避免网络请求延迟</li>\r\n-            <li>✅ <strong>预加载 Worker</strong> - 提前初始化 Worker 池</li>\r\n+            <li>\r\n+              ✅ <strong>减少初始图片数量</strong> - 从 200 张减少到 20 张\r\n+            </li>\r\n+            <li>\r\n+              ✅ <strong>启用优先级加载</strong> - 优先加载可见区域的图片\r\n+            </li>\r\n+            <li>\r\n+              ✅ <strong>优化 LQIP 参数</strong> - 降低质量和尺寸减少处理时间\r\n+            </li>\r\n+            <li>\r\n+              ✅ <strong>简化监控配置</strong> - 减少不必要的性能分析\r\n+            </li>\r\n+            <li>\r\n+              ✅ <strong>使用本地图片</strong> - 避免网络请求延迟\r\n+            </li>\r\n+            <li>\r\n+              ✅ <strong>预加载 Worker</strong> - 提前初始化 Worker 池\r\n+            </li>\r\n           </ul>\r\n \r\n           <h4>最佳实践：</h4>\r\n           <ul>\r\n-            <li>🎯 首屏图片使用 <code>priority=\"high\"</code></li>\r\n+            <li>\r\n+              🎯 首屏图片使用 <code>priority=\"high\"</code>\r\n+            </li>\r\n             <li>🎯 LQIP 尺寸控制在 16-32px</li>\r\n             <li>🎯 质量设置为 0.5-0.7</li>\r\n             <li>🎯 批量加载时使用虚拟滚动</li>\r\n             <li>🎯 监控内存使用情况</li>\r\n@@ -274,15 +373,17 @@\n       {/* 详细状态报告 */}\r\n       {workerStatus && (\r\n         <div style={{ marginBottom: \"30px\" }}>\r\n           <h2>详细状态报告</h2>\r\n-          <pre style={{\r\n-            backgroundColor: \"#f8f9fa\",\r\n-            padding: \"15px\",\r\n-            borderRadius: \"4px\",\r\n-            overflow: \"auto\",\r\n-            fontSize: \"12px\"\r\n-          }}>\r\n+          <pre\r\n+            style={{\r\n+              backgroundColor: \"#f8f9fa\",\r\n+              padding: \"15px\",\r\n+              borderRadius: \"4px\",\r\n+              overflow: \"auto\",\r\n+              fontSize: \"12px\",\r\n+            }}\r\n+          >\r\n             {JSON.stringify(workerStatus.statusReport, null, 2)}\r\n           </pre>\r\n         </div>\r\n       )}\r\n"
                }
            ],
            "date": 1759223181069,
            "name": "Commit-0",
            "content": "/**\r\n * 优化的 Worker 测试演示页面\r\n * 解决初始化延迟和性能问题\r\n */\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  detectWorkerCapabilities,\r\n  getWorkerRecommendation,\r\n  getWorkerStatusReport,\r\n  testWorkerFunctionality,\r\n} from \"../components/LazyImage/utils/workerDetection\";\r\n\r\nimport { LazyImage } from \"../components/LazyImage\";\r\n\r\nconst OptimizedWorkerTestDemo: React.FC = () => {\r\n  const [workerStatus, setWorkerStatus] = useState<any>(null);\r\n  const [testResults, setTestResults] = useState<any>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [imageCount, setImageCount] = useState(20); // 减少初始图片数量\r\n  const [enableWorker, setEnableWorker] = useState(true);\r\n\r\n  // 测试图片 URL\r\n  const testImageUrl = \"https://picsum.photos/800/600?random=1\";\r\n\r\n  useEffect(() => {\r\n    // 检测 Worker 能力\r\n    const capabilities = detectWorkerCapabilities();\r\n    const recommendation = getWorkerRecommendation();\r\n    const statusReport = getWorkerStatusReport();\r\n\r\n    setWorkerStatus({\r\n      capabilities,\r\n      recommendation,\r\n      statusReport,\r\n    });\r\n\r\n    // 根据推荐自动设置 Worker 状态\r\n    setEnableWorker(recommendation.shouldUseWorker);\r\n  }, []);\r\n\r\n  const handleTestWorker = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const isWorking = await testWorkerFunctionality();\r\n      setTestResults({\r\n        isWorking,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    } catch (error) {\r\n      setTestResults({\r\n        isWorking: false,\r\n        error: error instanceof Error ? error.message : \"未知错误\",\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // 生成测试图片\r\n  const generateImages = (count: number) => {\r\n    return Array.from({ length: count }, (_, i) => ({\r\n      id: i,\r\n      src: `https://picsum.photos/400/300?random=${i + 2000}`,\r\n      alt: `Test image ${i + 1}`,\r\n    }));\r\n  };\r\n\r\n  const images = generateImages(imageCount);\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\", maxWidth: \"1200px\", margin: \"0 auto\" }}>\r\n      <h1>优化的 Web Worker 功能测试</h1>\r\n\r\n      {/* Worker 状态信息 */}\r\n      <div style={{ marginBottom: \"30px\" }}>\r\n        <h2>Worker 能力检测</h2>\r\n        {workerStatus && (\r\n          <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: \"20px\" }}>\r\n            <div>\r\n              <h3>浏览器支持情况</h3>\r\n              <ul>\r\n                <li>Web Workers: {workerStatus.capabilities.hasWorker ? \"✅\" : \"❌\"}</li>\r\n                <li>OffscreenCanvas: {workerStatus.capabilities.hasOffscreenCanvas ? \"✅\" : \"❌\"}</li>\r\n                <li>CreateImageBitmap: {workerStatus.capabilities.hasCreateImageBitmap ? \"✅\" : \"❌\"}</li>\r\n                <li>Fetch API: {workerStatus.capabilities.hasFetch ? \"✅\" : \"❌\"}</li>\r\n                <li>Transferable Objects: {workerStatus.capabilities.hasTransferableObjects ? \"✅\" : \"❌\"}</li>\r\n                <li>性能等级: {workerStatus.capabilities.estimatedPerformance}</li>\r\n              </ul>\r\n            </div>\r\n            <div>\r\n              <h3>推荐配置</h3>\r\n              <ul>\r\n                <li>使用 Worker: {workerStatus.recommendation.shouldUseWorker ? \"✅\" : \"❌\"}</li>\r\n                <li>最大 Worker 数: {workerStatus.recommendation.maxWorkers}</li>\r\n                <li>启用降级: {workerStatus.recommendation.enableFallback ? \"✅\" : \"❌\"}</li>\r\n                <li>原因: {workerStatus.recommendation.reason}</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* 控制面板 */}\r\n      <div style={{ marginBottom: \"30px\", padding: \"20px\", backgroundColor: \"#f8f9fa\", borderRadius: \"8px\" }}>\r\n        <h2>测试控制</h2>\r\n\r\n        <div style={{ display: \"flex\", gap: \"20px\", alignItems: \"center\", marginBottom: \"20px\" }}>\r\n          <div>\r\n            <label>图片数量: </label>\r\n            <select\r\n              value={imageCount}\r\n              onChange={(e) => setImageCount(Number(e.target.value))}\r\n              style={{ padding: \"4px 8px\", marginLeft: \"8px\" }}\r\n            >\r\n              <option value={5}>5张</option>\r\n              <option value={10}>10张</option>\r\n              <option value={20}>20张</option>\r\n              <option value={50}>50张</option>\r\n              <option value={100}>100张</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={enableWorker}\r\n                onChange={(e) => setEnableWorker(e.target.checked)}\r\n                style={{ marginRight: \"8px\" }}\r\n              />\r\n              启用 Web Worker\r\n            </label>\r\n          </div>\r\n\r\n          <button\r\n            onClick={handleTestWorker}\r\n            disabled={isLoading}\r\n            style={{\r\n              padding: \"8px 16px\",\r\n              backgroundColor: isLoading ? \"#ccc\" : \"#007bff\",\r\n              color: \"white\",\r\n              border: \"none\",\r\n              borderRadius: \"4px\",\r\n              cursor: isLoading ? \"not-allowed\" : \"pointer\",\r\n            }}\r\n          >\r\n            {isLoading ? \"测试中...\" : \"测试 Worker 功能\"}\r\n          </button>\r\n        </div>\r\n\r\n        {testResults && (\r\n          <div style={{ padding: \"15px\", backgroundColor: \"white\", borderRadius: \"4px\", marginTop: \"15px\" }}>\r\n            <h4>测试结果</h4>\r\n            <p>状态: {testResults.isWorking ? \"✅ 正常工作\" : \"❌ 无法工作\"}</p>\r\n            <p>时间: {testResults.timestamp}</p>\r\n            {testResults.error && <p style={{ color: \"red\" }}>错误: {testResults.error}</p>}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* 性能对比测试 */}\r\n      <div style={{ marginBottom: \"30px\" }}>\r\n        <h2>性能对比测试</h2>\r\n        <p>对比启用和禁用 Worker 的加载性能：</p>\r\n\r\n        <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: \"20px\" }}>\r\n          <div>\r\n            <h4>启用 LQIP Worker</h4>\r\n            <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(auto-fit, minmax(150px, 1fr))\", gap: \"10px\" }}>\r\n              {images.slice(0, Math.min(6, imageCount)).map((image, index) => (\r\n                <LazyImage\r\n                  key={`worker-${image.id}`}\r\n                  src={image.src}\r\n                  alt={image.alt}\r\n                  style={{ width: \"100%\", height: \"120px\", objectFit: \"cover\" }}\r\n                  enableLQIP={true}\r\n                  lqipWidth={16}\r\n                  lqipQuality={0.5}\r\n                  enableLQIPWorker={enableWorker}\r\n                  showLoadingIndicator={true}\r\n                  priority={index < 3 ? \"high\" : \"medium\"}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <h4>禁用 LQIP Worker（主线程）</h4>\r\n            <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(auto-fit, minmax(150px, 1fr))\", gap: \"10px\" }}>\r\n              {images.slice(0, Math.min(6, imageCount)).map((image, index) => (\r\n                <LazyImage\r\n                  key={`main-${image.id}`}\r\n                  src={image.src}\r\n                  alt={image.alt}\r\n                  style={{ width: \"100%\", height: \"120px\", objectFit: \"cover\" }}\r\n                  enableLQIP={true}\r\n                  lqipWidth={16}\r\n                  lqipQuality={0.5}\r\n                  enableLQIPWorker={false}\r\n                  showLoadingIndicator={true}\r\n                  priority={index < 3 ? \"high\" : \"medium\"}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* 单张大图测试 */}\r\n      <div style={{ marginBottom: \"30px\" }}>\r\n        <h2>单张大图 LQIP 测试</h2>\r\n        <p>测试大图片的 LQIP 生成效果：</p>\r\n\r\n        <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: \"20px\" }}>\r\n          <div>\r\n            <h4>启用 Worker</h4>\r\n            <LazyImage\r\n              src={testImageUrl}\r\n              alt=\"测试图片 - Worker\"\r\n              style={{ width: \"100%\", height: \"300px\", objectFit: \"cover\" }}\r\n              enableLQIP={true}\r\n              lqipWidth={32}\r\n              lqipQuality={0.6}\r\n              enableLQIPWorker={enableWorker}\r\n              showLoadingIndicator={true}\r\n              priority=\"high\"\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <h4>禁用 Worker</h4>\r\n            <LazyImage\r\n              src={testImageUrl}\r\n              alt=\"测试图片 - 主线程\"\r\n              style={{ width: \"100%\", height: \"300px\", objectFit: \"cover\" }}\r\n              enableLQIP={true}\r\n              lqipWidth={32}\r\n              lqipQuality={0.6}\r\n              enableLQIPWorker={false}\r\n              showLoadingIndicator={true}\r\n              priority=\"high\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* 优化建议 */}\r\n      <div style={{ marginBottom: \"30px\" }}>\r\n        <h2>性能优化建议</h2>\r\n        <div style={{ backgroundColor: \"#f8f9fa\", padding: \"20px\", borderRadius: \"8px\" }}>\r\n          <h4>解决初始化延迟的方法：</h4>\r\n          <ul>\r\n            <li>✅ <strong>减少初始图片数量</strong> - 从 200 张减少到 20 张</li>\r\n            <li>✅ <strong>启用优先级加载</strong> - 优先加载可见区域的图片</li>\r\n            <li>✅ <strong>优化 LQIP 参数</strong> - 降低质量和尺寸减少处理时间</li>\r\n            <li>✅ <strong>简化监控配置</strong> - 减少不必要的性能分析</li>\r\n            <li>✅ <strong>使用本地图片</strong> - 避免网络请求延迟</li>\r\n            <li>✅ <strong>预加载 Worker</strong> - 提前初始化 Worker 池</li>\r\n          </ul>\r\n\r\n          <h4>最佳实践：</h4>\r\n          <ul>\r\n            <li>🎯 首屏图片使用 <code>priority=\"high\"</code></li>\r\n            <li>🎯 LQIP 尺寸控制在 16-32px</li>\r\n            <li>🎯 质量设置为 0.5-0.7</li>\r\n            <li>🎯 批量加载时使用虚拟滚动</li>\r\n            <li>🎯 监控内存使用情况</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      {/* 详细状态报告 */}\r\n      {workerStatus && (\r\n        <div style={{ marginBottom: \"30px\" }}>\r\n          <h2>详细状态报告</h2>\r\n          <pre style={{\r\n            backgroundColor: \"#f8f9fa\",\r\n            padding: \"15px\",\r\n            borderRadius: \"4px\",\r\n            overflow: \"auto\",\r\n            fontSize: \"12px\"\r\n          }}>\r\n            {JSON.stringify(workerStatus.statusReport, null, 2)}\r\n          </pre>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OptimizedWorkerTestDemo;\r\n"
        }
    ]
}