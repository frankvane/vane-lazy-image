{
    "sourceFile": "src/pages/DiagnosticDemo.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1759223181070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759223850459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     { name: \"大量图片 (100张)\", count: 100, enableWorker: true },\r\n     { name: \"大量图片无Worker (100张)\", count: 100, enableWorker: false },\r\n   ];\r\n \r\n-  const runDiagnostic = async (config: typeof testConfigs[0]) => {\r\n+  const runDiagnostic = async (config: (typeof testConfigs)[0]) => {\r\n     setIsRunning(true);\r\n     setTestPhase(`正在测试: ${config.name}`);\r\n     monitor.reset();\r\n \r\n@@ -87,9 +87,9 @@\n         images.forEach(() => handleImageLoad());\r\n       }, 1000);\r\n \r\n       // 等待当前测试完成\r\n-      await new Promise(resolve => setTimeout(resolve, 3000));\r\n+      await new Promise((resolve) => setTimeout(resolve, 3000));\r\n     }\r\n   };\r\n \r\n   // 移除未使用的函数\r\n@@ -99,30 +99,72 @@\n       <h1>LazyImage 性能诊断工具</h1>\r\n \r\n       <div style={{ marginBottom: \"30px\" }}>\r\n         <h2>问题分析</h2>\r\n-        <div style={{ backgroundColor: \"#fff3cd\", padding: \"15px\", borderRadius: \"8px\", marginBottom: \"20px\" }}>\r\n+        <div\r\n+          style={{\r\n+            backgroundColor: \"#fff3cd\",\r\n+            padding: \"15px\",\r\n+            borderRadius: \"8px\",\r\n+            marginBottom: \"20px\",\r\n+          }}\r\n+        >\r\n           <h4>🔍 WorkerTestDemo 长时间等待的可能原因：</h4>\r\n           <ul>\r\n-            <li><strong>Worker 初始化延迟</strong> - Web Worker 需要时间启动和加载脚本</li>\r\n-            <li><strong>LQIP 生成耗时</strong> - 每张图片都需要先下载原图再生成缩略图</li>\r\n-            <li><strong>大量并发请求</strong> - 200张图片同时请求可能触发浏览器限制</li>\r\n-            <li><strong>复杂监控系统</strong> - 启用了太多性能分析功能</li>\r\n-            <li><strong>内存管理开销</strong> - 内存监控和清理机制增加延迟</li>\r\n-            <li><strong>网络延迟</strong> - picsum.photos 可能有请求频率限制</li>\r\n+            <li>\r\n+              <strong>Worker 初始化延迟</strong> - Web Worker\r\n+              需要时间启动和加载脚本\r\n+            </li>\r\n+            <li>\r\n+              <strong>LQIP 生成耗时</strong> -\r\n+              每张图片都需要先下载原图再生成缩略图\r\n+            </li>\r\n+            <li>\r\n+              <strong>大量并发请求</strong> -\r\n+              200张图片同时请求可能触发浏览器限制\r\n+            </li>\r\n+            <li>\r\n+              <strong>复杂监控系统</strong> - 启用了太多性能分析功能\r\n+            </li>\r\n+            <li>\r\n+              <strong>内存管理开销</strong> - 内存监控和清理机制增加延迟\r\n+            </li>\r\n+            <li>\r\n+              <strong>网络延迟</strong> - picsum.photos 可能有请求频率限制\r\n+            </li>\r\n           </ul>\r\n         </div>\r\n \r\n-        <div style={{ backgroundColor: \"#d1ecf1\", padding: \"15px\", borderRadius: \"8px\" }}>\r\n+        <div\r\n+          style={{\r\n+            backgroundColor: \"#d1ecf1\",\r\n+            padding: \"15px\",\r\n+            borderRadius: \"8px\",\r\n+          }}\r\n+        >\r\n           <h4>💡 优化建议：</h4>\r\n           <ul>\r\n-            <li>✅ <strong>减少初始图片数量</strong> - 从 200 张减少到 20-50 张</li>\r\n-            <li>✅ <strong>启用优先级加载</strong> - 优先加载可见区域的图片</li>\r\n-            <li>✅ <strong>优化 LQIP 参数</strong> - 降低质量和尺寸 (16px, 0.5)</li>\r\n-            <li>✅ <strong>简化监控配置</strong> - 关闭不必要的性能分析</li>\r\n-            <li>✅ <strong>使用本地图片</strong> - 避免网络请求延迟</li>\r\n-            <li>✅ <strong>预加载 Worker</strong> - 提前初始化 Worker 池</li>\r\n-            <li>✅ <strong>分批加载</strong> - 使用虚拟滚动或分页</li>\r\n+            <li>\r\n+              ✅ <strong>减少初始图片数量</strong> - 从 200 张减少到 20-50 张\r\n+            </li>\r\n+            <li>\r\n+              ✅ <strong>启用优先级加载</strong> - 优先加载可见区域的图片\r\n+            </li>\r\n+            <li>\r\n+              ✅ <strong>优化 LQIP 参数</strong> - 降低质量和尺寸 (16px, 0.5)\r\n+            </li>\r\n+            <li>\r\n+              ✅ <strong>简化监控配置</strong> - 关闭不必要的性能分析\r\n+            </li>\r\n+            <li>\r\n+              ✅ <strong>使用本地图片</strong> - 避免网络请求延迟\r\n+            </li>\r\n+            <li>\r\n+              ✅ <strong>预加载 Worker</strong> - 提前初始化 Worker 池\r\n+            </li>\r\n+            <li>\r\n+              ✅ <strong>分批加载</strong> - 使用虚拟滚动或分页\r\n+            </li>\r\n           </ul>\r\n         </div>\r\n       </div>\r\n \r\n@@ -146,57 +188,109 @@\n \r\n         {diagnosticResults && (\r\n           <div>\r\n             <h3>诊断结果</h3>\r\n-            {Object.entries(diagnosticResults).map(([testName, result]: [string, any]) => (\r\n-              <div key={testName} style={{ marginBottom: \"20px\", padding: \"15px\", backgroundColor: \"#f8f9fa\", borderRadius: \"8px\" }}>\r\n-                <h4>{testName}</h4>\r\n-                <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: \"20px\" }}>\r\n-                  <div>\r\n-                    <h5>性能指标</h5>\r\n-                    <ul style={{ fontSize: \"14px\" }}>\r\n-                      <li>组件挂载: {result.metrics.componentMountTime?.toFixed(2)}ms</li>\r\n-                      <li>首图加载: {result.metrics.firstImageLoadTime?.toFixed(2)}ms</li>\r\n-                      <li>Worker 初始化: {result.metrics.workerInitTime?.toFixed(2)}ms</li>\r\n-                      <li>平均加载: {result.metrics.averageLoadTime?.toFixed(2)}ms</li>\r\n-                      <li>网络请求: {result.metrics.networkRequests}</li>\r\n-                      <li>内存使用: {result.metrics.memoryUsage ? (result.metrics.memoryUsage / 1024 / 1024).toFixed(2) + \"MB\" : \"N/A\"}</li>\r\n-                    </ul>\r\n-                  </div>\r\n-                  <div>\r\n-                    <h5>问题和建议</h5>\r\n-                    {result.issues.length > 0 ? (\r\n-                      <ul style={{ fontSize: \"14px\", color: \"#dc3545\" }}>\r\n-                        {result.issues.map((issue: string, index: number) => (\r\n-                          <li key={index}>{issue}</li>\r\n-                        ))}\r\n+            {Object.entries(diagnosticResults).map(\r\n+              ([testName, result]: [string, any]) => (\r\n+                <div\r\n+                  key={testName}\r\n+                  style={{\r\n+                    marginBottom: \"20px\",\r\n+                    padding: \"15px\",\r\n+                    backgroundColor: \"#f8f9fa\",\r\n+                    borderRadius: \"8px\",\r\n+                  }}\r\n+                >\r\n+                  <h4>{testName}</h4>\r\n+                  <div\r\n+                    style={{\r\n+                      display: \"grid\",\r\n+                      gridTemplateColumns: \"1fr 1fr\",\r\n+                      gap: \"20px\",\r\n+                    }}\r\n+                  >\r\n+                    <div>\r\n+                      <h5>性能指标</h5>\r\n+                      <ul style={{ fontSize: \"14px\" }}>\r\n+                        <li>\r\n+                          组件挂载:{\" \"}\r\n+                          {result.metrics.componentMountTime?.toFixed(2)}ms\r\n+                        </li>\r\n+                        <li>\r\n+                          首图加载:{\" \"}\r\n+                          {result.metrics.firstImageLoadTime?.toFixed(2)}ms\r\n+                        </li>\r\n+                        <li>\r\n+                          Worker 初始化:{\" \"}\r\n+                          {result.metrics.workerInitTime?.toFixed(2)}ms\r\n+                        </li>\r\n+                        <li>\r\n+                          平均加载: {result.metrics.averageLoadTime?.toFixed(2)}\r\n+                          ms\r\n+                        </li>\r\n+                        <li>网络请求: {result.metrics.networkRequests}</li>\r\n+                        <li>\r\n+                          内存使用:{\" \"}\r\n+                          {result.metrics.memoryUsage\r\n+                            ? (\r\n+                                result.metrics.memoryUsage /\r\n+                                1024 /\r\n+                                1024\r\n+                              ).toFixed(2) + \"MB\"\r\n+                            : \"N/A\"}\r\n+                        </li>\r\n                       </ul>\r\n-                    ) : (\r\n-                      <p style={{ color: \"#28a745\" }}>✅ 无性能问题</p>\r\n-                    )}\r\n-                    {result.recommendations.length > 0 && (\r\n-                      <ul style={{ fontSize: \"14px\", color: \"#007bff\" }}>\r\n-                        {result.recommendations.map((rec: string, index: number) => (\r\n-                          <li key={index}>{rec}</li>\r\n-                        ))}\r\n-                      </ul>\r\n-                    )}\r\n+                    </div>\r\n+                    <div>\r\n+                      <h5>问题和建议</h5>\r\n+                      {result.issues.length > 0 ? (\r\n+                        <ul style={{ fontSize: \"14px\", color: \"#dc3545\" }}>\r\n+                          {result.issues.map((issue: string, index: number) => (\r\n+                            <li key={index}>{issue}</li>\r\n+                          ))}\r\n+                        </ul>\r\n+                      ) : (\r\n+                        <p style={{ color: \"#28a745\" }}>✅ 无性能问题</p>\r\n+                      )}\r\n+                      {result.recommendations.length > 0 && (\r\n+                        <ul style={{ fontSize: \"14px\", color: \"#007bff\" }}>\r\n+                          {result.recommendations.map(\r\n+                            (rec: string, index: number) => (\r\n+                              <li key={index}>{rec}</li>\r\n+                            )\r\n+                          )}\r\n+                        </ul>\r\n+                      )}\r\n+                    </div>\r\n                   </div>\r\n                 </div>\r\n-              </div>\r\n-            ))}\r\n+              )\r\n+            )}\r\n           </div>\r\n         )}\r\n       </div>\r\n \r\n       <div style={{ marginBottom: \"30px\" }}>\r\n         <h2>优化对比测试</h2>\r\n         <p>对比原始配置和优化配置的性能差异：</p>\r\n \r\n-        <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: \"20px\" }}>\r\n+        <div\r\n+          style={{\r\n+            display: \"grid\",\r\n+            gridTemplateColumns: \"1fr 1fr\",\r\n+            gap: \"20px\",\r\n+          }}\r\n+        >\r\n           <div>\r\n             <h4>❌ 原始配置 (问题)</h4>\r\n-            <div style={{ backgroundColor: \"#f8d7da\", padding: \"15px\", borderRadius: \"8px\", fontSize: \"14px\" }}>\r\n+            <div\r\n+              style={{\r\n+                backgroundColor: \"#f8d7da\",\r\n+                padding: \"15px\",\r\n+                borderRadius: \"8px\",\r\n+                fontSize: \"14px\",\r\n+              }}\r\n+            >\r\n               <ul>\r\n                 <li>200张图片同时加载</li>\r\n                 <li>复杂的监控和分析</li>\r\n                 <li>大尺寸 LQIP (24px)</li>\r\n@@ -208,9 +302,16 @@\n           </div>\r\n \r\n           <div>\r\n             <h4>✅ 优化配置 (推荐)</h4>\r\n-            <div style={{ backgroundColor: \"#d4edda\", padding: \"15px\", borderRadius: \"8px\", fontSize: \"14px\" }}>\r\n+            <div\r\n+              style={{\r\n+                backgroundColor: \"#d4edda\",\r\n+                padding: \"15px\",\r\n+                borderRadius: \"8px\",\r\n+                fontSize: \"14px\",\r\n+              }}\r\n+            >\r\n               <ul>\r\n                 <li>20-50张图片分批加载</li>\r\n                 <li>简化监控配置</li>\r\n                 <li>小尺寸 LQIP (16px)</li>\r\n@@ -226,11 +327,26 @@\n       <div style={{ marginBottom: \"30px\" }}>\r\n         <h2>实际测试</h2>\r\n         <p>测试优化后的配置：</p>\r\n \r\n-        <div ref={containerRef} style={{ display: \"grid\", gridTemplateColumns: \"repeat(auto-fit, minmax(200px, 1fr))\", gap: \"15px\" }}>\r\n+        <div\r\n+          ref={containerRef}\r\n+          style={{\r\n+            display: \"grid\",\r\n+            gridTemplateColumns: \"repeat(auto-fit, minmax(200px, 1fr))\",\r\n+            gap: \"15px\",\r\n+          }}\r\n+        >\r\n           {Array.from({ length: 20 }, (_, i) => (\r\n-            <div key={i} style={{ backgroundColor: \"white\", borderRadius: \"8px\", overflow: \"hidden\", boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\" }}>\r\n+            <div\r\n+              key={i}\r\n+              style={{\r\n+                backgroundColor: \"white\",\r\n+                borderRadius: \"8px\",\r\n+                overflow: \"hidden\",\r\n+                boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\",\r\n+              }}\r\n+            >\r\n               <LazyImage\r\n                 src={`https://picsum.photos/400/300?random=${i + 4000}`}\r\n                 alt={`Optimized test image ${i + 1}`}\r\n                 style={{ width: \"100%\", height: \"150px\", objectFit: \"cover\" }}\r\n@@ -250,12 +366,18 @@\n       </div>\r\n \r\n       <div style={{ marginBottom: \"30px\" }}>\r\n         <h2>代码示例</h2>\r\n-        <div style={{ backgroundColor: \"#f8f9fa\", padding: \"20px\", borderRadius: \"8px\" }}>\r\n+        <div\r\n+          style={{\r\n+            backgroundColor: \"#f8f9fa\",\r\n+            padding: \"20px\",\r\n+            borderRadius: \"8px\",\r\n+          }}\r\n+        >\r\n           <h4>优化后的配置示例：</h4>\r\n           <pre style={{ fontSize: \"14px\", overflow: \"auto\" }}>\r\n-{`// 优化后的 LazyImage 配置\r\n+            {`// 优化后的 LazyImage 配置\r\n <LazyImage\r\n   src={imageSrc}\r\n   alt=\"描述\"\r\n   enableLQIP={true}\r\n"
                }
            ],
            "date": 1759223181070,
            "name": "Commit-0",
            "content": "/**\r\n * 诊断演示页面\r\n * 用于分析 WorkerTestDemo 的性能问题\r\n */\r\n\r\nimport React, { useRef, useState } from \"react\";\r\n\r\nimport { LazyImage } from \"../components/LazyImage\";\r\nimport { usePerformanceMonitor } from \"../components/LazyImage/utils/performanceAnalyzer\";\r\n\r\nconst DiagnosticDemo: React.FC = () => {\r\n  const [diagnosticResults, setDiagnosticResults] = useState<any>(null);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [testPhase, setTestPhase] = useState<string>(\"\");\r\n  const monitor = usePerformanceMonitor();\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n  // 测试配置\r\n  const testConfigs = [\r\n    { name: \"少量图片 (5张)\", count: 5, enableWorker: true },\r\n    { name: \"中等图片 (20张)\", count: 20, enableWorker: true },\r\n    { name: \"大量图片 (100张)\", count: 100, enableWorker: true },\r\n    { name: \"大量图片无Worker (100张)\", count: 100, enableWorker: false },\r\n  ];\r\n\r\n  const runDiagnostic = async (config: typeof testConfigs[0]) => {\r\n    setIsRunning(true);\r\n    setTestPhase(`正在测试: ${config.name}`);\r\n    monitor.reset();\r\n\r\n    // 开始组件挂载计时\r\n    monitor.startComponentMount();\r\n\r\n    // 生成测试图片\r\n    const images = Array.from({ length: config.count }, (_, i) => ({\r\n      id: i,\r\n      src: `https://picsum.photos/400/300?random=${i + 3000}`,\r\n      alt: `Diagnostic image ${i + 1}`,\r\n    }));\r\n\r\n    // 模拟组件挂载完成\r\n    setTimeout(() => {\r\n      monitor.endComponentMount();\r\n      monitor.startFirstImageLoad();\r\n    }, 100);\r\n\r\n    // 记录图片加载\r\n    let loadedCount = 0;\r\n    const handleImageLoad = () => {\r\n      loadedCount++;\r\n      if (loadedCount === 1) {\r\n        monitor.endFirstImageLoad();\r\n      }\r\n\r\n      const loadTime = Math.random() * 1000 + 500; // 模拟加载时间\r\n      monitor.recordImageLoad(loadTime);\r\n      monitor.recordNetworkRequest();\r\n\r\n      if (loadedCount === config.count) {\r\n        // 所有图片加载完成\r\n        setTimeout(() => {\r\n          const report = monitor.generateReport();\r\n          setDiagnosticResults((prev: any) => ({\r\n            ...prev,\r\n            [config.name]: report,\r\n          }));\r\n          setIsRunning(false);\r\n          setTestPhase(\"\");\r\n        }, 500);\r\n      }\r\n    };\r\n\r\n    return { images, handleImageLoad };\r\n  };\r\n\r\n  const runAllDiagnostics = async () => {\r\n    setDiagnosticResults({});\r\n\r\n    for (const config of testConfigs) {\r\n      const { images, handleImageLoad } = await runDiagnostic(config);\r\n\r\n      // 渲染测试图片\r\n      setTestPhase(`渲染中: ${config.name}`);\r\n\r\n      // 这里可以渲染图片组件，但为了简化，我们直接模拟\r\n      setTimeout(() => {\r\n        images.forEach(() => handleImageLoad());\r\n      }, 1000);\r\n\r\n      // 等待当前测试完成\r\n      await new Promise(resolve => setTimeout(resolve, 3000));\r\n    }\r\n  };\r\n\r\n  // 移除未使用的函数\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\", maxWidth: \"1200px\", margin: \"0 auto\" }}>\r\n      <h1>LazyImage 性能诊断工具</h1>\r\n\r\n      <div style={{ marginBottom: \"30px\" }}>\r\n        <h2>问题分析</h2>\r\n        <div style={{ backgroundColor: \"#fff3cd\", padding: \"15px\", borderRadius: \"8px\", marginBottom: \"20px\" }}>\r\n          <h4>🔍 WorkerTestDemo 长时间等待的可能原因：</h4>\r\n          <ul>\r\n            <li><strong>Worker 初始化延迟</strong> - Web Worker 需要时间启动和加载脚本</li>\r\n            <li><strong>LQIP 生成耗时</strong> - 每张图片都需要先下载原图再生成缩略图</li>\r\n            <li><strong>大量并发请求</strong> - 200张图片同时请求可能触发浏览器限制</li>\r\n            <li><strong>复杂监控系统</strong> - 启用了太多性能分析功能</li>\r\n            <li><strong>内存管理开销</strong> - 内存监控和清理机制增加延迟</li>\r\n            <li><strong>网络延迟</strong> - picsum.photos 可能有请求频率限制</li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div style={{ backgroundColor: \"#d1ecf1\", padding: \"15px\", borderRadius: \"8px\" }}>\r\n          <h4>💡 优化建议：</h4>\r\n          <ul>\r\n            <li>✅ <strong>减少初始图片数量</strong> - 从 200 张减少到 20-50 张</li>\r\n            <li>✅ <strong>启用优先级加载</strong> - 优先加载可见区域的图片</li>\r\n            <li>✅ <strong>优化 LQIP 参数</strong> - 降低质量和尺寸 (16px, 0.5)</li>\r\n            <li>✅ <strong>简化监控配置</strong> - 关闭不必要的性能分析</li>\r\n            <li>✅ <strong>使用本地图片</strong> - 避免网络请求延迟</li>\r\n            <li>✅ <strong>预加载 Worker</strong> - 提前初始化 Worker 池</li>\r\n            <li>✅ <strong>分批加载</strong> - 使用虚拟滚动或分页</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ marginBottom: \"30px\" }}>\r\n        <h2>性能测试</h2>\r\n        <button\r\n          onClick={runAllDiagnostics}\r\n          disabled={isRunning}\r\n          style={{\r\n            padding: \"10px 20px\",\r\n            backgroundColor: isRunning ? \"#ccc\" : \"#007bff\",\r\n            color: \"white\",\r\n            border: \"none\",\r\n            borderRadius: \"4px\",\r\n            cursor: isRunning ? \"not-allowed\" : \"pointer\",\r\n            marginBottom: \"20px\",\r\n          }}\r\n        >\r\n          {isRunning ? `运行中: ${testPhase}` : \"开始性能诊断\"}\r\n        </button>\r\n\r\n        {diagnosticResults && (\r\n          <div>\r\n            <h3>诊断结果</h3>\r\n            {Object.entries(diagnosticResults).map(([testName, result]: [string, any]) => (\r\n              <div key={testName} style={{ marginBottom: \"20px\", padding: \"15px\", backgroundColor: \"#f8f9fa\", borderRadius: \"8px\" }}>\r\n                <h4>{testName}</h4>\r\n                <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: \"20px\" }}>\r\n                  <div>\r\n                    <h5>性能指标</h5>\r\n                    <ul style={{ fontSize: \"14px\" }}>\r\n                      <li>组件挂载: {result.metrics.componentMountTime?.toFixed(2)}ms</li>\r\n                      <li>首图加载: {result.metrics.firstImageLoadTime?.toFixed(2)}ms</li>\r\n                      <li>Worker 初始化: {result.metrics.workerInitTime?.toFixed(2)}ms</li>\r\n                      <li>平均加载: {result.metrics.averageLoadTime?.toFixed(2)}ms</li>\r\n                      <li>网络请求: {result.metrics.networkRequests}</li>\r\n                      <li>内存使用: {result.metrics.memoryUsage ? (result.metrics.memoryUsage / 1024 / 1024).toFixed(2) + \"MB\" : \"N/A\"}</li>\r\n                    </ul>\r\n                  </div>\r\n                  <div>\r\n                    <h5>问题和建议</h5>\r\n                    {result.issues.length > 0 ? (\r\n                      <ul style={{ fontSize: \"14px\", color: \"#dc3545\" }}>\r\n                        {result.issues.map((issue: string, index: number) => (\r\n                          <li key={index}>{issue}</li>\r\n                        ))}\r\n                      </ul>\r\n                    ) : (\r\n                      <p style={{ color: \"#28a745\" }}>✅ 无性能问题</p>\r\n                    )}\r\n                    {result.recommendations.length > 0 && (\r\n                      <ul style={{ fontSize: \"14px\", color: \"#007bff\" }}>\r\n                        {result.recommendations.map((rec: string, index: number) => (\r\n                          <li key={index}>{rec}</li>\r\n                        ))}\r\n                      </ul>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div style={{ marginBottom: \"30px\" }}>\r\n        <h2>优化对比测试</h2>\r\n        <p>对比原始配置和优化配置的性能差异：</p>\r\n\r\n        <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: \"20px\" }}>\r\n          <div>\r\n            <h4>❌ 原始配置 (问题)</h4>\r\n            <div style={{ backgroundColor: \"#f8d7da\", padding: \"15px\", borderRadius: \"8px\", fontSize: \"14px\" }}>\r\n              <ul>\r\n                <li>200张图片同时加载</li>\r\n                <li>复杂的监控和分析</li>\r\n                <li>大尺寸 LQIP (24px)</li>\r\n                <li>高内存限制 (120MB)</li>\r\n                <li>长卸载延迟 (4000ms)</li>\r\n                <li>所有功能全开</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <h4>✅ 优化配置 (推荐)</h4>\r\n            <div style={{ backgroundColor: \"#d4edda\", padding: \"15px\", borderRadius: \"8px\", fontSize: \"14px\" }}>\r\n              <ul>\r\n                <li>20-50张图片分批加载</li>\r\n                <li>简化监控配置</li>\r\n                <li>小尺寸 LQIP (16px)</li>\r\n                <li>适中内存限制 (50MB)</li>\r\n                <li>短卸载延迟 (2000ms)</li>\r\n                <li>按需启用功能</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ marginBottom: \"30px\" }}>\r\n        <h2>实际测试</h2>\r\n        <p>测试优化后的配置：</p>\r\n\r\n        <div ref={containerRef} style={{ display: \"grid\", gridTemplateColumns: \"repeat(auto-fit, minmax(200px, 1fr))\", gap: \"15px\" }}>\r\n          {Array.from({ length: 20 }, (_, i) => (\r\n            <div key={i} style={{ backgroundColor: \"white\", borderRadius: \"8px\", overflow: \"hidden\", boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\" }}>\r\n              <LazyImage\r\n                src={`https://picsum.photos/400/300?random=${i + 4000}`}\r\n                alt={`Optimized test image ${i + 1}`}\r\n                style={{ width: \"100%\", height: \"150px\", objectFit: \"cover\" }}\r\n                enableLQIP={true}\r\n                lqipWidth={16}\r\n                lqipQuality={0.5}\r\n                enableLQIPWorker={true}\r\n                showLoadingIndicator={true}\r\n                priority={i < 6 ? \"high\" : \"medium\"}\r\n                onLoad={() => {\r\n                  console.log(`Image ${i + 1} loaded`);\r\n                }}\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ marginBottom: \"30px\" }}>\r\n        <h2>代码示例</h2>\r\n        <div style={{ backgroundColor: \"#f8f9fa\", padding: \"20px\", borderRadius: \"8px\" }}>\r\n          <h4>优化后的配置示例：</h4>\r\n          <pre style={{ fontSize: \"14px\", overflow: \"auto\" }}>\r\n{`// 优化后的 LazyImage 配置\r\n<LazyImage\r\n  src={imageSrc}\r\n  alt=\"描述\"\r\n  enableLQIP={true}\r\n  lqipWidth={16}           // 减小尺寸\r\n  lqipQuality={0.5}        // 降低质量\r\n  enableLQIPWorker={true}\r\n  showLoadingIndicator={true}\r\n  priority=\"high\"          // 首屏图片高优先级\r\n  rootMargin=\"100px\"       // 适中的预加载距离\r\n  threshold={0.1}\r\n  enableCache={true}\r\n  retryCount={2}           // 减少重试次数\r\n/>\r\n\r\n// 简化后的 Hook 配置\r\nconst imageCache = useEnhancedImageCache({\r\n  maxBytes: 50 * 1024 * 1024,  // 减少缓存大小\r\n  enableHitRateTracking: false, // 关闭复杂分析\r\n  enableSizeDistributionAnalysis: false,\r\n  enableCleanupHistory: false,\r\n  enableIndexedDBMonitoring: false,\r\n  enablePerformanceMetrics: false,\r\n});\r\n\r\nconst memoryManager = useEnhancedMemoryManager({\r\n  maxMemoryUsage: 50 * 1024 * 1024,  // 减少内存限制\r\n  unloadDistance: 1000,               // 减少卸载距离\r\n  unloadDelay: 2000,                  // 减少卸载延迟\r\n  enableLifecycleTracking: false,     // 关闭复杂追踪\r\n  enableLeakDetection: false,\r\n  enableTrendAnalysis: false,\r\n});`}\r\n          </pre>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DiagnosticDemo;\r\n"
        }
    ]
}