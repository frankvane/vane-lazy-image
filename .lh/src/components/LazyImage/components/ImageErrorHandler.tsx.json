{
    "sourceFile": "src/components/LazyImage/components/ImageErrorHandler.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1759216733882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759220766149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,130 +1,130 @@\n-/**\r\n- * ImageErrorHandler 组件\r\n- * 负责处理图片加载错误、管理备用源尝试和重试逻辑\r\n- */\r\n-\r\n-import React, { useEffect, useRef, useState } from \"react\";\r\n-\r\n-import { DEFAULT_CONFIG } from \"../shared/constants\";\r\n-import { bustUrl } from \"../shared/utils\";\r\n-\r\n-export interface ImageErrorHandlerProps {\r\n-  // 图片源\r\n-  src: string;\r\n-\r\n-  // 错误处理相关\r\n-  fallbackSrc?: string;\r\n-  fallbackSrcs?: string[];\r\n-  retryCount?: number;\r\n-  retryDelayMs?: number;\r\n-  onError?: () => void;\r\n-\r\n-  // 子元素（通常是 img 元素）\r\n-  children: React.ReactNode;\r\n-\r\n-  // 可选的错误状态展示\r\n-  renderError?: (error: Error) => React.ReactNode;\r\n-}\r\n-\r\n-/**\r\n- * 图片错误处理组件\r\n- * 处理图片加载错误，提供备用源和重试机制\r\n- */\r\n-export const ImageErrorHandler: React.FC<ImageErrorHandlerProps> = ({\r\n-  src,\r\n-  fallbackSrc,\r\n-  fallbackSrcs,\r\n-  retryCount = DEFAULT_CONFIG.RETRY_COUNT,\r\n-  retryDelayMs = DEFAULT_CONFIG.RETRY_DELAY_MS,\r\n-  onError,\r\n-  children,\r\n-  renderError,\r\n-}) => {\r\n-  // 错误状态\r\n-  const [error, setError] = useState<Error | null>(null);\r\n-  const [currentSrc, setCurrentSrc] = useState<string>(src);\r\n-\r\n-  // 跟踪重试和备用源\r\n-  const retryCountRef = useRef(0);\r\n-  const fallbackIndexRef = useRef<number>(-1);\r\n-  const triedFallbackRef = useRef(false);\r\n-\r\n-  // 预构建备用源列表\r\n-  const fallbackList = (() => {\r\n-    const arr: string[] = [];\r\n-    if (fallbackSrc) arr.push(fallbackSrc);\r\n-    if (fallbackSrcs && fallbackSrcs.length) arr.push(...fallbackSrcs);\r\n-    return arr;\r\n-  })();\r\n-\r\n-  // 重置状态\r\n-  useEffect(() => {\r\n-    if (src !== currentSrc && src) {\r\n-      setCurrentSrc(src);\r\n-      setError(null);\r\n-      retryCountRef.current = 0;\r\n-      fallbackIndexRef.current = -1;\r\n-      triedFallbackRef.current = false;\r\n-    }\r\n-  }, [src]);\r\n-\r\n-  // 错误处理函数\r\n-  const handleError = () => {\r\n-    // 尝试备用源\r\n-    const nextIdx = fallbackIndexRef.current + 1;\r\n-    if (nextIdx < fallbackList.length) {\r\n-      fallbackIndexRef.current = nextIdx;\r\n-      setCurrentSrc(fallbackList[nextIdx]);\r\n-      return;\r\n-    }\r\n-\r\n-    // 如果单个 fallbackSrc 还未尝试（兼容旧逻辑）\r\n-    if (fallbackSrc && !triedFallbackRef.current && fallbackList.length === 0) {\r\n-      triedFallbackRef.current = true;\r\n-      setCurrentSrc(fallbackSrc);\r\n-      return;\r\n-    }\r\n-\r\n-    // 重试当前地址（加 bust 参数）\r\n-    const attempt = retryCountRef.current;\r\n-    if (attempt < retryCount) {\r\n-      const nextAttempt = attempt + 1;\r\n-      retryCountRef.current = nextAttempt;\r\n-      const nextUrl = bustUrl(currentSrc || src, nextAttempt);\r\n-\r\n-      // 使用延迟重试\r\n-      setTimeout(() => {\r\n-        setCurrentSrc(nextUrl);\r\n-      }, retryDelayMs);\r\n-\r\n-      return;\r\n-    }\r\n-\r\n-    // 所有兜底与重试均失败\r\n-    const newError = new Error(`Failed to load image: ${src}`);\r\n-    setError(newError);\r\n-    onError?.();\r\n-  };\r\n-\r\n-  // 如果有错误且提供了错误渲染函数，则渲染错误状态\r\n-  if (error && renderError) {\r\n-    return <>{renderError(error)}</>;\r\n-  }\r\n-\r\n-  // 克隆子元素并注入错误处理\r\n-  return React.Children.map(children, (child) => {\r\n-    if (React.isValidElement(child) && child.type === \"img\") {\r\n-      const originalOnLoad = (child as React.ReactElement<any>).props.onLoad;\r\n-\r\n-      return React.cloneElement(child as React.ReactElement<any>, {\r\n-        src: currentSrc,\r\n-        onError: handleError,\r\n-        // 保留原始的 onLoad 处理程序\r\n-        onLoad: originalOnLoad,\r\n-      });\r\n-    }\r\n-    return child;\r\n-  });\r\n-};\r\n-\r\n-export default ImageErrorHandler;\r\n+/**\n+ * ImageErrorHandler 组件\n+ * 负责处理图片加载错误、管理备用源尝试和重试逻辑\n+ */\n+\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import { DEFAULT_CONFIG } from \"../shared/constants\";\n+import { bustUrl } from \"../shared/utils\";\n+\n+export interface ImageErrorHandlerProps {\n+  // 图片源\n+  src: string;\n+\n+  // 错误处理相关\n+  fallbackSrc?: string;\n+  fallbackSrcs?: string[];\n+  retryCount?: number;\n+  retryDelayMs?: number;\n+  onError?: () => void;\n+\n+  // 子元素（通常是 img 元素）\n+  children: React.ReactNode;\n+\n+  // 可选的错误状态展示\n+  renderError?: (error: Error) => React.ReactNode;\n+}\n+\n+/**\n+ * 图片错误处理组件\n+ * 处理图片加载错误，提供备用源和重试机制\n+ */\n+export const ImageErrorHandler: React.FC<ImageErrorHandlerProps> = ({\n+  src,\n+  fallbackSrc,\n+  fallbackSrcs,\n+  retryCount = DEFAULT_CONFIG.RETRY_COUNT,\n+  retryDelayMs = DEFAULT_CONFIG.RETRY_DELAY_MS,\n+  onError,\n+  children,\n+  renderError,\n+}) => {\n+  // 错误状态\n+  const [error, setError] = useState<Error | null>(null);\n+  const [currentSrc, setCurrentSrc] = useState<string>(src);\n+\n+  // 跟踪重试和备用源\n+  const retryCountRef = useRef(0);\n+  const fallbackIndexRef = useRef<number>(-1);\n+  const triedFallbackRef = useRef(false);\n+\n+  // 预构建备用源列表\n+  const fallbackList = (() => {\n+    const arr: string[] = [];\n+    if (fallbackSrc) arr.push(fallbackSrc);\n+    if (fallbackSrcs && fallbackSrcs.length) arr.push(...fallbackSrcs);\n+    return arr;\n+  })();\n+\n+  // 重置状态\n+  useEffect(() => {\n+    if (src !== currentSrc && src) {\n+      setCurrentSrc(src);\n+      setError(null);\n+      retryCountRef.current = 0;\n+      fallbackIndexRef.current = -1;\n+      triedFallbackRef.current = false;\n+    }\n+  }, [src]);\n+\n+  // 错误处理函数\n+  const handleError = () => {\n+    // 尝试备用源\n+    const nextIdx = fallbackIndexRef.current + 1;\n+    if (nextIdx < fallbackList.length) {\n+      fallbackIndexRef.current = nextIdx;\n+      setCurrentSrc(fallbackList[nextIdx]);\n+      return;\n+    }\n+\n+    // 如果单个 fallbackSrc 还未尝试（兼容旧逻辑）\n+    if (fallbackSrc && !triedFallbackRef.current && fallbackList.length === 0) {\n+      triedFallbackRef.current = true;\n+      setCurrentSrc(fallbackSrc);\n+      return;\n+    }\n+\n+    // 重试当前地址（加 bust 参数）\n+    const attempt = retryCountRef.current;\n+    if (attempt < retryCount) {\n+      const nextAttempt = attempt + 1;\n+      retryCountRef.current = nextAttempt;\n+      const nextUrl = bustUrl(currentSrc || src, nextAttempt);\n+\n+      // 使用延迟重试\n+      setTimeout(() => {\n+        setCurrentSrc(nextUrl);\n+      }, retryDelayMs);\n+\n+      return;\n+    }\n+\n+    // 所有兜底与重试均失败\n+    const newError = new Error(`Failed to load image: ${src}`);\n+    setError(newError);\n+    onError?.();\n+  };\n+\n+  // 如果有错误且提供了错误渲染函数，则渲染错误状态\n+  if (error && renderError) {\n+    return <>{renderError(error)}</>;\n+  }\n+\n+  // 克隆子元素并注入错误处理\n+  return React.Children.map(children, (child) => {\n+    if (React.isValidElement(child) && child.type === \"img\") {\n+      const originalOnLoad = (child as React.ReactElement<any>).props.onLoad;\n+\n+      return React.cloneElement(child as React.ReactElement<any>, {\n+        src: currentSrc,\n+        onError: handleError,\n+        // 保留原始的 onLoad 处理程序\n+        onLoad: originalOnLoad,\n+      });\n+    }\n+    return child;\n+  });\n+};\n+\n+export default ImageErrorHandler;\n"
                }
            ],
            "date": 1759216733882,
            "name": "Commit-0",
            "content": "/**\r\n * ImageErrorHandler 组件\r\n * 负责处理图片加载错误、管理备用源尝试和重试逻辑\r\n */\r\n\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport { DEFAULT_CONFIG } from \"../shared/constants\";\r\nimport { bustUrl } from \"../shared/utils\";\r\n\r\nexport interface ImageErrorHandlerProps {\r\n  // 图片源\r\n  src: string;\r\n\r\n  // 错误处理相关\r\n  fallbackSrc?: string;\r\n  fallbackSrcs?: string[];\r\n  retryCount?: number;\r\n  retryDelayMs?: number;\r\n  onError?: () => void;\r\n\r\n  // 子元素（通常是 img 元素）\r\n  children: React.ReactNode;\r\n\r\n  // 可选的错误状态展示\r\n  renderError?: (error: Error) => React.ReactNode;\r\n}\r\n\r\n/**\r\n * 图片错误处理组件\r\n * 处理图片加载错误，提供备用源和重试机制\r\n */\r\nexport const ImageErrorHandler: React.FC<ImageErrorHandlerProps> = ({\r\n  src,\r\n  fallbackSrc,\r\n  fallbackSrcs,\r\n  retryCount = DEFAULT_CONFIG.RETRY_COUNT,\r\n  retryDelayMs = DEFAULT_CONFIG.RETRY_DELAY_MS,\r\n  onError,\r\n  children,\r\n  renderError,\r\n}) => {\r\n  // 错误状态\r\n  const [error, setError] = useState<Error | null>(null);\r\n  const [currentSrc, setCurrentSrc] = useState<string>(src);\r\n\r\n  // 跟踪重试和备用源\r\n  const retryCountRef = useRef(0);\r\n  const fallbackIndexRef = useRef<number>(-1);\r\n  const triedFallbackRef = useRef(false);\r\n\r\n  // 预构建备用源列表\r\n  const fallbackList = (() => {\r\n    const arr: string[] = [];\r\n    if (fallbackSrc) arr.push(fallbackSrc);\r\n    if (fallbackSrcs && fallbackSrcs.length) arr.push(...fallbackSrcs);\r\n    return arr;\r\n  })();\r\n\r\n  // 重置状态\r\n  useEffect(() => {\r\n    if (src !== currentSrc && src) {\r\n      setCurrentSrc(src);\r\n      setError(null);\r\n      retryCountRef.current = 0;\r\n      fallbackIndexRef.current = -1;\r\n      triedFallbackRef.current = false;\r\n    }\r\n  }, [src]);\r\n\r\n  // 错误处理函数\r\n  const handleError = () => {\r\n    // 尝试备用源\r\n    const nextIdx = fallbackIndexRef.current + 1;\r\n    if (nextIdx < fallbackList.length) {\r\n      fallbackIndexRef.current = nextIdx;\r\n      setCurrentSrc(fallbackList[nextIdx]);\r\n      return;\r\n    }\r\n\r\n    // 如果单个 fallbackSrc 还未尝试（兼容旧逻辑）\r\n    if (fallbackSrc && !triedFallbackRef.current && fallbackList.length === 0) {\r\n      triedFallbackRef.current = true;\r\n      setCurrentSrc(fallbackSrc);\r\n      return;\r\n    }\r\n\r\n    // 重试当前地址（加 bust 参数）\r\n    const attempt = retryCountRef.current;\r\n    if (attempt < retryCount) {\r\n      const nextAttempt = attempt + 1;\r\n      retryCountRef.current = nextAttempt;\r\n      const nextUrl = bustUrl(currentSrc || src, nextAttempt);\r\n\r\n      // 使用延迟重试\r\n      setTimeout(() => {\r\n        setCurrentSrc(nextUrl);\r\n      }, retryDelayMs);\r\n\r\n      return;\r\n    }\r\n\r\n    // 所有兜底与重试均失败\r\n    const newError = new Error(`Failed to load image: ${src}`);\r\n    setError(newError);\r\n    onError?.();\r\n  };\r\n\r\n  // 如果有错误且提供了错误渲染函数，则渲染错误状态\r\n  if (error && renderError) {\r\n    return <>{renderError(error)}</>;\r\n  }\r\n\r\n  // 克隆子元素并注入错误处理\r\n  return React.Children.map(children, (child) => {\r\n    if (React.isValidElement(child) && child.type === \"img\") {\r\n      const originalOnLoad = (child as React.ReactElement<any>).props.onLoad;\r\n\r\n      return React.cloneElement(child as React.ReactElement<any>, {\r\n        src: currentSrc,\r\n        onError: handleError,\r\n        // 保留原始的 onLoad 处理程序\r\n        onLoad: originalOnLoad,\r\n      });\r\n    }\r\n    return child;\r\n  });\r\n};\r\n\r\nexport default ImageErrorHandler;\r\n"
        }
    ]
}