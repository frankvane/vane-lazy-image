{
    "sourceFile": "src/components/LazyImage/utils/workerDetection.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1759220932918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759221336970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n   hasOffscreenCanvas: boolean;\n   hasCreateImageBitmap: boolean;\n   hasFetch: boolean;\n   hasTransferableObjects: boolean;\n-  estimatedPerformance: 'high' | 'medium' | 'low';\n+  estimatedPerformance: \"high\" | \"medium\" | \"low\";\n }\n \n export interface WorkerRecommendation {\n   shouldUseWorker: boolean;\n@@ -24,14 +24,14 @@\n  * 检测 Worker 相关 API 支持情况\n  */\n export function detectWorkerCapabilities(): WorkerCapabilities {\n   const capabilities: WorkerCapabilities = {\n-    hasWorker: typeof Worker !== 'undefined',\n-    hasOffscreenCanvas: typeof OffscreenCanvas !== 'undefined',\n-    hasCreateImageBitmap: typeof createImageBitmap !== 'undefined',\n-    hasFetch: typeof fetch !== 'undefined',\n+    hasWorker: typeof Worker !== \"undefined\",\n+    hasOffscreenCanvas: typeof OffscreenCanvas !== \"undefined\",\n+    hasCreateImageBitmap: typeof createImageBitmap !== \"undefined\",\n+    hasFetch: typeof fetch !== \"undefined\",\n     hasTransferableObjects: false,\n-    estimatedPerformance: 'low'\n+    estimatedPerformance: \"low\",\n   };\n \n   // 检测 Transferable Objects 支持\n   if (capabilities.hasWorker) {\n@@ -44,14 +44,21 @@\n     }\n   }\n \n   // 估算性能等级\n-  if (capabilities.hasWorker && capabilities.hasOffscreenCanvas && capabilities.hasCreateImageBitmap) {\n-    capabilities.estimatedPerformance = 'high';\n-  } else if (capabilities.hasWorker && (capabilities.hasOffscreenCanvas || capabilities.hasCreateImageBitmap)) {\n-    capabilities.estimatedPerformance = 'medium';\n+  if (\n+    capabilities.hasWorker &&\n+    capabilities.hasOffscreenCanvas &&\n+    capabilities.hasCreateImageBitmap\n+  ) {\n+    capabilities.estimatedPerformance = \"high\";\n+  } else if (\n+    capabilities.hasWorker &&\n+    (capabilities.hasOffscreenCanvas || capabilities.hasCreateImageBitmap)\n+  ) {\n+    capabilities.estimatedPerformance = \"medium\";\n   } else {\n-    capabilities.estimatedPerformance = 'low';\n+    capabilities.estimatedPerformance = \"low\";\n   }\n \n   return capabilities;\n }\n@@ -60,17 +67,17 @@\n  * 获取 Worker 使用建议\n  */\n export function getWorkerRecommendation(): WorkerRecommendation {\n   const capabilities = detectWorkerCapabilities();\n-  \n+\n   // 基础检查：是否支持 Worker\n   if (!capabilities.hasWorker) {\n     return {\n       shouldUseWorker: false,\n       maxWorkers: 0,\n       enableFallback: true,\n-      reason: 'Web Workers 不支持，将使用主线程降级方案',\n-      capabilities\n+      reason: \"Web Workers 不支持，将使用主线程降级方案\",\n+      capabilities,\n     };\n   }\n \n   // 检查关键 API 支持\n@@ -78,55 +85,55 @@\n     return {\n       shouldUseWorker: false,\n       maxWorkers: 0,\n       enableFallback: true,\n-      reason: 'Worker 中缺少 Fetch API 支持，将使用主线程降级方案',\n-      capabilities\n+      reason: \"Worker 中缺少 Fetch API 支持，将使用主线程降级方案\",\n+      capabilities,\n     };\n   }\n \n   // 根据性能等级给出建议\n   switch (capabilities.estimatedPerformance) {\n-    case 'high':\n+    case \"high\":\n       return {\n         shouldUseWorker: true,\n         maxWorkers: Math.min(navigator.hardwareConcurrency || 4, 4),\n         enableFallback: true,\n-        reason: '完整的 Worker API 支持，推荐使用 Worker 处理 LQIP',\n-        capabilities\n+        reason: \"完整的 Worker API 支持，推荐使用 Worker 处理 LQIP\",\n+        capabilities,\n       };\n \n-    case 'medium':\n+    case \"medium\":\n       return {\n         shouldUseWorker: true,\n         maxWorkers: Math.min(navigator.hardwareConcurrency || 2, 2),\n         enableFallback: true,\n-        reason: '部分 Worker API 支持，建议使用较少的 Worker 实例',\n-        capabilities\n+        reason: \"部分 Worker API 支持，建议使用较少的 Worker 实例\",\n+        capabilities,\n       };\n \n-    case 'low':\n+    case \"low\":\n     default:\n       return {\n         shouldUseWorker: false,\n         maxWorkers: 0,\n         enableFallback: true,\n-        reason: 'Worker API 支持有限，建议使用主线程处理',\n-        capabilities\n+        reason: \"Worker API 支持有限，建议使用主线程处理\",\n+        capabilities,\n       };\n   }\n }\n \n /**\n  * 检测设备性能等级\n  */\n-export function detectDevicePerformance(): 'high' | 'medium' | 'low' {\n+export function detectDevicePerformance(): \"high\" | \"medium\" | \"low\" {\n   // 基于硬件并发数判断\n   const cores = navigator.hardwareConcurrency || 1;\n-  \n+\n   // 基于内存判断（如果可用）\n   const memory = (navigator as any).deviceMemory;\n-  \n+\n   // 基于连接类型判断（如果可用）\n   const connection = (navigator as any).connection;\n   const effectiveType = connection?.effectiveType;\n \n@@ -148,42 +155,42 @@\n   }\n \n   // 网络评分\n   if (effectiveType) {\n-    if (effectiveType === '4g') score += 2;\n-    else if (effectiveType === '3g') score += 1;\n+    if (effectiveType === \"4g\") score += 2;\n+    else if (effectiveType === \"3g\") score += 1;\n   } else {\n     // 没有网络信息，给予中等评分\n     score += 1;\n   }\n \n   // 根据总分判断性能等级\n-  if (score >= 7) return 'high';\n-  if (score >= 4) return 'medium';\n-  return 'low';\n+  if (score >= 7) return \"high\";\n+  if (score >= 4) return \"medium\";\n+  return \"low\";\n }\n \n /**\n  * 获取推荐的 Worker 配置\n  */\n export function getRecommendedWorkerConfig() {\n   const recommendation = getWorkerRecommendation();\n   const devicePerformance = detectDevicePerformance();\n-  \n+\n   // 根据设备性能调整配置\n   let adjustedMaxWorkers = recommendation.maxWorkers;\n   let taskTimeout = 30000; // 默认 30 秒\n \n   switch (devicePerformance) {\n-    case 'low':\n+    case \"low\":\n       adjustedMaxWorkers = Math.min(adjustedMaxWorkers, 1);\n       taskTimeout = 45000; // 低性能设备增加超时时间\n       break;\n-    case 'medium':\n+    case \"medium\":\n       adjustedMaxWorkers = Math.min(adjustedMaxWorkers, 2);\n       taskTimeout = 30000;\n       break;\n-    case 'high':\n+    case \"high\":\n       // 保持推荐配置\n       taskTimeout = 20000; // 高性能设备减少超时时间\n       break;\n   }\n@@ -191,38 +198,38 @@\n   return {\n     enableLQIPWorker: recommendation.shouldUseWorker,\n     workerOptions: {\n       maxWorkers: adjustedMaxWorkers,\n-      workerScript: '/src/workers/lqip-worker.js',\n+      workerScript: new URL(\"../workers/lqip-worker.js\", import.meta.url).href,\n       enableFallback: recommendation.enableFallback,\n-      taskTimeout\n+      taskTimeout,\n     },\n     recommendation,\n-    devicePerformance\n+    devicePerformance,\n   };\n }\n \n /**\n  * 运行时检测 Worker 是否正常工作\n  */\n export async function testWorkerFunctionality(): Promise<boolean> {\n   const capabilities = detectWorkerCapabilities();\n-  \n+\n   if (!capabilities.hasWorker) {\n     return false;\n   }\n \n   return new Promise((resolve) => {\n     try {\n-      const worker = new Worker('/workers/lqip-worker.js');\n-      \n+      const worker = new Worker(new URL(\"../workers/lqip-worker.js\", import.meta.url).href);\n+\n       const timeout = setTimeout(() => {\n         worker.terminate();\n         resolve(false);\n       }, 5000);\n \n       worker.onmessage = (event) => {\n-        if (event.data.type === 'WORKER_READY') {\n+        if (event.data.type === \"WORKER_READY\") {\n           clearTimeout(timeout);\n           worker.terminate();\n           resolve(true);\n         }\n@@ -232,9 +239,8 @@\n         clearTimeout(timeout);\n         worker.terminate();\n         resolve(false);\n       };\n-\n     } catch (error) {\n       resolve(false);\n     }\n   });\n@@ -260,10 +266,10 @@\n       vendor: navigator.vendor,\n       platform: navigator.platform,\n       language: navigator.language,\n       cookieEnabled: navigator.cookieEnabled,\n-      onLine: navigator.onLine\n-    }\n+      onLine: navigator.onLine,\n+    },\n   };\n }\n \n /**\n@@ -282,9 +288,9 @@\n     taskCount: 0,\n     successCount: 0,\n     errorCount: 0,\n     totalTime: 0,\n-    averageTime: 0\n+    averageTime: 0,\n   };\n \n   recordTaskStart() {\n     this.metrics.taskCount++;\n@@ -294,9 +300,10 @@\n   recordTaskSuccess(startTime: number) {\n     const duration = Date.now() - startTime;\n     this.metrics.successCount++;\n     this.metrics.totalTime += duration;\n-    this.metrics.averageTime = this.metrics.totalTime / this.metrics.successCount;\n+    this.metrics.averageTime =\n+      this.metrics.totalTime / this.metrics.successCount;\n   }\n \n   recordTaskError(error: string) {\n     this.metrics.errorCount++;\n@@ -306,16 +313,22 @@\n \n   getMetrics() {\n     return {\n       ...this.metrics,\n-      successRate: this.metrics.taskCount > 0 ? this.metrics.successCount / this.metrics.taskCount : 0,\n-      errorRate: this.metrics.taskCount > 0 ? this.metrics.errorCount / this.metrics.taskCount : 0\n+      successRate:\n+        this.metrics.taskCount > 0\n+          ? this.metrics.successCount / this.metrics.taskCount\n+          : 0,\n+      errorRate:\n+        this.metrics.taskCount > 0\n+          ? this.metrics.errorCount / this.metrics.taskCount\n+          : 0,\n     };\n   }\n \n   shouldFallbackToMainThread(): boolean {\n     const metrics = this.getMetrics();\n-    \n+\n     // 如果错误率超过 50% 或平均处理时间超过 10 秒，建议降级\n     return metrics.errorRate > 0.5 || metrics.averageTime > 10000;\n   }\n \n@@ -324,9 +337,9 @@\n       taskCount: 0,\n       successCount: 0,\n       errorCount: 0,\n       totalTime: 0,\n-      averageTime: 0\n+      averageTime: 0,\n     };\n   }\n }\n \n@@ -337,5 +350,5 @@\n   if (!globalPerformanceMonitor) {\n     globalPerformanceMonitor = new WorkerPerformanceMonitor();\n   }\n   return globalPerformanceMonitor;\n-}\n\\ No newline at end of file\n+}\n"
                },
                {
                    "date": 1759221351112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,9 +219,11 @@\n   }\n \n   return new Promise((resolve) => {\n     try {\n-      const worker = new Worker(new URL(\"../workers/lqip-worker.js\", import.meta.url).href);\n+      const worker = new Worker(\n+        new URL(\"../workers/lqip-worker.js\", import.meta.url).href\n+      );\n \n       const timeout = setTimeout(() => {\n         worker.terminate();\n         resolve(false);\n"
                }
            ],
            "date": 1759220932918,
            "name": "Commit-0",
            "content": "/**\n * Web Worker 检测和降级策略工具\n * 检测浏览器对 Worker 相关 API 的支持情况，并提供智能降级策略\n */\n\nexport interface WorkerCapabilities {\n  hasWorker: boolean;\n  hasOffscreenCanvas: boolean;\n  hasCreateImageBitmap: boolean;\n  hasFetch: boolean;\n  hasTransferableObjects: boolean;\n  estimatedPerformance: 'high' | 'medium' | 'low';\n}\n\nexport interface WorkerRecommendation {\n  shouldUseWorker: boolean;\n  maxWorkers: number;\n  enableFallback: boolean;\n  reason: string;\n  capabilities: WorkerCapabilities;\n}\n\n/**\n * 检测 Worker 相关 API 支持情况\n */\nexport function detectWorkerCapabilities(): WorkerCapabilities {\n  const capabilities: WorkerCapabilities = {\n    hasWorker: typeof Worker !== 'undefined',\n    hasOffscreenCanvas: typeof OffscreenCanvas !== 'undefined',\n    hasCreateImageBitmap: typeof createImageBitmap !== 'undefined',\n    hasFetch: typeof fetch !== 'undefined',\n    hasTransferableObjects: false,\n    estimatedPerformance: 'low'\n  };\n\n  // 检测 Transferable Objects 支持\n  if (capabilities.hasWorker) {\n    try {\n      // 尝试创建一个简单的 ArrayBuffer 来测试 Transferable Objects\n      new ArrayBuffer(8); // 测试 ArrayBuffer 支持\n      capabilities.hasTransferableObjects = true;\n    } catch (error) {\n      capabilities.hasTransferableObjects = false;\n    }\n  }\n\n  // 估算性能等级\n  if (capabilities.hasWorker && capabilities.hasOffscreenCanvas && capabilities.hasCreateImageBitmap) {\n    capabilities.estimatedPerformance = 'high';\n  } else if (capabilities.hasWorker && (capabilities.hasOffscreenCanvas || capabilities.hasCreateImageBitmap)) {\n    capabilities.estimatedPerformance = 'medium';\n  } else {\n    capabilities.estimatedPerformance = 'low';\n  }\n\n  return capabilities;\n}\n\n/**\n * 获取 Worker 使用建议\n */\nexport function getWorkerRecommendation(): WorkerRecommendation {\n  const capabilities = detectWorkerCapabilities();\n  \n  // 基础检查：是否支持 Worker\n  if (!capabilities.hasWorker) {\n    return {\n      shouldUseWorker: false,\n      maxWorkers: 0,\n      enableFallback: true,\n      reason: 'Web Workers 不支持，将使用主线程降级方案',\n      capabilities\n    };\n  }\n\n  // 检查关键 API 支持\n  if (!capabilities.hasFetch) {\n    return {\n      shouldUseWorker: false,\n      maxWorkers: 0,\n      enableFallback: true,\n      reason: 'Worker 中缺少 Fetch API 支持，将使用主线程降级方案',\n      capabilities\n    };\n  }\n\n  // 根据性能等级给出建议\n  switch (capabilities.estimatedPerformance) {\n    case 'high':\n      return {\n        shouldUseWorker: true,\n        maxWorkers: Math.min(navigator.hardwareConcurrency || 4, 4),\n        enableFallback: true,\n        reason: '完整的 Worker API 支持，推荐使用 Worker 处理 LQIP',\n        capabilities\n      };\n\n    case 'medium':\n      return {\n        shouldUseWorker: true,\n        maxWorkers: Math.min(navigator.hardwareConcurrency || 2, 2),\n        enableFallback: true,\n        reason: '部分 Worker API 支持，建议使用较少的 Worker 实例',\n        capabilities\n      };\n\n    case 'low':\n    default:\n      return {\n        shouldUseWorker: false,\n        maxWorkers: 0,\n        enableFallback: true,\n        reason: 'Worker API 支持有限，建议使用主线程处理',\n        capabilities\n      };\n  }\n}\n\n/**\n * 检测设备性能等级\n */\nexport function detectDevicePerformance(): 'high' | 'medium' | 'low' {\n  // 基于硬件并发数判断\n  const cores = navigator.hardwareConcurrency || 1;\n  \n  // 基于内存判断（如果可用）\n  const memory = (navigator as any).deviceMemory;\n  \n  // 基于连接类型判断（如果可用）\n  const connection = (navigator as any).connection;\n  const effectiveType = connection?.effectiveType;\n\n  let score = 0;\n\n  // 核心数评分\n  if (cores >= 8) score += 3;\n  else if (cores >= 4) score += 2;\n  else if (cores >= 2) score += 1;\n\n  // 内存评分\n  if (memory) {\n    if (memory >= 8) score += 3;\n    else if (memory >= 4) score += 2;\n    else if (memory >= 2) score += 1;\n  } else {\n    // 没有内存信息，给予中等评分\n    score += 1;\n  }\n\n  // 网络评分\n  if (effectiveType) {\n    if (effectiveType === '4g') score += 2;\n    else if (effectiveType === '3g') score += 1;\n  } else {\n    // 没有网络信息，给予中等评分\n    score += 1;\n  }\n\n  // 根据总分判断性能等级\n  if (score >= 7) return 'high';\n  if (score >= 4) return 'medium';\n  return 'low';\n}\n\n/**\n * 获取推荐的 Worker 配置\n */\nexport function getRecommendedWorkerConfig() {\n  const recommendation = getWorkerRecommendation();\n  const devicePerformance = detectDevicePerformance();\n  \n  // 根据设备性能调整配置\n  let adjustedMaxWorkers = recommendation.maxWorkers;\n  let taskTimeout = 30000; // 默认 30 秒\n\n  switch (devicePerformance) {\n    case 'low':\n      adjustedMaxWorkers = Math.min(adjustedMaxWorkers, 1);\n      taskTimeout = 45000; // 低性能设备增加超时时间\n      break;\n    case 'medium':\n      adjustedMaxWorkers = Math.min(adjustedMaxWorkers, 2);\n      taskTimeout = 30000;\n      break;\n    case 'high':\n      // 保持推荐配置\n      taskTimeout = 20000; // 高性能设备减少超时时间\n      break;\n  }\n\n  return {\n    enableLQIPWorker: recommendation.shouldUseWorker,\n    workerOptions: {\n      maxWorkers: adjustedMaxWorkers,\n      workerScript: '/src/workers/lqip-worker.js',\n      enableFallback: recommendation.enableFallback,\n      taskTimeout\n    },\n    recommendation,\n    devicePerformance\n  };\n}\n\n/**\n * 运行时检测 Worker 是否正常工作\n */\nexport async function testWorkerFunctionality(): Promise<boolean> {\n  const capabilities = detectWorkerCapabilities();\n  \n  if (!capabilities.hasWorker) {\n    return false;\n  }\n\n  return new Promise((resolve) => {\n    try {\n      const worker = new Worker('/workers/lqip-worker.js');\n      \n      const timeout = setTimeout(() => {\n        worker.terminate();\n        resolve(false);\n      }, 5000);\n\n      worker.onmessage = (event) => {\n        if (event.data.type === 'WORKER_READY') {\n          clearTimeout(timeout);\n          worker.terminate();\n          resolve(true);\n        }\n      };\n\n      worker.onerror = () => {\n        clearTimeout(timeout);\n        worker.terminate();\n        resolve(false);\n      };\n\n    } catch (error) {\n      resolve(false);\n    }\n  });\n}\n\n/**\n * 获取 Worker 状态报告\n */\nexport function getWorkerStatusReport() {\n  const capabilities = detectWorkerCapabilities();\n  const recommendation = getWorkerRecommendation();\n  const devicePerformance = detectDevicePerformance();\n  const config = getRecommendedWorkerConfig();\n\n  return {\n    timestamp: Date.now(),\n    userAgent: navigator.userAgent,\n    capabilities,\n    recommendation,\n    devicePerformance,\n    recommendedConfig: config,\n    browserInfo: {\n      vendor: navigator.vendor,\n      platform: navigator.platform,\n      language: navigator.language,\n      cookieEnabled: navigator.cookieEnabled,\n      onLine: navigator.onLine\n    }\n  };\n}\n\n/**\n * 监控 Worker 性能\n */\nexport class WorkerPerformanceMonitor {\n  private metrics: {\n    taskCount: number;\n    successCount: number;\n    errorCount: number;\n    totalTime: number;\n    averageTime: number;\n    lastError?: string;\n    lastErrorTime?: number;\n  } = {\n    taskCount: 0,\n    successCount: 0,\n    errorCount: 0,\n    totalTime: 0,\n    averageTime: 0\n  };\n\n  recordTaskStart() {\n    this.metrics.taskCount++;\n    return Date.now();\n  }\n\n  recordTaskSuccess(startTime: number) {\n    const duration = Date.now() - startTime;\n    this.metrics.successCount++;\n    this.metrics.totalTime += duration;\n    this.metrics.averageTime = this.metrics.totalTime / this.metrics.successCount;\n  }\n\n  recordTaskError(error: string) {\n    this.metrics.errorCount++;\n    this.metrics.lastError = error;\n    this.metrics.lastErrorTime = Date.now();\n  }\n\n  getMetrics() {\n    return {\n      ...this.metrics,\n      successRate: this.metrics.taskCount > 0 ? this.metrics.successCount / this.metrics.taskCount : 0,\n      errorRate: this.metrics.taskCount > 0 ? this.metrics.errorCount / this.metrics.taskCount : 0\n    };\n  }\n\n  shouldFallbackToMainThread(): boolean {\n    const metrics = this.getMetrics();\n    \n    // 如果错误率超过 50% 或平均处理时间超过 10 秒，建议降级\n    return metrics.errorRate > 0.5 || metrics.averageTime > 10000;\n  }\n\n  reset() {\n    this.metrics = {\n      taskCount: 0,\n      successCount: 0,\n      errorCount: 0,\n      totalTime: 0,\n      averageTime: 0\n    };\n  }\n}\n\n// 全局性能监控实例\nlet globalPerformanceMonitor: WorkerPerformanceMonitor | null = null;\n\nexport function getWorkerPerformanceMonitor(): WorkerPerformanceMonitor {\n  if (!globalPerformanceMonitor) {\n    globalPerformanceMonitor = new WorkerPerformanceMonitor();\n  }\n  return globalPerformanceMonitor;\n}"
        }
    ]
}