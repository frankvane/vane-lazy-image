{
    "sourceFile": "src/components/LazyImage/utils/performanceAnalyzer.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1759223181070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759223850490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,18 +48,18 @@\n     this.startTimes.delete(label);\r\n \r\n     // 记录特定指标\r\n     switch (label) {\r\n-      case 'component-mount':\r\n+      case \"component-mount\":\r\n         this.metrics.componentMountTime = duration;\r\n         break;\r\n-      case 'worker-init':\r\n+      case \"worker-init\":\r\n         this.metrics.workerInitTime = duration;\r\n         break;\r\n-      case 'lqip-generation':\r\n+      case \"lqip-generation\":\r\n         this.metrics.lqipGenerationTime = duration;\r\n         break;\r\n-      case 'first-image-load':\r\n+      case \"first-image-load\":\r\n         this.metrics.firstImageLoadTime = duration;\r\n         break;\r\n     }\r\n \r\n@@ -71,9 +71,11 @@\n    */\r\n   recordImageLoad(duration: number): void {\r\n     this.imageLoadTimes.push(duration);\r\n     this.metrics.totalImagesLoaded = this.imageLoadTimes.length;\r\n-    this.metrics.averageLoadTime = this.imageLoadTimes.reduce((a, b) => a + b, 0) / this.imageLoadTimes.length;\r\n+    this.metrics.averageLoadTime =\r\n+      this.imageLoadTimes.reduce((a, b) => a + b, 0) /\r\n+      this.imageLoadTimes.length;\r\n   }\r\n \r\n   /**\r\n    * 记录网络请求\r\n@@ -86,9 +88,9 @@\n   /**\r\n    * 获取内存使用情况\r\n    */\r\n   getMemoryUsage(): number | undefined {\r\n-    if ('memory' in performance) {\r\n+    if (\"memory\" in performance) {\r\n       const memory = (performance as any).memory;\r\n       return memory.usedJSHeapSize;\r\n     }\r\n     return undefined;\r\n@@ -103,56 +105,80 @@\n     const recommendations: string[] = [];\r\n     const issues: string[] = [];\r\n \r\n     // 分析组件挂载时间\r\n-    if (this.metrics.componentMountTime && this.metrics.componentMountTime > 100) {\r\n-      issues.push(`组件挂载时间过长: ${this.metrics.componentMountTime.toFixed(2)}ms`);\r\n-      recommendations.push('考虑使用 React.memo 或减少初始渲染的复杂度');\r\n+    if (\r\n+      this.metrics.componentMountTime &&\r\n+      this.metrics.componentMountTime > 100\r\n+    ) {\r\n+      issues.push(\r\n+        `组件挂载时间过长: ${this.metrics.componentMountTime.toFixed(2)}ms`\r\n+      );\r\n+      recommendations.push(\"考虑使用 React.memo 或减少初始渲染的复杂度\");\r\n     }\r\n \r\n     // 分析 Worker 初始化时间\r\n     if (this.metrics.workerInitTime && this.metrics.workerInitTime > 500) {\r\n-      issues.push(`Worker 初始化时间过长: ${this.metrics.workerInitTime.toFixed(2)}ms`);\r\n-      recommendations.push('考虑预加载 Worker 或使用更轻量的 Worker 脚本');\r\n+      issues.push(\r\n+        `Worker 初始化时间过长: ${this.metrics.workerInitTime.toFixed(2)}ms`\r\n+      );\r\n+      recommendations.push(\"考虑预加载 Worker 或使用更轻量的 Worker 脚本\");\r\n     }\r\n \r\n     // 分析 LQIP 生成时间\r\n-    if (this.metrics.lqipGenerationTime && this.metrics.lqipGenerationTime > 1000) {\r\n-      issues.push(`LQIP 生成时间过长: ${this.metrics.lqipGenerationTime.toFixed(2)}ms`);\r\n-      recommendations.push('考虑降低 LQIP 质量或尺寸，或使用缓存');\r\n+    if (\r\n+      this.metrics.lqipGenerationTime &&\r\n+      this.metrics.lqipGenerationTime > 1000\r\n+    ) {\r\n+      issues.push(\r\n+        `LQIP 生成时间过长: ${this.metrics.lqipGenerationTime.toFixed(2)}ms`\r\n+      );\r\n+      recommendations.push(\"考虑降低 LQIP 质量或尺寸，或使用缓存\");\r\n     }\r\n \r\n     // 分析首张图片加载时间\r\n-    if (this.metrics.firstImageLoadTime && this.metrics.firstImageLoadTime > 2000) {\r\n-      issues.push(`首张图片加载时间过长: ${this.metrics.firstImageLoadTime.toFixed(2)}ms`);\r\n-      recommendations.push('检查网络连接或使用 CDN 加速');\r\n+    if (\r\n+      this.metrics.firstImageLoadTime &&\r\n+      this.metrics.firstImageLoadTime > 2000\r\n+    ) {\r\n+      issues.push(\r\n+        `首张图片加载时间过长: ${this.metrics.firstImageLoadTime.toFixed(2)}ms`\r\n+      );\r\n+      recommendations.push(\"检查网络连接或使用 CDN 加速\");\r\n     }\r\n \r\n     // 分析平均加载时间\r\n     if (this.metrics.averageLoadTime && this.metrics.averageLoadTime > 1500) {\r\n-      issues.push(`平均图片加载时间过长: ${this.metrics.averageLoadTime.toFixed(2)}ms`);\r\n-      recommendations.push('考虑使用图片压缩或懒加载优化');\r\n+      issues.push(\r\n+        `平均图片加载时间过长: ${this.metrics.averageLoadTime.toFixed(2)}ms`\r\n+      );\r\n+      recommendations.push(\"考虑使用图片压缩或懒加载优化\");\r\n     }\r\n \r\n     // 分析网络请求数量\r\n     if (this.metrics.networkRequests && this.metrics.networkRequests > 50) {\r\n       issues.push(`网络请求数量过多: ${this.metrics.networkRequests}`);\r\n-      recommendations.push('考虑批量加载或使用虚拟滚动');\r\n+      recommendations.push(\"考虑批量加载或使用虚拟滚动\");\r\n     }\r\n \r\n     // 分析内存使用\r\n-    if (this.metrics.memoryUsage && this.metrics.memoryUsage > 100 * 1024 * 1024) {\r\n-      issues.push(`内存使用过高: ${(this.metrics.memoryUsage / 1024 / 1024).toFixed(2)}MB`);\r\n-      recommendations.push('考虑启用内存管理或减少同时加载的图片数量');\r\n+    if (\r\n+      this.metrics.memoryUsage &&\r\n+      this.metrics.memoryUsage > 100 * 1024 * 1024\r\n+    ) {\r\n+      issues.push(\r\n+        `内存使用过高: ${(this.metrics.memoryUsage / 1024 / 1024).toFixed(2)}MB`\r\n+      );\r\n+      recommendations.push(\"考虑启用内存管理或减少同时加载的图片数量\");\r\n     }\r\n \r\n     // 通用建议\r\n     if (this.metrics.totalImagesLoaded && this.metrics.totalImagesLoaded > 20) {\r\n-      recommendations.push('大量图片时建议使用虚拟滚动和分页加载');\r\n+      recommendations.push(\"大量图片时建议使用虚拟滚动和分页加载\");\r\n     }\r\n \r\n     if (!this.metrics.workerInitTime) {\r\n-      recommendations.push('考虑启用 Web Worker 来提升 LQIP 生成性能');\r\n+      recommendations.push(\"考虑启用 Web Worker 来提升 LQIP 生成性能\");\r\n     }\r\n \r\n     return {\r\n       metrics: this.metrics as PerformanceMetrics,\r\n@@ -186,21 +212,28 @@\n /**\r\n  * 性能监控 Hook\r\n  */\r\n export function usePerformanceMonitor() {\r\n-  const startComponentMount = () => performanceAnalyzer.startTimer('component-mount');\r\n-  const endComponentMount = () => performanceAnalyzer.endTimer('component-mount');\r\n+  const startComponentMount = () =>\r\n+    performanceAnalyzer.startTimer(\"component-mount\");\r\n+  const endComponentMount = () =>\r\n+    performanceAnalyzer.endTimer(\"component-mount\");\r\n \r\n-  const startWorkerInit = () => performanceAnalyzer.startTimer('worker-init');\r\n-  const endWorkerInit = () => performanceAnalyzer.endTimer('worker-init');\r\n+  const startWorkerInit = () => performanceAnalyzer.startTimer(\"worker-init\");\r\n+  const endWorkerInit = () => performanceAnalyzer.endTimer(\"worker-init\");\r\n \r\n-  const startLQIPGeneration = () => performanceAnalyzer.startTimer('lqip-generation');\r\n-  const endLQIPGeneration = () => performanceAnalyzer.endTimer('lqip-generation');\r\n+  const startLQIPGeneration = () =>\r\n+    performanceAnalyzer.startTimer(\"lqip-generation\");\r\n+  const endLQIPGeneration = () =>\r\n+    performanceAnalyzer.endTimer(\"lqip-generation\");\r\n \r\n-  const startFirstImageLoad = () => performanceAnalyzer.startTimer('first-image-load');\r\n-  const endFirstImageLoad = () => performanceAnalyzer.endTimer('first-image-load');\r\n+  const startFirstImageLoad = () =>\r\n+    performanceAnalyzer.startTimer(\"first-image-load\");\r\n+  const endFirstImageLoad = () =>\r\n+    performanceAnalyzer.endTimer(\"first-image-load\");\r\n \r\n-  const recordImageLoad = (duration: number) => performanceAnalyzer.recordImageLoad(duration);\r\n+  const recordImageLoad = (duration: number) =>\r\n+    performanceAnalyzer.recordImageLoad(duration);\r\n   const recordNetworkRequest = () => performanceAnalyzer.recordNetworkRequest();\r\n \r\n   const generateReport = () => performanceAnalyzer.generateReport();\r\n   const reset = () => performanceAnalyzer.reset();\r\n@@ -229,25 +262,33 @@\n export function withPerformanceMonitor<T extends React.ComponentType<any>>(\r\n   Component: T,\r\n   componentName?: string\r\n ): T {\r\n-  const WrappedComponent = React.forwardRef<any, React.ComponentProps<T>>((props, ref) => {\r\n-    const monitor = usePerformanceMonitor();\r\n+  const WrappedComponent = React.forwardRef<any, React.ComponentProps<T>>(\r\n+    (props, ref) => {\r\n+      const monitor = usePerformanceMonitor();\r\n \r\n-    React.useEffect(() => {\r\n-      monitor.startComponentMount();\r\n-      return () => {\r\n-        monitor.endComponentMount();\r\n-      };\r\n-    }, []);\r\n+      React.useEffect(() => {\r\n+        monitor.startComponentMount();\r\n+        return () => {\r\n+          monitor.endComponentMount();\r\n+        };\r\n+      }, []);\r\n \r\n-    return React.createElement(Component, { ...props, ref, performanceMonitor: monitor });\r\n-  });\r\n+      return React.createElement(Component, {\r\n+        ...props,\r\n+        ref,\r\n+        performanceMonitor: monitor,\r\n+      });\r\n+    }\r\n+  );\r\n \r\n-  WrappedComponent.displayName = `withPerformanceMonitor(${componentName || Component.displayName || Component.name})`;\r\n+  WrappedComponent.displayName = `withPerformanceMonitor(${\r\n+    componentName || Component.displayName || Component.name\r\n+  })`;\r\n \r\n   return WrappedComponent as unknown as T;\r\n }\r\n \r\n // 导入 React 用于类型定义\r\n \r\n-import React from 'react';\r\n+import React from \"react\";\r\n"
                }
            ],
            "date": 1759223181070,
            "name": "Commit-0",
            "content": "/**\r\n * 性能分析工具\r\n * 用于诊断 LazyImage 组件的性能问题\r\n */\r\n\r\nexport interface PerformanceMetrics {\r\n  componentMountTime: number;\r\n  firstImageLoadTime: number;\r\n  workerInitTime?: number;\r\n  lqipGenerationTime?: number;\r\n  totalImagesLoaded: number;\r\n  averageLoadTime: number;\r\n  memoryUsage?: number;\r\n  networkRequests: number;\r\n}\r\n\r\nexport interface PerformanceReport {\r\n  metrics: PerformanceMetrics;\r\n  recommendations: string[];\r\n  issues: string[];\r\n  timestamp: string;\r\n}\r\n\r\nclass PerformanceAnalyzer {\r\n  private metrics: Partial<PerformanceMetrics> = {};\r\n  private startTimes: Map<string, number> = new Map();\r\n  private imageLoadTimes: number[] = [];\r\n  private networkRequestCount = 0;\r\n\r\n  /**\r\n   * 开始计时\r\n   */\r\n  startTimer(label: string): void {\r\n    this.startTimes.set(label, performance.now());\r\n  }\r\n\r\n  /**\r\n   * 结束计时\r\n   */\r\n  endTimer(label: string): number {\r\n    const startTime = this.startTimes.get(label);\r\n    if (!startTime) {\r\n      console.warn(`Timer \"${label}\" was not started`);\r\n      return 0;\r\n    }\r\n\r\n    const duration = performance.now() - startTime;\r\n    this.startTimes.delete(label);\r\n\r\n    // 记录特定指标\r\n    switch (label) {\r\n      case 'component-mount':\r\n        this.metrics.componentMountTime = duration;\r\n        break;\r\n      case 'worker-init':\r\n        this.metrics.workerInitTime = duration;\r\n        break;\r\n      case 'lqip-generation':\r\n        this.metrics.lqipGenerationTime = duration;\r\n        break;\r\n      case 'first-image-load':\r\n        this.metrics.firstImageLoadTime = duration;\r\n        break;\r\n    }\r\n\r\n    return duration;\r\n  }\r\n\r\n  /**\r\n   * 记录图片加载时间\r\n   */\r\n  recordImageLoad(duration: number): void {\r\n    this.imageLoadTimes.push(duration);\r\n    this.metrics.totalImagesLoaded = this.imageLoadTimes.length;\r\n    this.metrics.averageLoadTime = this.imageLoadTimes.reduce((a, b) => a + b, 0) / this.imageLoadTimes.length;\r\n  }\r\n\r\n  /**\r\n   * 记录网络请求\r\n   */\r\n  recordNetworkRequest(): void {\r\n    this.networkRequestCount++;\r\n    this.metrics.networkRequests = this.networkRequestCount;\r\n  }\r\n\r\n  /**\r\n   * 获取内存使用情况\r\n   */\r\n  getMemoryUsage(): number | undefined {\r\n    if ('memory' in performance) {\r\n      const memory = (performance as any).memory;\r\n      return memory.usedJSHeapSize;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * 生成性能报告\r\n   */\r\n  generateReport(): PerformanceReport {\r\n    this.metrics.memoryUsage = this.getMemoryUsage();\r\n\r\n    const recommendations: string[] = [];\r\n    const issues: string[] = [];\r\n\r\n    // 分析组件挂载时间\r\n    if (this.metrics.componentMountTime && this.metrics.componentMountTime > 100) {\r\n      issues.push(`组件挂载时间过长: ${this.metrics.componentMountTime.toFixed(2)}ms`);\r\n      recommendations.push('考虑使用 React.memo 或减少初始渲染的复杂度');\r\n    }\r\n\r\n    // 分析 Worker 初始化时间\r\n    if (this.metrics.workerInitTime && this.metrics.workerInitTime > 500) {\r\n      issues.push(`Worker 初始化时间过长: ${this.metrics.workerInitTime.toFixed(2)}ms`);\r\n      recommendations.push('考虑预加载 Worker 或使用更轻量的 Worker 脚本');\r\n    }\r\n\r\n    // 分析 LQIP 生成时间\r\n    if (this.metrics.lqipGenerationTime && this.metrics.lqipGenerationTime > 1000) {\r\n      issues.push(`LQIP 生成时间过长: ${this.metrics.lqipGenerationTime.toFixed(2)}ms`);\r\n      recommendations.push('考虑降低 LQIP 质量或尺寸，或使用缓存');\r\n    }\r\n\r\n    // 分析首张图片加载时间\r\n    if (this.metrics.firstImageLoadTime && this.metrics.firstImageLoadTime > 2000) {\r\n      issues.push(`首张图片加载时间过长: ${this.metrics.firstImageLoadTime.toFixed(2)}ms`);\r\n      recommendations.push('检查网络连接或使用 CDN 加速');\r\n    }\r\n\r\n    // 分析平均加载时间\r\n    if (this.metrics.averageLoadTime && this.metrics.averageLoadTime > 1500) {\r\n      issues.push(`平均图片加载时间过长: ${this.metrics.averageLoadTime.toFixed(2)}ms`);\r\n      recommendations.push('考虑使用图片压缩或懒加载优化');\r\n    }\r\n\r\n    // 分析网络请求数量\r\n    if (this.metrics.networkRequests && this.metrics.networkRequests > 50) {\r\n      issues.push(`网络请求数量过多: ${this.metrics.networkRequests}`);\r\n      recommendations.push('考虑批量加载或使用虚拟滚动');\r\n    }\r\n\r\n    // 分析内存使用\r\n    if (this.metrics.memoryUsage && this.metrics.memoryUsage > 100 * 1024 * 1024) {\r\n      issues.push(`内存使用过高: ${(this.metrics.memoryUsage / 1024 / 1024).toFixed(2)}MB`);\r\n      recommendations.push('考虑启用内存管理或减少同时加载的图片数量');\r\n    }\r\n\r\n    // 通用建议\r\n    if (this.metrics.totalImagesLoaded && this.metrics.totalImagesLoaded > 20) {\r\n      recommendations.push('大量图片时建议使用虚拟滚动和分页加载');\r\n    }\r\n\r\n    if (!this.metrics.workerInitTime) {\r\n      recommendations.push('考虑启用 Web Worker 来提升 LQIP 生成性能');\r\n    }\r\n\r\n    return {\r\n      metrics: this.metrics as PerformanceMetrics,\r\n      recommendations,\r\n      issues,\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 重置分析器\r\n   */\r\n  reset(): void {\r\n    this.metrics = {};\r\n    this.startTimes.clear();\r\n    this.imageLoadTimes = [];\r\n    this.networkRequestCount = 0;\r\n  }\r\n\r\n  /**\r\n   * 获取当前指标\r\n   */\r\n  getMetrics(): Partial<PerformanceMetrics> {\r\n    return { ...this.metrics };\r\n  }\r\n}\r\n\r\n// 全局性能分析器实例\r\nexport const performanceAnalyzer = new PerformanceAnalyzer();\r\n\r\n/**\r\n * 性能监控 Hook\r\n */\r\nexport function usePerformanceMonitor() {\r\n  const startComponentMount = () => performanceAnalyzer.startTimer('component-mount');\r\n  const endComponentMount = () => performanceAnalyzer.endTimer('component-mount');\r\n\r\n  const startWorkerInit = () => performanceAnalyzer.startTimer('worker-init');\r\n  const endWorkerInit = () => performanceAnalyzer.endTimer('worker-init');\r\n\r\n  const startLQIPGeneration = () => performanceAnalyzer.startTimer('lqip-generation');\r\n  const endLQIPGeneration = () => performanceAnalyzer.endTimer('lqip-generation');\r\n\r\n  const startFirstImageLoad = () => performanceAnalyzer.startTimer('first-image-load');\r\n  const endFirstImageLoad = () => performanceAnalyzer.endTimer('first-image-load');\r\n\r\n  const recordImageLoad = (duration: number) => performanceAnalyzer.recordImageLoad(duration);\r\n  const recordNetworkRequest = () => performanceAnalyzer.recordNetworkRequest();\r\n\r\n  const generateReport = () => performanceAnalyzer.generateReport();\r\n  const reset = () => performanceAnalyzer.reset();\r\n  const getMetrics = () => performanceAnalyzer.getMetrics();\r\n\r\n  return {\r\n    startComponentMount,\r\n    endComponentMount,\r\n    startWorkerInit,\r\n    endWorkerInit,\r\n    startLQIPGeneration,\r\n    endLQIPGeneration,\r\n    startFirstImageLoad,\r\n    endFirstImageLoad,\r\n    recordImageLoad,\r\n    recordNetworkRequest,\r\n    generateReport,\r\n    reset,\r\n    getMetrics,\r\n  };\r\n}\r\n\r\n/**\r\n * 性能监控装饰器\r\n */\r\nexport function withPerformanceMonitor<T extends React.ComponentType<any>>(\r\n  Component: T,\r\n  componentName?: string\r\n): T {\r\n  const WrappedComponent = React.forwardRef<any, React.ComponentProps<T>>((props, ref) => {\r\n    const monitor = usePerformanceMonitor();\r\n\r\n    React.useEffect(() => {\r\n      monitor.startComponentMount();\r\n      return () => {\r\n        monitor.endComponentMount();\r\n      };\r\n    }, []);\r\n\r\n    return React.createElement(Component, { ...props, ref, performanceMonitor: monitor });\r\n  });\r\n\r\n  WrappedComponent.displayName = `withPerformanceMonitor(${componentName || Component.displayName || Component.name})`;\r\n\r\n  return WrappedComponent as unknown as T;\r\n}\r\n\r\n// 导入 React 用于类型定义\r\n\r\nimport React from 'react';\r\n"
        }
    ]
}