{
    "sourceFile": "LAZYLOADIMAGE_REFACTOR_PLAN.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1759231311144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759231476129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,124 +0,0 @@\n-# @LazyLoadImage 重构规划与实施清单\r\n-\r\n-## 目标\r\n-\r\n-- 输出全新、职责清晰、可组合的懒加载图片组件集 `src/components/@LazyLoadImage/`\r\n-- 保持与现有 `LazyImage` 的功能等价（或可渐进启用高级功能）\r\n-- 降低复杂度、统一公共逻辑、增强类型安全与可维护性\r\n-\r\n-## 新目录结构（提案）\r\n-\r\n-```\r\n-src/components/@LazyLoadImage/\r\n-  core/\r\n-    LazyLoadImageCore.tsx           # 最小可用核心（IntersectionObserver + 基础加载）\r\n-    useIntersection.ts              # 纯粹的 IO Hook（统一入口）\r\n-    useImageReady.ts                # decode/ready 控制（onload+decode）\r\n-\r\n-  features/\r\n-    lqip/\r\n-      useLQIP.ts                    # LQIP 生成（可选，Worker/主线程降级）\r\n-      workerPool.ts                 # 极简 Worker 管理（单实例）\r\n-    cache/\r\n-      useImageCache.ts              # IndexedDB/内存封装与URL创建\r\n-    memory/\r\n-      useMemoryManager.ts           # 简化内存管理（注册/清理/估算）\r\n-    concurrency/\r\n-      useConcurrency.ts             # 简化并发（可配置上限）\r\n-    scroll/\r\n-      useScrollManager.ts           # 滚动状态/动态 rootMargin\r\n-\r\n-  ui/\r\n-    Placeholder.tsx                 # 默认灰阶渐变占位\r\n-    LoadingIndicator.tsx            # 默认加载指示器\r\n-    ErrorFallback.tsx               # 默认错误态\r\n-    style.module.css                # 局部样式\r\n-\r\n-  compose/\r\n-    useLazyLoadController.ts        # 组合器：协调 core + features\r\n-    LazyLoadImage.tsx               # 提供分层 props 的组合版组件\r\n-\r\n-  types/\r\n-    index.ts                        # 分层 props（Base/Lazy/LQIP/Memory/...）和公共类型\r\n-\r\n-  config/\r\n-    config.ts                       # 默认配置与 getConfig/setGlobalConfig\r\n-\r\n-  index.ts                          # 对外导出入口\r\n-```\r\n-\r\n-## 模块分层与职责\r\n-\r\n-- core: 仅负责观测进入视口与图片 ready（decode 完成）。\r\n-- features: 每个子域单一职责、解耦可插拔。\r\n-- compose: 将 core 与 features 编排为高阶能力；控制依赖与优先级。\r\n-- ui: 默认 UI 组件可被替换；提供轻量样式。\r\n-- types/config: 分类 props 与集中默认值，提升类型清晰度。\r\n-\r\n-## 旧 → 新模块映射\r\n-\r\n-- IntersectionObserver: `useInView`/`useInViewCore` → `core/useIntersection`\r\n-- decode/ready: `LazyImage.tsx` onLoad+decode → `core/useImageReady`\r\n-- LQIP: `useLQIPGenerator` + `utils/lqipWorkerPool` → `features/lqip/useLQIP` + `features/lqip/workerPool`\r\n-- 缓存: `hooks/useImageCache.ts` → `features/cache/useImageCache`\r\n-- 并发: `utils/concurrency.ts` → `features/concurrency/useConcurrency`\r\n-- 内存: `hooks/useMemoryManager.ts` → `features/memory/useMemoryManager`\r\n-- 滚动: `hooks/useScrollManager.ts` + 动态 rootMargin → `features/scroll/useScrollManager`\r\n-- UI: `components/Placeholder.tsx`、`LoadingIndicator.tsx`、`ImageErrorHandler.tsx` → `ui/*`\r\n-\r\n-## 分阶段实施步骤\r\n-\r\n-### 阶段 0：脚手与结构\r\n-\r\n-- [ ] 创建目录 `src/components/@LazyLoadImage/`\r\n-- [ ] 写入 `index.ts`、`types/index.ts`、`config/config.ts` 空骨架\r\n-- [ ] 建立 `core/` 与 `ui/` 基础文件（空实现+TODO）\r\n-\r\n-### 阶段 1：核心最小可用（MVP）\r\n-\r\n-- [ ] `core/useIntersection`：统一 IO（root/rootRef/rootMargin/threshold/unobserve）\r\n-- [ ] `core/useImageReady`：onload + decode 完整 ready 流程\r\n-- [ ] `core/LazyLoadImageCore.tsx`：实现最小可用组件（占位/图片/错误态）\r\n-- [ ] `ui/Placeholder.tsx` 与 `ui/style.module.css`：默认灰阶渐变\r\n-- [ ] 导出 `index.ts` 最小 API：`LazyLoadImageCore`\r\n-\r\n-### 阶段 2：特性可插拔\r\n-\r\n-- [ ] `features/concurrency/useConcurrency`：简化并发（队列+maxConcurrency）\r\n-- [ ] `features/cache/useImageCache`：整合 IndexedDB/内存/AbortController\r\n-- [ ] `features/lqip/useLQIP`：缓存优先 →Worker→ 主线程降级（支持任务取消）\r\n-- [ ] `features/memory/useMemoryManager`：注册/估算/淘汰（LRU 简化）\r\n-- [ ] `features/scroll/useScrollManager`：速度阈值+动态 rootMargin\r\n-\r\n-### 阶段 3：组合器与增强组件\r\n-\r\n-- [ ] `compose/useLazyLoadController`：根据 props 启用对应 features，并编排顺序\r\n-- [ ] `compose/LazyLoadImage.tsx`：提供分层 props；兼容 `LazyImage` 常用 props\r\n-- [ ] `ui/LoadingIndicator.tsx`、`ui/ErrorFallback.tsx`：默认实现与可替换插槽\r\n-- [ ] `index.ts` 汇总导出：Core/Enhanced/hooks/types/config\r\n-\r\n-### 阶段 4：类型与配置\r\n-\r\n-- [ ] `types/index.ts`：拆分 Base/Lazy/LQIP/Memory/Scroll/Cache/Concurrency props\r\n-- [ ] `config/config.ts`：默认值与 `getConfig`/`setGlobalConfig`/`resetGlobalConfig`\r\n-- [ ] 严格类型约束：导出只读配置、避免 `any` 与断言\r\n-\r\n-### 阶段 5：验证与迁移\r\n-\r\n-- [ ] 新增 Demo：基础懒加载、LQIP、并发对比、内存回收、滚动优化\r\n-- [ ] 渐进迁移：提供 `CompatLazyImage`（包装新实现，透传常用 props）\r\n-- [ ] 文档：README 新旧对比、迁移指南、API 参照表\r\n-\r\n-## 风险与对策\r\n-\r\n-- IO 回归风险 → 单测覆盖 rootMargin/threshold/unobserve 组合\r\n-- Worker 兼容性 → 降级主线程，任务取消与超时兜底\r\n-- IndexedDB 失效 → 自动回退网络直读与内存缓存\r\n-- 类型漂移 → 先定义 types 与 config，再实现功能，保证对齐\r\n-\r\n-## 里程碑验收标准\r\n-\r\n-- MVP：`LazyLoadImageCore` 通过 3 个 Demo（基础/错误/占位）\r\n-- 特性：LQIP/缓存/并发/内存/滚动 各自 Demo 可独立运行\r\n-- 组合：`LazyLoadImage` 覆盖主用场景；与旧版对照，行为一致\r\n-- 文档：迁移指南齐备，API 表清晰，新增示例截图\r\n\\ No newline at end of file\n"
                }
            ],
            "date": 1759231311144,
            "name": "Commit-0",
            "content": "# @LazyLoadImage 重构规划与实施清单\r\n\r\n## 目标\r\n- 输出全新、职责清晰、可组合的懒加载图片组件集 `src/components/@LazyLoadImage/`\r\n- 保持与现有 `LazyImage` 的功能等价（或可渐进启用高级功能）\r\n- 降低复杂度、统一公共逻辑、增强类型安全与可维护性\r\n\r\n## 新目录结构（提案）\r\n```\r\nsrc/components/@LazyLoadImage/\r\n  core/\r\n    LazyLoadImageCore.tsx           # 最小可用核心（IntersectionObserver + 基础加载）\r\n    useIntersection.ts              # 纯粹的 IO Hook（统一入口）\r\n    useImageReady.ts                # decode/ready 控制（onload+decode）\r\n\r\n  features/\r\n    lqip/\r\n      useLQIP.ts                    # LQIP 生成（可选，Worker/主线程降级）\r\n      workerPool.ts                 # 极简 Worker 管理（单实例）\r\n    cache/\r\n      useImageCache.ts              # IndexedDB/内存封装与URL创建\r\n    memory/\r\n      useMemoryManager.ts           # 简化内存管理（注册/清理/估算）\r\n    concurrency/\r\n      useConcurrency.ts             # 简化并发（可配置上限）\r\n    scroll/\r\n      useScrollManager.ts           # 滚动状态/动态 rootMargin\r\n\r\n  ui/\r\n    Placeholder.tsx                 # 默认灰阶渐变占位\r\n    LoadingIndicator.tsx            # 默认加载指示器\r\n    ErrorFallback.tsx               # 默认错误态\r\n    style.module.css                # 局部样式\r\n\r\n  compose/\r\n    useLazyLoadController.ts        # 组合器：协调 core + features\r\n    LazyLoadImage.tsx               # 提供分层 props 的组合版组件\r\n\r\n  types/\r\n    index.ts                        # 分层 props（Base/Lazy/LQIP/Memory/...）和公共类型\r\n\r\n  config/\r\n    config.ts                       # 默认配置与 getConfig/setGlobalConfig\r\n\r\n  index.ts                          # 对外导出入口\r\n```\r\n\r\n## 模块分层与职责\r\n- core: 仅负责观测进入视口与图片 ready（decode 完成）。\r\n- features: 每个子域单一职责、解耦可插拔。\r\n- compose: 将 core 与 features 编排为高阶能力；控制依赖与优先级。\r\n- ui: 默认 UI 组件可被替换；提供轻量样式。\r\n- types/config: 分类 props 与集中默认值，提升类型清晰度。\r\n\r\n## 旧→新模块映射\r\n- IntersectionObserver: `useInView`/`useInViewCore` → `core/useIntersection`\r\n- decode/ready: `LazyImage.tsx` onLoad+decode → `core/useImageReady`\r\n- LQIP: `useLQIPGenerator` + `utils/lqipWorkerPool` → `features/lqip/useLQIP` + `features/lqip/workerPool`\r\n- 缓存: `hooks/useImageCache.ts` → `features/cache/useImageCache`\r\n- 并发: `utils/concurrency.ts` → `features/concurrency/useConcurrency`\r\n- 内存: `hooks/useMemoryManager.ts` → `features/memory/useMemoryManager`\r\n- 滚动: `hooks/useScrollManager.ts` + 动态 rootMargin → `features/scroll/useScrollManager`\r\n- UI: `components/Placeholder.tsx`、`LoadingIndicator.tsx`、`ImageErrorHandler.tsx` → `ui/*`\r\n\r\n## 分阶段实施步骤\r\n\r\n### 阶段 0：脚手与结构\r\n- [ ] 创建目录 `src/components/@LazyLoadImage/`\r\n- [ ] 写入 `index.ts`、`types/index.ts`、`config/config.ts` 空骨架\r\n- [ ] 建立 `core/` 与 `ui/` 基础文件（空实现+TODO）\r\n\r\n### 阶段 1：核心最小可用（MVP）\r\n- [ ] `core/useIntersection`：统一 IO（root/rootRef/rootMargin/threshold/unobserve）\r\n- [ ] `core/useImageReady`：onload + decode 完整 ready 流程\r\n- [ ] `core/LazyLoadImageCore.tsx`：实现最小可用组件（占位/图片/错误态）\r\n- [ ] `ui/Placeholder.tsx` 与 `ui/style.module.css`：默认灰阶渐变\r\n- [ ] 导出 `index.ts` 最小 API：`LazyLoadImageCore`\r\n\r\n### 阶段 2：特性可插拔\r\n- [ ] `features/concurrency/useConcurrency`：简化并发（队列+maxConcurrency）\r\n- [ ] `features/cache/useImageCache`：整合 IndexedDB/内存/AbortController\r\n- [ ] `features/lqip/useLQIP`：缓存优先→Worker→主线程降级（支持任务取消）\r\n- [ ] `features/memory/useMemoryManager`：注册/估算/淘汰（LRU 简化）\r\n- [ ] `features/scroll/useScrollManager`：速度阈值+动态 rootMargin\r\n\r\n### 阶段 3：组合器与增强组件\r\n- [ ] `compose/useLazyLoadController`：根据 props 启用对应 features，并编排顺序\r\n- [ ] `compose/LazyLoadImage.tsx`：提供分层 props；兼容 `LazyImage` 常用 props\r\n- [ ] `ui/LoadingIndicator.tsx`、`ui/ErrorFallback.tsx`：默认实现与可替换插槽\r\n- [ ] `index.ts` 汇总导出：Core/Enhanced/hooks/types/config\r\n\r\n### 阶段 4：类型与配置\r\n- [ ] `types/index.ts`：拆分 Base/Lazy/LQIP/Memory/Scroll/Cache/Concurrency props\r\n- [ ] `config/config.ts`：默认值与 `getConfig`/`setGlobalConfig`/`resetGlobalConfig`\r\n- [ ] 严格类型约束：导出只读配置、避免 `any` 与断言\r\n\r\n### 阶段 5：验证与迁移\r\n- [ ] 新增 Demo：基础懒加载、LQIP、并发对比、内存回收、滚动优化\r\n- [ ] 渐进迁移：提供 `CompatLazyImage`（包装新实现，透传常用 props）\r\n- [ ] 文档：README 新旧对比、迁移指南、API 参照表\r\n\r\n## 风险与对策\r\n- IO 回归风险 → 单测覆盖 rootMargin/threshold/unobserve 组合\r\n- Worker 兼容性 → 降级主线程，任务取消与超时兜底\r\n- IndexedDB 失效 → 自动回退网络直读与内存缓存\r\n- 类型漂移 → 先定义 types 与 config，再实现功能，保证对齐\r\n\r\n## 里程碑验收标准\r\n- MVP：`LazyLoadImageCore` 通过 3 个 Demo（基础/错误/占位）\r\n- 特性：LQIP/缓存/并发/内存/滚动 各自 Demo 可独立运行\r\n- 组合：`LazyLoadImage` 覆盖主用场景；与旧版对照，行为一致\r\n- 文档：迁移指南齐备，API 表清晰，新增示例截图\r\n"
        }
    ]
}