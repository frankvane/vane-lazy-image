{
    "sourceFile": "README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1759221821492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759221943139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,17 +23,17 @@\n \n ### 基础用法\n \n ```tsx\n-import { LazyImage } from 'vane-lazy-image';\n-import 'vane-lazy-image/style.css';\n+import { LazyImage } from \"vane-lazy-image\";\n+import \"vane-lazy-image/style.css\";\n \n function App() {\n   return (\n     <LazyImage\n       src=\"https://example.com/image.jpg\"\n       alt=\"描述\"\n-      style={{ width: '100%', height: '200px' }}\n+      style={{ width: \"100%\", height: \"200px\" }}\n     />\n   );\n }\n ```\n@@ -60,61 +60,61 @@\n   enableLQIP={true}\n   enableLQIPWorker={true}\n   workerOptions={{\n     maxWorkers: 2,\n-    taskTimeout: 30000\n+    taskTimeout: 30000,\n   }}\n />\n ```\n \n ## 📚 API 文档\n \n ### LazyImage Props\n \n-| 属性 | 类型 | 默认值 | 描述 |\n-|------|------|--------|------|\n-| `src` | `string` | - | 图片源地址 |\n-| `alt` | `string` | - | 图片描述 |\n-| `enableLQIP` | `boolean` | `false` | 是否启用 LQIP |\n-| `enableLQIPWorker` | `boolean` | `true` | 是否使用 Web Worker 处理 LQIP |\n-| `lqipWidth` | `number` | `24` | LQIP 宽度 |\n-| `lqipQuality` | `number` | `0.6` | LQIP 质量 (0-1) |\n-| `showLoadingIndicator` | `boolean` | `false` | 是否显示加载指示器 |\n-| `rootMargin` | `string` | `\"50px\"` | 触发加载的边距 |\n-| `threshold` | `number` | `0.1` | 触发阈值 |\n-| `priority` | `\"low\" \\| \"medium\" \\| \"high\"` | `\"medium\"` | 加载优先级 |\n-| `enableCache` | `boolean` | `true` | 是否启用缓存 |\n-| `retryCount` | `number` | `3` | 重试次数 |\n-| `fallbackSrc` | `string` | - | 备用图片源 |\n-| `onLoad` | `() => void` | - | 加载完成回调 |\n-| `onError` | `() => void` | - | 加载错误回调 |\n+| 属性                   | 类型                          | 默认值     | 描述                          |\n+| ---------------------- | ----------------------------- | ---------- | ----------------------------- |\n+| `src`                  | `string`                      | -          | 图片源地址                    |\n+| `alt`                  | `string`                      | -          | 图片描述                      |\n+| `enableLQIP`           | `boolean`                     | `false`    | 是否启用 LQIP                 |\n+| `enableLQIPWorker`     | `boolean`                     | `true`     | 是否使用 Web Worker 处理 LQIP |\n+| `lqipWidth`            | `number`                      | `24`       | LQIP 宽度                     |\n+| `lqipQuality`          | `number`                      | `0.6`      | LQIP 质量 (0-1)               |\n+| `showLoadingIndicator` | `boolean`                     | `false`    | 是否显示加载指示器            |\n+| `rootMargin`           | `string`                      | `\"50px\"`   | 触发加载的边距                |\n+| `threshold`            | `number`                      | `0.1`      | 触发阈值                      |\n+| `priority`             | `\"low\" \\| \"medium\" \\| \"high\"` | `\"medium\"` | 加载优先级                    |\n+| `enableCache`          | `boolean`                     | `true`     | 是否启用缓存                  |\n+| `retryCount`           | `number`                      | `3`        | 重试次数                      |\n+| `fallbackSrc`          | `string`                      | -          | 备用图片源                    |\n+| `onLoad`               | `() => void`                  | -          | 加载完成回调                  |\n+| `onError`              | `() => void`                  | -          | 加载错误回调                  |\n \n ### 高级用法\n \n #### 虚拟滚动\n \n ```tsx\n-import { LazyImageEnhanced } from 'vane-lazy-image';\n+import { LazyImageEnhanced } from \"vane-lazy-image\";\n \n <LazyImageEnhanced\n   src=\"image.jpg\"\n   alt=\"描述\"\n   virtualScroll={{\n     enabled: true,\n     itemHeight: 200,\n-    containerHeight: 600\n+    containerHeight: 600,\n   }}\n-/>\n+/>;\n ```\n \n #### 自定义 Hook\n \n ```tsx\n import {\n   useImageCache,\n   useMemoryManager,\n-  useScrollManager\n-} from 'vane-lazy-image';\n+  useScrollManager,\n+} from \"vane-lazy-image\";\n \n function MyComponent() {\n   const imageCache = useImageCache();\n   const memoryManager = useMemoryManager();\n@@ -128,18 +128,18 @@\n \n ```tsx\n import {\n   detectWorkerCapabilities,\n-  getRecommendedWorkerConfig\n-} from 'vane-lazy-image';\n+  getRecommendedWorkerConfig,\n+} from \"vane-lazy-image\";\n \n // 检测浏览器能力\n const capabilities = detectWorkerCapabilities();\n-console.log('Worker 支持:', capabilities.hasWorker);\n+console.log(\"Worker 支持:\", capabilities.hasWorker);\n \n // 获取推荐配置\n const config = getRecommendedWorkerConfig();\n-console.log('推荐配置:', config);\n+console.log(\"推荐配置:\", config);\n ```\n \n ## 🎨 样式定制\n \n@@ -157,28 +157,28 @@\n \n ### 全局配置\n \n ```tsx\n-import { LazyImageConfig } from 'vane-lazy-image';\n+import { LazyImageConfig } from \"vane-lazy-image\";\n \n LazyImageConfig.setConfig({\n-  rootMargin: '100px',\n+  rootMargin: \"100px\",\n   threshold: 0.1,\n   lqipWidth: 32,\n   lqipQuality: 0.7,\n-  retryCount: 5\n+  retryCount: 5,\n });\n ```\n \n ### Worker 配置\n \n ```tsx\n-import { getLQIPWorkerPool } from 'vane-lazy-image';\n+import { getLQIPWorkerPool } from \"vane-lazy-image\";\n \n const workerPool = getLQIPWorkerPool({\n   maxWorkers: 4,\n   taskTimeout: 30000,\n-  enableFallback: true\n+  enableFallback: true,\n });\n ```\n \n ## 📱 浏览器支持\n@@ -207,5 +207,5 @@\n 欢迎提交 Issue 和 Pull Request！\n \n ## 📞 支持\n \n-如有问题，请提交 [Issue](https://github.com/your-username/vane-lazy-image/issues)。\n\\ No newline at end of file\n+如有问题，请提交 [Issue](https://github.com/your-username/vane-lazy-image/issues)。\n"
                },
                {
                    "date": 1759491918982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,211 +1,135 @@\n # vane-lazy-image\n \n-高性能的 React 图片懒加载组件，支持 LQIP、Web Worker、虚拟滚动等功能。\n+面向演示与二次开发的 React 图片懒加载与插件系统仓库。当前项目包含两套实现：\n \n-## ✨ 特性\n+- `LazyLoadImagePlugin`：基于“核心组件 + 插件”的扩展体系（推荐）。\n+- `LazyImage`/`LazyLoadImage`：早期实现，保留用于对比和示例。\n \n-- 🚀 **高性能懒加载** - 基于 Intersection Observer API\n-- 🎨 **LQIP 支持** - 低质量图像占位符，提升用户体验\n-- ⚡ **Web Worker** - 图片处理不阻塞主线程\n-- 📱 **虚拟滚动** - 支持大量图片的虚拟滚动\n-- 🎯 **智能缓存** - 多级缓存策略，支持 IndexedDB\n-- 🔧 **TypeScript** - 完整的类型定义\n-- 📦 **Tree Shaking** - 支持按需导入\n-- 🎛️ **高度可配置** - 丰富的配置选项\n+本文档面向本仓库的开发者与演示使用者，聚焦于插件化系统的本地运行、插件编写与示例说明。\n \n-## 📦 安装\n+## 功能特性\n \n-```bash\n-npm install vane-lazy-image\n-```\n+- 核心组件 `LazyLoadImageCore`：极简职责（IO 监听、加载状态、生命周期）。\n+- 插件系统：通过 `withPlugins` 组合叠加能力（进度、骨架、信息蒙层、滚动空闲、悬停预取等）。\n+- 统一的插件上下文 `PluginContext`，提供 `containerRef`、`imageRef`、状态与事件总线。\n+- 组合示例页丰富，便于快速验证交互与性能表现。\n \n-## 🚀 快速开始\n+## 本地开发\n \n-### 基础用法\n+- 启动开发服务器：\n+  - `npm run dev`\n+  - 终端会输出本地预览地址（通常为 `http://localhost:3000`，端口占用时自动切换为 `3001`）。\n+- 构建：\n+  - `npm run build:app` 生成演示站点。\n+  - `npm run build:lib` 生成库产物（`dist/`）。\n+- 预览构建结果：\n+  - `npm run preview:app`\n \n-```tsx\n-import { LazyImage } from \"vane-lazy-image\";\n-import \"vane-lazy-image/style.css\";\n+## 目录结构（关键部分）\n \n-function App() {\n-  return (\n-    <LazyImage\n-      src=\"https://example.com/image.jpg\"\n-      alt=\"描述\"\n-      style={{ width: \"100%\", height: \"200px\" }}\n-    />\n-  );\n-}\n-```\n+- `src/components/LazyLoadImagePlugin/core/LazyLoadImageCore.tsx`：核心组件。\n+- `src/components/LazyLoadImagePlugin/plugins/`：插件系统（管理器、上下文、桶式导出）。\n+- `src/components/LazyLoadImagePlugin/custom-plugins/`：演示用插件实现（进度、骨架、信息蒙层、Hover 预取、滚动空闲等）。\n+- `src/pages/LazyLoadImagePlugin/`：各类演示页面与组合示例。\n \n-### 启用 LQIP\n+## 快速上手（插件系统）\n \n-```tsx\n-<LazyImage\n-  src=\"https://example.com/large-image.jpg\"\n-  alt=\"描述\"\n-  enableLQIP={true}\n-  lqipWidth={24}\n-  lqipQuality={0.6}\n-  showLoadingIndicator={true}\n-/>\n-```\n+在演示页面中通过桶式导出组合插件：\n \n-### 使用 Web Worker\n-\n ```tsx\n-<LazyImage\n-  src=\"https://example.com/image.jpg\"\n-  alt=\"描述\"\n-  enableLQIP={true}\n-  enableLQIPWorker={true}\n-  workerOptions={{\n-    maxWorkers: 2,\n-    taskTimeout: 30000,\n-  }}\n-/>\n-```\n-\n-## 📚 API 文档\n-\n-### LazyImage Props\n-\n-| 属性                   | 类型                          | 默认值     | 描述                          |\n-| ---------------------- | ----------------------------- | ---------- | ----------------------------- |\n-| `src`                  | `string`                      | -          | 图片源地址                    |\n-| `alt`                  | `string`                      | -          | 图片描述                      |\n-| `enableLQIP`           | `boolean`                     | `false`    | 是否启用 LQIP                 |\n-| `enableLQIPWorker`     | `boolean`                     | `true`     | 是否使用 Web Worker 处理 LQIP |\n-| `lqipWidth`            | `number`                      | `24`       | LQIP 宽度                     |\n-| `lqipQuality`          | `number`                      | `0.6`      | LQIP 质量 (0-1)               |\n-| `showLoadingIndicator` | `boolean`                     | `false`    | 是否显示加载指示器            |\n-| `rootMargin`           | `string`                      | `\"50px\"`   | 触发加载的边距                |\n-| `threshold`            | `number`                      | `0.1`      | 触发阈值                      |\n-| `priority`             | `\"low\" \\| \"medium\" \\| \"high\"` | `\"medium\"` | 加载优先级                    |\n-| `enableCache`          | `boolean`                     | `true`     | 是否启用缓存                  |\n-| `retryCount`           | `number`                      | `3`        | 重试次数                      |\n-| `fallbackSrc`          | `string`                      | -          | 备用图片源                    |\n-| `onLoad`               | `() => void`                  | -          | 加载完成回调                  |\n-| `onError`              | `() => void`                  | -          | 加载错误回调                  |\n-\n-### 高级用法\n-\n-#### 虚拟滚动\n-\n-```tsx\n-import { LazyImageEnhanced } from \"vane-lazy-image\";\n-\n-<LazyImageEnhanced\n-  src=\"image.jpg\"\n-  alt=\"描述\"\n-  virtualScroll={{\n-    enabled: true,\n-    itemHeight: 200,\n-    containerHeight: 600,\n-  }}\n-/>;\n-```\n-\n-#### 自定义 Hook\n-\n-```tsx\n+import React from \"react\";\n+import LazyLoadImageCore from \"../../components/LazyLoadImagePlugin/core/LazyLoadImageCore\";\n import {\n-  useImageCache,\n-  useMemoryManager,\n-  useScrollManager,\n-} from \"vane-lazy-image\";\n+  withPlugins,\n+  createProgressOverlayPlugin,\n+  createSkeletonPlugin,\n+  createOverlayInfoPlugin,\n+} from \"../../components/LazyLoadImagePlugin/plugins\";\n \n-function MyComponent() {\n-  const imageCache = useImageCache();\n-  const memoryManager = useMemoryManager();\n-  const scrollManager = useScrollManager();\n+const LazyImage = withPlugins(LazyLoadImageCore as any, [\n+  createProgressOverlayPlugin({ showWhen: \"loading\", height: 3, color: \"#4a90e2\", showPercentText: true }),\n+  createSkeletonPlugin({ type: \"shimmer\", showWhen: \"loading\", borderRadius: 6, zIndex: 1 }),\n+  createOverlayInfoPlugin({ content: () => \"Loading\", position: \"bottom\", showWhen: \"loading\" }),\n+]);\n \n-  // 使用缓存和内存管理功能\n+export default function Example() {\n+  return (\n+    <div style={{ width: 360, height: 240 }}>\n+      <LazyImage\n+        src=\"https://picsum.photos/seed/readme-demo/800/600\"\n+        loading=\"lazy\"\n+        imageStyle={{ width: \"100%\", height: \"100%\", objectFit: \"cover\" }}\n+      />\n+    </div>\n+  );\n }\n ```\n \n-#### Worker 检测和配置\n+更多组合示例可参考：\n \n-```tsx\n-import {\n-  detectWorkerCapabilities,\n-  getRecommendedWorkerConfig,\n-} from \"vane-lazy-image\";\n+- `ComboInteractionOverlayDemo.tsx`（视口感知 + 防抖 + 悬停预取 + 滚动空闲 + 进度 + 信息蒙层 + 骨架）。\n+- `ScrollIdleDemo.tsx`、`ProgressOverlayDemo.tsx`、`SkeletonDemo.tsx` 等。\n \n-// 检测浏览器能力\n-const capabilities = detectWorkerCapabilities();\n-console.log(\"Worker 支持:\", capabilities.hasWorker);\n+## 常用插件\n \n-// 获取推荐配置\n-const config = getRecommendedWorkerConfig();\n-console.log(\"推荐配置:\", config);\n-```\n+- `createProgressOverlayPlugin`：显示加载进度与百分比文本。\n+- `createSkeletonPlugin`：骨架屏遮罩，支持 `shimmer`。\n+- `createOverlayInfoPlugin`：顶部/底部/居中信息蒙层，可设定触发与展示时机。\n+- `createHoverPrefetchPlugin`：悬停时为后续资源插入 `link[rel=\"preload\"]`。\n+- `createScrollIdlePlugin`：进入视口后等待滚动空闲再调度请求。\n+- `createViewportAwarePlugin` / `createViewportDebouncePlugin`：视口状态增强与防抖。\n+- `createPriorityLoadingPlugin`：调整浏览器的 `loading` 与 `rootMargin` 策略。\n \n-## 🎨 样式定制\n+插件完整列表见 `src/components/LazyLoadImagePlugin/custom-plugins/` 与 `plugins/index.ts` 桶式导出。\n \n-组件提供了 CSS 变量，可以轻松定制样式：\n+## 编写一个插件\n \n-```css\n-.lazy-image-container {\n-  --lazy-image-border-radius: 8px;\n-  --lazy-image-transition-duration: 300ms;\n-  --lazy-image-skeleton-color: #f0f0f0;\n-}\n-```\n+插件通过工厂函数返回 `LazyImagePlugin`，在生命周期钩子中访问上下文：\n \n-## 🔧 配置选项\n-\n-### 全局配置\n-\n ```tsx\n-import { LazyImageConfig } from \"vane-lazy-image\";\n+import type { LazyImagePlugin, PluginContext } from \"../../plugins/types\";\n \n-LazyImageConfig.setConfig({\n-  rootMargin: \"100px\",\n-  threshold: 0.1,\n-  lqipWidth: 32,\n-  lqipQuality: 0.7,\n-  retryCount: 5,\n-});\n+export function createXxxPlugin(): LazyImagePlugin {\n+  return {\n+    name: \"xxx\",\n+    version: \"1.0.0\",\n+    hooks: {\n+      onMount: (ctx: PluginContext) => {\n+        // 访问 ctx.containerRef / ctx.imageRef / ctx.bus / ctx.imageState\n+      },\n+      renderOverlay: (ctx: PluginContext) => null, // 需要覆盖层时使用\n+      onUnmount: () => {},\n+    },\n+  };\n+}\n ```\n \n-### Worker 配置\n+建议：\n \n-```tsx\n-import { getLQIPWorkerPool } from \"vane-lazy-image\";\n+- 渲染型插件应根据 `imageState` 控制时机，避免闪烁（如仅在 `isLoading` 或 `isLoaded` 时显示）。\n+- 与鼠标交互相关的覆盖层应注意 `pointerEvents`，以免拦截容器事件。\n \n-const workerPool = getLQIPWorkerPool({\n-  maxWorkers: 4,\n-  taskTimeout: 30000,\n-  enableFallback: true,\n-});\n-```\n+## 设计要点与近期改动\n \n-## 📱 浏览器支持\n+- 核心组件在加载阶段也渲染 `<img>`（透明），为避免其影响“Loading 文本”居中，现已改为绝对定位的居中叠层。\n+- 进度覆盖层的百分比文本也已调整为居中显示，便于统一视觉反馈。\n \n-- ✅ Chrome 64+\n-- ✅ Firefox 68+\n-- ✅ Safari 11.1+\n-- ✅ Edge 79+\n+## 脚本与命令\n \n-对于不支持的浏览器，组件会自动降级到兼容模式。\n+- `npm run dev`：开发模式，打开演示站点。\n+- `npm run build:app`：构建演示站点。\n+- `npm run build:lib`：构建库产物（`dist/`）。\n+- `npm run preview:app`：预览构建产物。\n+- `npm run lint`：静态检查。\n \n-## 🚀 性能优化\n+## 贡献与许可\n \n-1. **图片预加载** - 使用 `preload` 属性\n-2. **智能缓存** - 多级缓存策略\n-3. **并发控制** - 限制同时加载的图片数量\n-4. **内存管理** - 自动清理不用的图片缓存\n-5. **Web Worker** - 图片处理不阻塞主线程\n+- 欢迎提交 Issue 与 PR。\n+- 许可：MIT。\n \n-## 📄 许可证\n+## 相关文档\n \n-MIT License\n+项目包含大量架构与阶段性总结文档，位于 `LazyLoadImage-Docs/` 与 `LazyLoadImageDemo-Docs/`，可按需查阅：\n \n-## 🤝 贡献\n-\n-欢迎提交 Issue 和 Pull Request！\n-\n-## 📞 支持\n-\n-如有问题，请提交 [Issue](https://github.com/your-username/vane-lazy-image/issues)。\n+- `PLUGIN_SYSTEM_GUIDE.md`、`PLUGIN_CATALOG.md`、`PLUGIN_SYSTEM_SUMMARY.md`\n+- `PHASE_1_COMPLETE.md` ~ `PHASE_6_MEMORY_COMPLETE.md`（分阶段改进记录）\n"
                },
                {
                    "date": 1759491991274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,12 +19,11 @@\n - 启动开发服务器：\n   - `npm run dev`\n   - 终端会输出本地预览地址（通常为 `http://localhost:3000`，端口占用时自动切换为 `3001`）。\n - 构建：\n-  - `npm run build:app` 生成演示站点。\n-  - `npm run build:lib` 生成库产物（`dist/`）。\n+  - `npm run build` 生成演示站点（Vite 构建）。\n - 预览构建结果：\n-  - `npm run preview:app`\n+  - `npm run preview`\n \n ## 目录结构（关键部分）\n \n - `src/components/LazyLoadImagePlugin/core/LazyLoadImageCore.tsx`：核心组件。\n@@ -113,14 +112,71 @@\n \n - 核心组件在加载阶段也渲染 `<img>`（透明），为避免其影响“Loading 文本”居中，现已改为绝对定位的居中叠层。\n - 进度覆盖层的百分比文本也已调整为居中显示，便于统一视觉反馈。\n \n+## 架构与工作原理（详细）\n+\n+- 核心职责：\n+  - `LazyLoadImageCore` 负责：容器与图片 `ref` 管理、`IntersectionObserver` 监听、加载状态（`isIdle`/`isLoading`/`isLoaded`/`isError`）与基本生命周期。\n+  - 不承担 UI 展示与复杂交互，所有视觉与交互由插件注入。\n+- 插件组合：\n+  - 使用 `withPlugins(Core, [pluginA(), pluginB(), ...])` 将多个插件按顺序装配到核心组件。\n+  - 插件可以：渲染覆盖层（`renderOverlay`）、绑定事件（`onMount`）、清理资源（`onUnmount`）、响应总线事件。\n+- 上下文对象 `PluginContext`：\n+  - `containerRef`：图片外层容器，用于绑定事件与定位 Overlay。\n+  - `imageRef`：实际 `<img>` 元素引用。\n+  - `imageState`：当前加载相关状态（如 `isLoading`/`isLoaded`），部分插件也会在状态中维护进度。\n+  - `bus`：轻量事件总线，用于插件间通信（如进度更新、错误上报）。\n+- 生命周期钩子：\n+  - `onMount(ctx)`：插件挂载，适合添加事件监听与初始化。\n+  - `renderOverlay(ctx)`：返回覆盖层 React 节点，按需渲染（可根据 `imageState` 控制时机）。\n+  - `onUnmount()`：清理监听器与临时对象。\n+\n+## 使用建议与样式约定\n+\n+- 居中策略：\n+  - 加载阶段提示文本使用绝对定位的叠层居中（`position: absolute; inset: 0; display: flex; align-items: center; justify-content: center;`）。\n+  - 进度百分比文本同样采用居中，避免受到 `<img>` 自身尺寸与布局影响。\n+- 覆盖层层级：\n+  - 建议 `zIndex: 10` 起，骨架层略低，交互层（如错误提示或操作区）略高。\n+- 交互穿透：\n+  - 如需允许点击传递到图片或容器，请在 Overlay 使用 `pointerEvents: \"none\"`。\n+- 图片尺寸与裁切：\n+  - 建议对 `<img>` 使用 `objectFit: \"cover\"` 与固定容器尺寸，以防布局抖动。\n+\n+## 性能与最佳实践\n+\n+- 视口触发：\n+  - 通过 `rootMargin` 提前触发加载（如 `100px`），并结合 `threshold` 控制敏感度。\n+- 滚动空闲加载：\n+  - 使用 `createScrollIdlePlugin` 在进入视口后等待滚动空闲事件再发起请求，降低抖动。\n+- 预取优化：\n+  - 使用 `createHoverPrefetchPlugin({ target: \"container\", trigger: \"mouseenter\" })` 为后续资源插入 `preload`，移动端可切换触发为 `touchstart`。\n+- 视觉占位：\n+  - `createSkeletonPlugin` 提供 shimmer 骨架，避免白屏；同时可结合信息蒙层提示状态。\n+\n+## 排错指南（常见问题）\n+\n+- “Loading...” 文本不居中：\n+  - 原因：加载阶段透明 `<img>` 参与 flex 布局，使文本水平偏左。\n+  - 解决：使用绝对定位居中叠层（仓库已修复）。如仍异常，检查父容器样式是否覆盖。\n+- 悬停预取未生效：\n+  - 原因：事件目标设置或设备事件不匹配（触屏设备无 `mouseenter`）。\n+  - 解决：将 `target` 设为 `\"container\"` 并确保容器未被覆盖层拦截；触屏切换为 `touchstart`；确认未有遮罩捕获指针事件。\n+- 进度条不显示：\n+  - 原因：部分资源缺少可观察进度或被浏览器缓存命中。\n+  - 解决：在网络面板确认请求与响应头；必要时模拟慢网或禁用缓存。\n+\n+## 可访问性\n+\n+- 始终提供有效的 `alt` 文本，便于屏幕阅读器。\n+- 加载与错误状态建议以文本形式可选呈现（结合 `OverlayInfoPlugin`），提升可感知性。\n+\n ## 脚本与命令\n \n - `npm run dev`：开发模式，打开演示站点。\n-- `npm run build:app`：构建演示站点。\n-- `npm run build:lib`：构建库产物（`dist/`）。\n-- `npm run preview:app`：预览构建产物。\n+- `npm run build`：构建演示站点。\n+- `npm run preview`：预览构建产物。\n - `npm run lint`：静态检查。\n \n ## 贡献与许可\n \n"
                },
                {
                    "date": 1759492911518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,191 @@\n+# vane-lazy-image\n+\n+面向演示与二次开发的 React 图片懒加载与插件系统仓库。当前项目包含两套实现：\n+\n+- `LazyLoadImagePlugin`：基于“核心组件 + 插件”的扩展体系（推荐）。\n+- `LazyImage`/`LazyLoadImage`：早期实现，保留用于对比和示例。\n+\n+本文档面向本仓库的开发者与演示使用者，聚焦于插件化系统的本地运行、插件编写与示例说明。\n+\n+## 功能特性\n+\n+- 核心组件 `LazyLoadImageCore`：极简职责（IO 监听、加载状态、生命周期）。\n+- 插件系统：通过 `withPlugins` 组合叠加能力（进度、骨架、信息蒙层、滚动空闲、悬停预取等）。\n+- 统一的插件上下文 `PluginContext`，提供 `containerRef`、`imageRef`、状态与事件总线。\n+- 组合示例页丰富，便于快速验证交互与性能表现。\n+\n+## 本地开发\n+\n+- 启动开发服务器：\n+  - `npm run dev`\n+  - 终端会输出本地预览地址（通常为 `http://localhost:3000`，端口占用时自动切换为 `3001`）。\n+- 构建：\n+  - `npm run build` 生成演示站点（Vite 构建）。\n+- 预览构建结果：\n+  - `npm run preview`\n+\n+## 目录结构（关键部分）\n+\n+- `src/components/LazyLoadImagePlugin/core/LazyLoadImageCore.tsx`：核心组件。\n+- `src/components/LazyLoadImagePlugin/plugins/`：插件系统（管理器、上下文、桶式导出）。\n+- `src/components/LazyLoadImagePlugin/custom-plugins/`：演示用插件实现（进度、骨架、信息蒙层、Hover 预取、滚动空闲等）。\n+- `src/pages/LazyLoadImagePlugin/`：各类演示页面与组合示例。\n+\n+## 快速上手（插件系统）\n+\n+在演示页面中通过桶式导出组合插件：\n+\n+```tsx\n+import React from \"react\";\n+import LazyLoadImageCore from \"../../components/LazyLoadImagePlugin/core/LazyLoadImageCore\";\n+import {\n+  withPlugins,\n+  createProgressOverlayPlugin,\n+  createSkeletonPlugin,\n+  createOverlayInfoPlugin,\n+} from \"../../components/LazyLoadImagePlugin/plugins\";\n+\n+const LazyImage = withPlugins(LazyLoadImageCore as any, [\n+  createProgressOverlayPlugin({ showWhen: \"loading\", height: 3, color: \"#4a90e2\", showPercentText: true }),\n+  createSkeletonPlugin({ type: \"shimmer\", showWhen: \"loading\", borderRadius: 6, zIndex: 1 }),\n+  createOverlayInfoPlugin({ content: () => \"Loading\", position: \"bottom\", showWhen: \"loading\" }),\n+]);\n+\n+export default function Example() {\n+  return (\n+    <div style={{ width: 360, height: 240 }}>\n+      <LazyImage\n+        src=\"https://picsum.photos/seed/readme-demo/800/600\"\n+        loading=\"lazy\"\n+        imageStyle={{ width: \"100%\", height: \"100%\", objectFit: \"cover\" }}\n+      />\n+    </div>\n+  );\n+}\n+```\n+\n+更多组合示例可参考：\n+\n+- `ComboInteractionOverlayDemo.tsx`（视口感知 + 防抖 + 悬停预取 + 滚动空闲 + 进度 + 信息蒙层 + 骨架）。\n+- `ScrollIdleDemo.tsx`、`ProgressOverlayDemo.tsx`、`SkeletonDemo.tsx` 等。\n+\n+## 常用插件\n+\n+- `createProgressOverlayPlugin`：显示加载进度与百分比文本。\n+- `createSkeletonPlugin`：骨架屏遮罩，支持 `shimmer`。\n+- `createOverlayInfoPlugin`：顶部/底部/居中信息蒙层，可设定触发与展示时机。\n+- `createHoverPrefetchPlugin`：悬停时为后续资源插入 `link[rel=\"preload\"]`。\n+- `createScrollIdlePlugin`：进入视口后等待滚动空闲再调度请求。\n+- `createViewportAwarePlugin` / `createViewportDebouncePlugin`：视口状态增强与防抖。\n+- `createPriorityLoadingPlugin`：调整浏览器的 `loading` 与 `rootMargin` 策略。\n+\n+插件完整列表见 `src/components/LazyLoadImagePlugin/custom-plugins/` 与 `plugins/index.ts` 桶式导出。\n+\n+## 编写一个插件\n+\n+插件通过工厂函数返回 `LazyImagePlugin`，在生命周期钩子中访问上下文：\n+\n+```tsx\n+import type { LazyImagePlugin, PluginContext } from \"../../plugins/types\";\n+\n+export function createXxxPlugin(): LazyImagePlugin {\n+  return {\n+    name: \"xxx\",\n+    version: \"1.0.0\",\n+    hooks: {\n+      onMount: (ctx: PluginContext) => {\n+        // 访问 ctx.containerRef / ctx.imageRef / ctx.bus / ctx.imageState\n+      },\n+      renderOverlay: (ctx: PluginContext) => null, // 需要覆盖层时使用\n+      onUnmount: () => {},\n+    },\n+  };\n+}\n+```\n+\n+建议：\n+\n+- 渲染型插件应根据 `imageState` 控制时机，避免闪烁（如仅在 `isLoading` 或 `isLoaded` 时显示）。\n+- 与鼠标交互相关的覆盖层应注意 `pointerEvents`，以免拦截容器事件。\n+\n+## 设计要点与近期改动\n+\n+- 核心组件在加载阶段也渲染 `<img>`（透明），为避免其影响“Loading 文本”居中，现已改为绝对定位的居中叠层。\n+- 进度覆盖层的百分比文本也已调整为居中显示，便于统一视觉反馈。\n+\n+## 架构与工作原理（详细）\n+\n+- 核心职责：\n+  - `LazyLoadImageCore` 负责：容器与图片 `ref` 管理、`IntersectionObserver` 监听、加载状态（`isIdle`/`isLoading`/`isLoaded`/`isError`）与基本生命周期。\n+  - 不承担 UI 展示与复杂交互，所有视觉与交互由插件注入。\n+- 插件组合：\n+  - 使用 `withPlugins(Core, [pluginA(), pluginB(), ...])` 将多个插件按顺序装配到核心组件。\n+  - 插件可以：渲染覆盖层（`renderOverlay`）、绑定事件（`onMount`）、清理资源（`onUnmount`）、响应总线事件。\n+- 上下文对象 `PluginContext`：\n+  - `containerRef`：图片外层容器，用于绑定事件与定位 Overlay。\n+  - `imageRef`：实际 `<img>` 元素引用。\n+  - `imageState`：当前加载相关状态（如 `isLoading`/`isLoaded`），部分插件也会在状态中维护进度。\n+  - `bus`：轻量事件总线，用于插件间通信（如进度更新、错误上报）。\n+- 生命周期钩子：\n+  - `onMount(ctx)`：插件挂载，适合添加事件监听与初始化。\n+  - `renderOverlay(ctx)`：返回覆盖层 React 节点，按需渲染（可根据 `imageState` 控制时机）。\n+  - `onUnmount()`：清理监听器与临时对象。\n+\n+## 使用建议与样式约定\n+\n+- 居中策略：\n+  - 加载阶段提示文本使用绝对定位的叠层居中（`position: absolute; inset: 0; display: flex; align-items: center; justify-content: center;`）。\n+  - 进度百分比文本同样采用居中，避免受到 `<img>` 自身尺寸与布局影响。\n+- 覆盖层层级：\n+  - 建议 `zIndex: 10` 起，骨架层略低，交互层（如错误提示或操作区）略高。\n+- 交互穿透：\n+  - 如需允许点击传递到图片或容器，请在 Overlay 使用 `pointerEvents: \"none\"`。\n+- 图片尺寸与裁切：\n+  - 建议对 `<img>` 使用 `objectFit: \"cover\"` 与固定容器尺寸，以防布局抖动。\n+\n+## 性能与最佳实践\n+\n+- 视口触发：\n+  - 通过 `rootMargin` 提前触发加载（如 `100px`），并结合 `threshold` 控制敏感度。\n+- 滚动空闲加载：\n+  - 使用 `createScrollIdlePlugin` 在进入视口后等待滚动空闲事件再发起请求，降低抖动。\n+- 预取优化：\n+  - 使用 `createHoverPrefetchPlugin({ target: \"container\", trigger: \"mouseenter\" })` 为后续资源插入 `preload`，移动端可切换触发为 `touchstart`。\n+- 视觉占位：\n+  - `createSkeletonPlugin` 提供 shimmer 骨架，避免白屏；同时可结合信息蒙层提示状态。\n+\n+## 排错指南（常见问题）\n+\n+- “Loading...” 文本不居中：\n+  - 原因：加载阶段透明 `<img>` 参与 flex 布局，使文本水平偏左。\n+  - 解决：使用绝对定位居中叠层（仓库已修复）。如仍异常，检查父容器样式是否覆盖。\n+- 悬停预取未生效：\n+  - 原因：事件目标设置或设备事件不匹配（触屏设备无 `mouseenter`）。\n+  - 解决：将 `target` 设为 `\"container\"` 并确保容器未被覆盖层拦截；触屏切换为 `touchstart`；确认未有遮罩捕获指针事件。\n+- 进度条不显示：\n+  - 原因：部分资源缺少可观察进度或被浏览器缓存命中。\n+  - 解决：在网络面板确认请求与响应头；必要时模拟慢网或禁用缓存。\n+\n+## 可访问性\n+\n+- 始终提供有效的 `alt` 文本，便于屏幕阅读器。\n+- 加载与错误状态建议以文本形式可选呈现（结合 `OverlayInfoPlugin`），提升可感知性。\n+\n+## 脚本与命令\n+\n+- `npm run dev`：开发模式，打开演示站点。\n+- `npm run build`：构建演示站点。\n+- `npm run preview`：预览构建产物。\n+- `npm run lint`：静态检查。\n+\n+## 贡献与许可\n+\n+- 欢迎提交 Issue 与 PR。\n+- 许可：MIT。\n+\n+## 相关文档\n+\n+项目包含大量架构与阶段性总结文档，位于 `LazyLoadImage-Docs/` 与 `LazyLoadImageDemo-Docs/`，可按需查阅：\n+\n+- `PLUGIN_SYSTEM_GUIDE.md`、`PLUGIN_CATALOG.md`、`PLUGIN_SYSTEM_SUMMARY.md`\n+- `PHASE_1_COMPLETE.md` ~ `PHASE_6_MEMORY_COMPLETE.md`（分阶段改进记录）\n"
                },
                {
                    "date": 1759492969206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,202 +181,4 @@\n ## 贡献与许可\n \n - 欢迎提交 Issue 与 PR。\n - 许可：MIT。\n-\n-## 相关文档\n-\n-项目包含大量架构与阶段性总结文档，位于 `LazyLoadImage-Docs/` 与 `LazyLoadImageDemo-Docs/`，可按需查阅：\n-\n-- `PLUGIN_SYSTEM_GUIDE.md`、`PLUGIN_CATALOG.md`、`PLUGIN_SYSTEM_SUMMARY.md`\n-- `PHASE_1_COMPLETE.md` ~ `PHASE_6_MEMORY_COMPLETE.md`（分阶段改进记录）\n-# vane-lazy-image\n-\n-面向演示与二次开发的 React 图片懒加载与插件系统仓库。当前项目包含两套实现：\n-\n-- `LazyLoadImagePlugin`：基于“核心组件 + 插件”的扩展体系（推荐）。\n-- `LazyImage`/`LazyLoadImage`：早期实现，保留用于对比和示例。\n-\n-本文档面向本仓库的开发者与演示使用者，聚焦于插件化系统的本地运行、插件编写与示例说明。\n-\n-## 功能特性\n-\n-- 核心组件 `LazyLoadImageCore`：极简职责（IO 监听、加载状态、生命周期）。\n-- 插件系统：通过 `withPlugins` 组合叠加能力（进度、骨架、信息蒙层、滚动空闲、悬停预取等）。\n-- 统一的插件上下文 `PluginContext`，提供 `containerRef`、`imageRef`、状态与事件总线。\n-- 组合示例页丰富，便于快速验证交互与性能表现。\n-\n-## 本地开发\n-\n-- 启动开发服务器：\n-  - `npm run dev`\n-  - 终端会输出本地预览地址（通常为 `http://localhost:3000`，端口占用时自动切换为 `3001`）。\n-- 构建：\n-  - `npm run build` 生成演示站点（Vite 构建）。\n-- 预览构建结果：\n-  - `npm run preview`\n-\n-## 目录结构（关键部分）\n-\n-- `src/components/LazyLoadImagePlugin/core/LazyLoadImageCore.tsx`：核心组件。\n-- `src/components/LazyLoadImagePlugin/plugins/`：插件系统（管理器、上下文、桶式导出）。\n-- `src/components/LazyLoadImagePlugin/custom-plugins/`：演示用插件实现（进度、骨架、信息蒙层、Hover 预取、滚动空闲等）。\n-- `src/pages/LazyLoadImagePlugin/`：各类演示页面与组合示例。\n-\n-## 快速上手（插件系统）\n-\n-在演示页面中通过桶式导出组合插件：\n-\n-```tsx\n-import React from \"react\";\n-import LazyLoadImageCore from \"../../components/LazyLoadImagePlugin/core/LazyLoadImageCore\";\n-import {\n-  withPlugins,\n-  createProgressOverlayPlugin,\n-  createSkeletonPlugin,\n-  createOverlayInfoPlugin,\n-} from \"../../components/LazyLoadImagePlugin/plugins\";\n-\n-const LazyImage = withPlugins(LazyLoadImageCore as any, [\n-  createProgressOverlayPlugin({ showWhen: \"loading\", height: 3, color: \"#4a90e2\", showPercentText: true }),\n-  createSkeletonPlugin({ type: \"shimmer\", showWhen: \"loading\", borderRadius: 6, zIndex: 1 }),\n-  createOverlayInfoPlugin({ content: () => \"Loading\", position: \"bottom\", showWhen: \"loading\" }),\n-]);\n-\n-export default function Example() {\n-  return (\n-    <div style={{ width: 360, height: 240 }}>\n-      <LazyImage\n-        src=\"https://picsum.photos/seed/readme-demo/800/600\"\n-        loading=\"lazy\"\n-        imageStyle={{ width: \"100%\", height: \"100%\", objectFit: \"cover\" }}\n-      />\n-    </div>\n-  );\n-}\n-```\n-\n-更多组合示例可参考：\n-\n-- `ComboInteractionOverlayDemo.tsx`（视口感知 + 防抖 + 悬停预取 + 滚动空闲 + 进度 + 信息蒙层 + 骨架）。\n-- `ScrollIdleDemo.tsx`、`ProgressOverlayDemo.tsx`、`SkeletonDemo.tsx` 等。\n-\n-## 常用插件\n-\n-- `createProgressOverlayPlugin`：显示加载进度与百分比文本。\n-- `createSkeletonPlugin`：骨架屏遮罩，支持 `shimmer`。\n-- `createOverlayInfoPlugin`：顶部/底部/居中信息蒙层，可设定触发与展示时机。\n-- `createHoverPrefetchPlugin`：悬停时为后续资源插入 `link[rel=\"preload\"]`。\n-- `createScrollIdlePlugin`：进入视口后等待滚动空闲再调度请求。\n-- `createViewportAwarePlugin` / `createViewportDebouncePlugin`：视口状态增强与防抖。\n-- `createPriorityLoadingPlugin`：调整浏览器的 `loading` 与 `rootMargin` 策略。\n-\n-插件完整列表见 `src/components/LazyLoadImagePlugin/custom-plugins/` 与 `plugins/index.ts` 桶式导出。\n-\n-## 编写一个插件\n-\n-插件通过工厂函数返回 `LazyImagePlugin`，在生命周期钩子中访问上下文：\n-\n-```tsx\n-import type { LazyImagePlugin, PluginContext } from \"../../plugins/types\";\n-\n-export function createXxxPlugin(): LazyImagePlugin {\n-  return {\n-    name: \"xxx\",\n-    version: \"1.0.0\",\n-    hooks: {\n-      onMount: (ctx: PluginContext) => {\n-        // 访问 ctx.containerRef / ctx.imageRef / ctx.bus / ctx.imageState\n-      },\n-      renderOverlay: (ctx: PluginContext) => null, // 需要覆盖层时使用\n-      onUnmount: () => {},\n-    },\n-  };\n-}\n-```\n-\n-建议：\n-\n-- 渲染型插件应根据 `imageState` 控制时机，避免闪烁（如仅在 `isLoading` 或 `isLoaded` 时显示）。\n-- 与鼠标交互相关的覆盖层应注意 `pointerEvents`，以免拦截容器事件。\n-\n-## 设计要点与近期改动\n-\n-- 核心组件在加载阶段也渲染 `<img>`（透明），为避免其影响“Loading 文本”居中，现已改为绝对定位的居中叠层。\n-- 进度覆盖层的百分比文本也已调整为居中显示，便于统一视觉反馈。\n-\n-## 架构与工作原理（详细）\n-\n-- 核心职责：\n-  - `LazyLoadImageCore` 负责：容器与图片 `ref` 管理、`IntersectionObserver` 监听、加载状态（`isIdle`/`isLoading`/`isLoaded`/`isError`）与基本生命周期。\n-  - 不承担 UI 展示与复杂交互，所有视觉与交互由插件注入。\n-- 插件组合：\n-  - 使用 `withPlugins(Core, [pluginA(), pluginB(), ...])` 将多个插件按顺序装配到核心组件。\n-  - 插件可以：渲染覆盖层（`renderOverlay`）、绑定事件（`onMount`）、清理资源（`onUnmount`）、响应总线事件。\n-- 上下文对象 `PluginContext`：\n-  - `containerRef`：图片外层容器，用于绑定事件与定位 Overlay。\n-  - `imageRef`：实际 `<img>` 元素引用。\n-  - `imageState`：当前加载相关状态（如 `isLoading`/`isLoaded`），部分插件也会在状态中维护进度。\n-  - `bus`：轻量事件总线，用于插件间通信（如进度更新、错误上报）。\n-- 生命周期钩子：\n-  - `onMount(ctx)`：插件挂载，适合添加事件监听与初始化。\n-  - `renderOverlay(ctx)`：返回覆盖层 React 节点，按需渲染（可根据 `imageState` 控制时机）。\n-  - `onUnmount()`：清理监听器与临时对象。\n-\n-## 使用建议与样式约定\n-\n-- 居中策略：\n-  - 加载阶段提示文本使用绝对定位的叠层居中（`position: absolute; inset: 0; display: flex; align-items: center; justify-content: center;`）。\n-  - 进度百分比文本同样采用居中，避免受到 `<img>` 自身尺寸与布局影响。\n-- 覆盖层层级：\n-  - 建议 `zIndex: 10` 起，骨架层略低，交互层（如错误提示或操作区）略高。\n-- 交互穿透：\n-  - 如需允许点击传递到图片或容器，请在 Overlay 使用 `pointerEvents: \"none\"`。\n-- 图片尺寸与裁切：\n-  - 建议对 `<img>` 使用 `objectFit: \"cover\"` 与固定容器尺寸，以防布局抖动。\n-\n-## 性能与最佳实践\n-\n-- 视口触发：\n-  - 通过 `rootMargin` 提前触发加载（如 `100px`），并结合 `threshold` 控制敏感度。\n-- 滚动空闲加载：\n-  - 使用 `createScrollIdlePlugin` 在进入视口后等待滚动空闲事件再发起请求，降低抖动。\n-- 预取优化：\n-  - 使用 `createHoverPrefetchPlugin({ target: \"container\", trigger: \"mouseenter\" })` 为后续资源插入 `preload`，移动端可切换触发为 `touchstart`。\n-- 视觉占位：\n-  - `createSkeletonPlugin` 提供 shimmer 骨架，避免白屏；同时可结合信息蒙层提示状态。\n-\n-## 排错指南（常见问题）\n-\n-- “Loading...” 文本不居中：\n-  - 原因：加载阶段透明 `<img>` 参与 flex 布局，使文本水平偏左。\n-  - 解决：使用绝对定位居中叠层（仓库已修复）。如仍异常，检查父容器样式是否覆盖。\n-- 悬停预取未生效：\n-  - 原因：事件目标设置或设备事件不匹配（触屏设备无 `mouseenter`）。\n-  - 解决：将 `target` 设为 `\"container\"` 并确保容器未被覆盖层拦截；触屏切换为 `touchstart`；确认未有遮罩捕获指针事件。\n-- 进度条不显示：\n-  - 原因：部分资源缺少可观察进度或被浏览器缓存命中。\n-  - 解决：在网络面板确认请求与响应头；必要时模拟慢网或禁用缓存。\n-\n-## 可访问性\n-\n-- 始终提供有效的 `alt` 文本，便于屏幕阅读器。\n-- 加载与错误状态建议以文本形式可选呈现（结合 `OverlayInfoPlugin`），提升可感知性。\n-\n-## 脚本与命令\n-\n-- `npm run dev`：开发模式，打开演示站点。\n-- `npm run build`：构建演示站点。\n-- `npm run preview`：预览构建产物。\n-- `npm run lint`：静态检查。\n-\n-## 贡献与许可\n-\n-- 欢迎提交 Issue 与 PR。\n-- 许可：MIT。\n-\n-## 相关文档\n-\n-项目包含大量架构与阶段性总结文档，位于 `LazyLoadImage-Docs/` 与 `LazyLoadImageDemo-Docs/`，可按需查阅：\n-\n-- `PLUGIN_SYSTEM_GUIDE.md`、`PLUGIN_CATALOG.md`、`PLUGIN_SYSTEM_SUMMARY.md`\n-- `PHASE_1_COMPLETE.md` ~ `PHASE_6_MEMORY_COMPLETE.md`（分阶段改进记录）\n"
                },
                {
                    "date": 1759493167050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,121 @@\n+# vane-lazy-image\r\n+\r\n+## 项目名称\r\n+- vane-lazy-image（React 图片懒加载与插件系统）\r\n+\r\n+## 项目简介\r\n+- 一个面向演示与二次开发的图片懒加载组件与插件系统。核心组件只负责视口监听与状态管理，所有视觉与交互通过插件组合完成，便于扩展与快速实验不同加载策略与 UI 效果。\r\n+\r\n+## 安装指南\r\n+\r\n+本项目以演示与二次开发为主，推荐直接克隆并本地运行：\r\n+\r\n+```bash\r\n+git clone https://github.com/your-username/vane-lazy-image.git\r\n+cd vane-lazy-image\r\n+npm install\r\n+# 开发启动\r\n+npm run dev\r\n+```\r\n+\r\n+构建与预览：\r\n+\r\n+```bash\r\n+# 构建演示站点\r\n+npm run build\r\n+# 预览构建产物\r\n+npm run preview\r\n+```\r\n+\r\n+说明：当前仓库同时包含“演示站点”和“插件/核心组件源码”，用于对比不同组合与交互效果。若需集成到你的项目，可根据插件系统的设计在你的项目中实现类似结构，或将本仓库的相关组件按需迁移。\r\n+\r\n+## 快速入门\r\n+\r\n+以下示例展示如何以插件方式组合核心组件，渲染骨架、进度与信息蒙层：\r\n+\r\n+```tsx\r\n+import React from \"react\";\r\n+import LazyLoadImageCore from \"../../components/LazyLoadImagePlugin/core/LazyLoadImageCore\";\r\n+import {\r\n+  withPlugins,\r\n+  createProgressOverlayPlugin,\r\n+  createSkeletonPlugin,\r\n+  createOverlayInfoPlugin,\r\n+} from \"../../components/LazyLoadImagePlugin/plugins\";\r\n+\r\n+const LazyImage = withPlugins(LazyLoadImageCore as any, [\r\n+  createProgressOverlayPlugin({ showWhen: \"loading\", height: 3, color: \"#4a90e2\", showPercentText: true }),\r\n+  createSkeletonPlugin({ type: \"shimmer\", showWhen: \"loading\", borderRadius: 6, zIndex: 1 }),\r\n+  createOverlayInfoPlugin({ content: () => \"Loading\", position: \"bottom\", showWhen: \"loading\" }),\r\n+]);\r\n+\r\n+export default function Example() {\r\n+  return (\r\n+    <div style={{ width: 360, height: 240 }}>\r\n+      <LazyImage\r\n+        src=\"https://picsum.photos/seed/readme-demo/800/600\"\r\n+        loading=\"lazy\"\r\n+        imageStyle={{ width: \"100%\", height: \"100%\", objectFit: \"cover\" }}\r\n+      />\r\n+    </div>\r\n+  );\r\n+}\r\n+```\r\n+\r\n+## 插件列表\r\n+\r\n+以下为仓库内常用插件（详见 `src/components/LazyLoadImagePlugin/custom-plugins/` 与 `plugins/index.ts` 的桶式导出）：\r\n+\r\n+- `createProgressOverlayPlugin`：显示加载进度与百分比文本；支持进度条高度、颜色、显示时机配置。\r\n+- `createSkeletonPlugin`：骨架屏遮罩，支持 `shimmer` 效果与圆角、层级等配置。\r\n+- `createOverlayInfoPlugin`：顶部/底部/居中信息蒙层，可设定展示时机（如 `loading`/`loaded`/`error`）。\r\n+- `createHoverPrefetchPlugin`：悬停时为后续资源预插 `<link rel=\"preload\">`，可配置目标元素与触发事件。\r\n+- `createScrollIdlePlugin`：进入视口后等待滚动空闲再发起请求，降低滚动期间的抖动。\r\n+- `createViewportAwarePlugin`：增强视口状态感知，在插件环境中共享更细粒度的可见性数据。\r\n+- `createViewportDebouncePlugin`：对视口变更进行防抖处理，减少频繁切换导致的性能问题。\r\n+- `createPriorityLoadingPlugin`：调整浏览器 `loading` 与 `rootMargin` 策略，适配不同网络与性能环境。\r\n+- 其他演示插件：如错误提示、信息标签等可在 `custom-plugins/` 目录中查看具体实现。\r\n+\r\n+## 目录结构\r\n+\r\n+项目关键目录与文件说明：\r\n+\r\n+- `src/components/LazyLoadImagePlugin/core/LazyLoadImageCore.tsx`：核心组件，负责 IO 监听、状态管理与生命周期。\r\n+- `src/components/LazyLoadImagePlugin/plugins/`：插件系统（类型、上下文、组合方法 `withPlugins`、桶式导出）。\r\n+- `src/components/LazyLoadImagePlugin/custom-plugins/`：演示用插件集合（进度、骨架、信息蒙层、Hover 预取、滚动空闲等）。\r\n+- `src/pages/LazyLoadImagePlugin/`：各类演示页面与插件组合示例。\r\n+- `src/App.tsx` / `src/main.tsx`：演示站点入口。\r\n+- `vite.config.ts`：Vite 构建与开发配置。\r\n+- `package.json`：项目脚本与依赖管理。\r\n+\r\n+## 常见问题解答（FAQ）\r\n+\r\n+- 问：为什么“Loading...” 文本没有居中？\r\n+  - 答：加载阶段透明 `<img>` 参与 flex 布局可能影响文本居中。仓库已改为绝对定位的居中叠层（`position: absolute; inset: 0; display: flex; align-items: center; justify-content: center;`）。若仍不居中，请检查父容器样式是否覆盖。\r\n+\r\n+- 问：悬停预取不生效怎么办？\r\n+  - 答：检查 `target` 与设备事件是否匹配。触屏设备没有 `mouseenter`，可改为 `touchstart`；确保覆盖层未拦截指针（必要时设置 `pointerEvents: \"none\"`）。\r\n+\r\n+- 问：进度条或百分比文本未显示？\r\n+  - 答：资源可能被缓存命中或缺少可观察进度。使用浏览器网络面板关闭缓存或模拟慢网进行验证。\r\n+\r\n+- 问：本地端口冲突如何处理？\r\n+  - 答：`npm run dev` 会在占用时切换到其他端口（如 `3001`）。你也可以通过 Vite 配置修改默认端口。\r\n+\r\n+- 问：如何在图片上允许点击而不被覆盖层拦截？\r\n+  - 答：在覆盖层样式中设置 `pointerEvents: \"none\"`，让交互穿透到下层。\r\n+\r\n+## 依赖环境\r\n+\r\n+- `Node.js`：建议 `>= 18`\r\n+- `npm`：建议 `>= 9`\r\n+- 浏览器支持：现代浏览器（Chromium/Firefox/Safari/Edge）。老旧浏览器会自动使用降级策略（如不支持 IntersectionObserver 时的兼容方案）。\r\n+- 技术栈：`React`、`TypeScript`、`Vite`。\r\n+\r\n+## 许可证\r\n+\r\n+- MIT License（开源可商用，保留版权与许可声明）。\r\n+\r\n+---\r\n+\r\n+若需补充 API 类型表、插件配置的更详细示例、或演示截图，请告知具体需求，我将继续完善文档。 \r\n"
                },
                {
                    "date": 1759493261964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,20 +63,72 @@\n ```\r\n \r\n ## 插件列表\r\n \r\n-以下为仓库内常用插件（详见 `src/components/LazyLoadImagePlugin/custom-plugins/` 与 `plugins/index.ts` 的桶式导出）：\r\n+以下为桶式导出的完整插件清单（以 `custom-plugins/index.ts` 为准），并附一行简介。若需更详细配置示例，可参考 `src/components/LazyLoadImagePlugin/custom-plugins/PLUGIN_LIST.md` 与各插件源文件。\r\n \r\n-- `createProgressOverlayPlugin`：显示加载进度与百分比文本；支持进度条高度、颜色、显示时机配置。\r\n-- `createSkeletonPlugin`：骨架屏遮罩，支持 `shimmer` 效果与圆角、层级等配置。\r\n-- `createOverlayInfoPlugin`：顶部/底部/居中信息蒙层，可设定展示时机（如 `loading`/`loaded`/`error`）。\r\n-- `createHoverPrefetchPlugin`：悬停时为后续资源预插 `<link rel=\"preload\">`，可配置目标元素与触发事件。\r\n-- `createScrollIdlePlugin`：进入视口后等待滚动空闲再发起请求，降低滚动期间的抖动。\r\n-- `createViewportAwarePlugin`：增强视口状态感知，在插件环境中共享更细粒度的可见性数据。\r\n-- `createViewportDebouncePlugin`：对视口变更进行防抖处理，减少频繁切换导致的性能问题。\r\n-- `createPriorityLoadingPlugin`：调整浏览器 `loading` 与 `rootMargin` 策略，适配不同网络与性能环境。\r\n-- 其他演示插件：如错误提示、信息标签等可在 `custom-plugins/` 目录中查看具体实现。\r\n+- `createWatermarkPlugin`：为图片叠加水印文本或标识。\r\n+- `createBadgePlugin`：添加角标或状态标记用于强调信息。\r\n+- `createProgressOverlayPlugin`：加载进度条与百分比文本的覆盖层。\r\n+- `createSkeletonPlugin`：骨架屏遮罩，支持 shimmer 与圆角层级配置。\r\n+- `createOverlayInfoPlugin`：顶部/底部/居中信息蒙层，支持展示时机与交互。\r\n+- `createPreconnectPlugin`：为目标域名预连接，降低 DNS/TLS 建连延迟。\r\n+- `createAltTextPlugin`：统一或增强 alt 文本填充策略。\r\n+- `createPriorityLoadingPlugin`：控制 `loading`/`rootMargin` 等加载优先级策略。\r\n+- `createErrorOverlayPlugin`：加载失败时显示覆盖层提示与操作。\r\n+- `createErrorBadgePlugin`：在失败状态显示角标提醒。\r\n+- `createFallbackImagePlugin`：失败回退到备用图片源。\r\n+- `createRetryOnErrorPlugin`：错误重试与退避策略控制。\r\n+- `createEventLoggerPlugin`：打印或上报图片/插件运行事件。\r\n+- `createLqipPlugin`：低质量图像占位（LQIP）。\r\n+- `createBlurUpPlugin`：从模糊到清晰的渐进过渡效果。\r\n+- `createFadeInPlugin`：图片载入淡入动画。\r\n+- `createDominantColorPlugin`：提取主色用于背景占位。\r\n+- `createAspectRatioSpacerPlugin`：按长宽比占位以减少布局偏移。\r\n+- `createMemoryCachePlugin`：内存缓存策略。\r\n+- `createIDBCachePlugin`：IndexedDB 持久缓存策略。\r\n+- `createCachePrewarmPlugin`：缓存预热与链接提前建立。\r\n+- `createConcurrencyControlPlugin`：限制并发加载数量。\r\n+- `createScrollIdlePlugin`：视口进入后等待滚动空闲再加载。\r\n+- `createViewportDwellPlugin`：基于驻留时长的加载策略。\r\n+- `createGalleryPlugin`：大图/灯箱查看能力。\r\n+- `createFilterPlugin`：应用 CSS 滤镜，可配置悬停去滤镜。\r\n+- `createHoverZoomPlugin`：悬停放大或细节预览交互。\r\n+- `createCaptionPlugin`：图片说明文字叠层。\r\n+- `createBorderGlowPlugin`：边框发光视觉效果。\r\n+- `createSvgPlaceholderPlugin`：SVG 占位图渲染。\r\n+- `createWebPPlugin`：WebP 优先加载与回退策略。\r\n+- `createResponsivePlugin`：响应式 `srcset/sizes` 管理。\r\n+- `createSEOPlugin`：统一 alt/title/优先级与预加载策略。\r\n+- `createA11yPlugin`：可访问性增强（aria、焦点、描述）。\r\n+- `createPerformanceMonitorPlugin`：性能指标采集与显示。\r\n+- `createErrorTrackingPlugin`：错误追踪与上报。\r\n+- `createAuthPlugin`：鉴权/携带 token 的资源加载。\r\n+- `createAdaptiveQualityPlugin`：基于网络/设备的自适应质量。\r\n+- `createCDNFallbackPlugin`：CDN 失败回退主源。\r\n+- `createViewportAwarePlugin`：共享更细粒度的视口状态。\r\n+- `createTransitionPlugin`：统一管理加载过渡效果。\r\n+- `createDataSaverPlugin`：省流模式降级策略。\r\n+- `createImageOptimizationPlugin`：图片参数优化（尺寸、质量等）。\r\n+- `createAntiHotlinkPlugin`：防盗链策略（如 referer 校验）。\r\n+- `createNetworkAnalyticsPlugin`：网络事件与性能数据上报。\r\n+- `createPredictiveLoadingPlugin`：预测性预加载下一个资源。\r\n+- `createViewportDebouncePlugin`：视口变化防抖处理。\r\n+- `createUserBehaviorPlugin`：用户行为统计（驻留、点击、进入/离开）。\r\n+- `createParallaxPlugin`：视差滚动效果。\r\n+- `createColorExtractionPlugin`：颜色提取用于背景/主题。\r\n+- `createOfflinePlugin`：离线占位与状态提示。\r\n+- `createCropPlugin`：裁剪与展示区域控制。\r\n+- `createComparisonPlugin`：前后对比滑块交互。\r\n+- `createHoverPrefetchPlugin`：悬停插入 `preload`，提前获取资源。\r\n+- `createMemoryPressureAbortPlugin`：内存压力触发取消请求。\r\n+- `createDecodeAfterIdlePlugin`：空闲后再解码，提升主线程响应。\r\n+- `createBatteryAwarePlugin`：电量/省电模式适配。\r\n+- `createExifOrientationPlugin`：EXIF 方向矫正显示。\r\n+- `createRedactionPlugin`：敏感信息遮蔽/打码处理。\r\n \r\n+说明：目录中还包含个别实验型插件（如 `GifControlPlugin`、`SmartFaceCropPlugin`），可能未加入桶式导出，具体以 `custom-plugins/index.ts` 为准。\r\n+\r\n ## 目录结构\r\n \r\n 项目关键目录与文件说明：\r\n \r\n@@ -117,189 +169,5 @@\n - MIT License（开源可商用，保留版权与许可声明）。\r\n \r\n ---\r\n \r\n-若需补充 API 类型表、插件配置的更详细示例、或演示截图，请告知具体需求，我将继续完善文档。 \r\n-# vane-lazy-image\n-\n-面向演示与二次开发的 React 图片懒加载与插件系统仓库。当前项目包含两套实现：\n-\n-- `LazyLoadImagePlugin`：基于“核心组件 + 插件”的扩展体系（推荐）。\n-- `LazyImage`/`LazyLoadImage`：早期实现，保留用于对比和示例。\n-\n-本文档面向本仓库的开发者与演示使用者，聚焦于插件化系统的本地运行、插件编写与示例说明。\n-\n-## 功能特性\n-\n-- 核心组件 `LazyLoadImageCore`：极简职责（IO 监听、加载状态、生命周期）。\n-- 插件系统：通过 `withPlugins` 组合叠加能力（进度、骨架、信息蒙层、滚动空闲、悬停预取等）。\n-- 统一的插件上下文 `PluginContext`，提供 `containerRef`、`imageRef`、状态与事件总线。\n-- 组合示例页丰富，便于快速验证交互与性能表现。\n-\n-## 本地开发\n-\n-- 启动开发服务器：\n-  - `npm run dev`\n-  - 终端会输出本地预览地址（通常为 `http://localhost:3000`，端口占用时自动切换为 `3001`）。\n-- 构建：\n-  - `npm run build` 生成演示站点（Vite 构建）。\n-- 预览构建结果：\n-  - `npm run preview`\n-\n-## 目录结构（关键部分）\n-\n-- `src/components/LazyLoadImagePlugin/core/LazyLoadImageCore.tsx`：核心组件。\n-- `src/components/LazyLoadImagePlugin/plugins/`：插件系统（管理器、上下文、桶式导出）。\n-- `src/components/LazyLoadImagePlugin/custom-plugins/`：演示用插件实现（进度、骨架、信息蒙层、Hover 预取、滚动空闲等）。\n-- `src/pages/LazyLoadImagePlugin/`：各类演示页面与组合示例。\n-\n-## 快速上手（插件系统）\n-\n-在演示页面中通过桶式导出组合插件：\n-\n-```tsx\n-import React from \"react\";\n-import LazyLoadImageCore from \"../../components/LazyLoadImagePlugin/core/LazyLoadImageCore\";\n-import {\n-  withPlugins,\n-  createProgressOverlayPlugin,\n-  createSkeletonPlugin,\n-  createOverlayInfoPlugin,\n-} from \"../../components/LazyLoadImagePlugin/plugins\";\n-\n-const LazyImage = withPlugins(LazyLoadImageCore as any, [\n-  createProgressOverlayPlugin({ showWhen: \"loading\", height: 3, color: \"#4a90e2\", showPercentText: true }),\n-  createSkeletonPlugin({ type: \"shimmer\", showWhen: \"loading\", borderRadius: 6, zIndex: 1 }),\n-  createOverlayInfoPlugin({ content: () => \"Loading\", position: \"bottom\", showWhen: \"loading\" }),\n-]);\n-\n-export default function Example() {\n-  return (\n-    <div style={{ width: 360, height: 240 }}>\n-      <LazyImage\n-        src=\"https://picsum.photos/seed/readme-demo/800/600\"\n-        loading=\"lazy\"\n-        imageStyle={{ width: \"100%\", height: \"100%\", objectFit: \"cover\" }}\n-      />\n-    </div>\n-  );\n-}\n-```\n-\n-更多组合示例可参考：\n-\n-- `ComboInteractionOverlayDemo.tsx`（视口感知 + 防抖 + 悬停预取 + 滚动空闲 + 进度 + 信息蒙层 + 骨架）。\n-- `ScrollIdleDemo.tsx`、`ProgressOverlayDemo.tsx`、`SkeletonDemo.tsx` 等。\n-\n-## 常用插件\n-\n-- `createProgressOverlayPlugin`：显示加载进度与百分比文本。\n-- `createSkeletonPlugin`：骨架屏遮罩，支持 `shimmer`。\n-- `createOverlayInfoPlugin`：顶部/底部/居中信息蒙层，可设定触发与展示时机。\n-- `createHoverPrefetchPlugin`：悬停时为后续资源插入 `link[rel=\"preload\"]`。\n-- `createScrollIdlePlugin`：进入视口后等待滚动空闲再调度请求。\n-- `createViewportAwarePlugin` / `createViewportDebouncePlugin`：视口状态增强与防抖。\n-- `createPriorityLoadingPlugin`：调整浏览器的 `loading` 与 `rootMargin` 策略。\n-\n-插件完整列表见 `src/components/LazyLoadImagePlugin/custom-plugins/` 与 `plugins/index.ts` 桶式导出。\n-\n-## 编写一个插件\n-\n-插件通过工厂函数返回 `LazyImagePlugin`，在生命周期钩子中访问上下文：\n-\n-```tsx\n-import type { LazyImagePlugin, PluginContext } from \"../../plugins/types\";\n-\n-export function createXxxPlugin(): LazyImagePlugin {\n-  return {\n-    name: \"xxx\",\n-    version: \"1.0.0\",\n-    hooks: {\n-      onMount: (ctx: PluginContext) => {\n-        // 访问 ctx.containerRef / ctx.imageRef / ctx.bus / ctx.imageState\n-      },\n-      renderOverlay: (ctx: PluginContext) => null, // 需要覆盖层时使用\n-      onUnmount: () => {},\n-    },\n-  };\n-}\n-```\n-\n-建议：\n-\n-- 渲染型插件应根据 `imageState` 控制时机，避免闪烁（如仅在 `isLoading` 或 `isLoaded` 时显示）。\n-- 与鼠标交互相关的覆盖层应注意 `pointerEvents`，以免拦截容器事件。\n-\n-## 设计要点与近期改动\n-\n-- 核心组件在加载阶段也渲染 `<img>`（透明），为避免其影响“Loading 文本”居中，现已改为绝对定位的居中叠层。\n-- 进度覆盖层的百分比文本也已调整为居中显示，便于统一视觉反馈。\n-\n-## 架构与工作原理（详细）\n-\n-- 核心职责：\n-  - `LazyLoadImageCore` 负责：容器与图片 `ref` 管理、`IntersectionObserver` 监听、加载状态（`isIdle`/`isLoading`/`isLoaded`/`isError`）与基本生命周期。\n-  - 不承担 UI 展示与复杂交互，所有视觉与交互由插件注入。\n-- 插件组合：\n-  - 使用 `withPlugins(Core, [pluginA(), pluginB(), ...])` 将多个插件按顺序装配到核心组件。\n-  - 插件可以：渲染覆盖层（`renderOverlay`）、绑定事件（`onMount`）、清理资源（`onUnmount`）、响应总线事件。\n-- 上下文对象 `PluginContext`：\n-  - `containerRef`：图片外层容器，用于绑定事件与定位 Overlay。\n-  - `imageRef`：实际 `<img>` 元素引用。\n-  - `imageState`：当前加载相关状态（如 `isLoading`/`isLoaded`），部分插件也会在状态中维护进度。\n-  - `bus`：轻量事件总线，用于插件间通信（如进度更新、错误上报）。\n-- 生命周期钩子：\n-  - `onMount(ctx)`：插件挂载，适合添加事件监听与初始化。\n-  - `renderOverlay(ctx)`：返回覆盖层 React 节点，按需渲染（可根据 `imageState` 控制时机）。\n-  - `onUnmount()`：清理监听器与临时对象。\n-\n-## 使用建议与样式约定\n-\n-- 居中策略：\n-  - 加载阶段提示文本使用绝对定位的叠层居中（`position: absolute; inset: 0; display: flex; align-items: center; justify-content: center;`）。\n-  - 进度百分比文本同样采用居中，避免受到 `<img>` 自身尺寸与布局影响。\n-- 覆盖层层级：\n-  - 建议 `zIndex: 10` 起，骨架层略低，交互层（如错误提示或操作区）略高。\n-- 交互穿透：\n-  - 如需允许点击传递到图片或容器，请在 Overlay 使用 `pointerEvents: \"none\"`。\n-- 图片尺寸与裁切：\n-  - 建议对 `<img>` 使用 `objectFit: \"cover\"` 与固定容器尺寸，以防布局抖动。\n-\n-## 性能与最佳实践\n-\n-- 视口触发：\n-  - 通过 `rootMargin` 提前触发加载（如 `100px`），并结合 `threshold` 控制敏感度。\n-- 滚动空闲加载：\n-  - 使用 `createScrollIdlePlugin` 在进入视口后等待滚动空闲事件再发起请求，降低抖动。\n-- 预取优化：\n-  - 使用 `createHoverPrefetchPlugin({ target: \"container\", trigger: \"mouseenter\" })` 为后续资源插入 `preload`，移动端可切换触发为 `touchstart`。\n-- 视觉占位：\n-  - `createSkeletonPlugin` 提供 shimmer 骨架，避免白屏；同时可结合信息蒙层提示状态。\n-\n-## 排错指南（常见问题）\n-\n-- “Loading...” 文本不居中：\n-  - 原因：加载阶段透明 `<img>` 参与 flex 布局，使文本水平偏左。\n-  - 解决：使用绝对定位居中叠层（仓库已修复）。如仍异常，检查父容器样式是否覆盖。\n-- 悬停预取未生效：\n-  - 原因：事件目标设置或设备事件不匹配（触屏设备无 `mouseenter`）。\n-  - 解决：将 `target` 设为 `\"container\"` 并确保容器未被覆盖层拦截；触屏切换为 `touchstart`；确认未有遮罩捕获指针事件。\n-- 进度条不显示：\n-  - 原因：部分资源缺少可观察进度或被浏览器缓存命中。\n-  - 解决：在网络面板确认请求与响应头；必要时模拟慢网或禁用缓存。\n-\n-## 可访问性\n-\n-- 始终提供有效的 `alt` 文本，便于屏幕阅读器。\n-- 加载与错误状态建议以文本形式可选呈现（结合 `OverlayInfoPlugin`），提升可感知性。\n-\n-## 脚本与命令\n-\n-- `npm run dev`：开发模式，打开演示站点。\n-- `npm run build`：构建演示站点。\n-- `npm run preview`：预览构建产物。\n-- `npm run lint`：静态检查。\n-\n-## 贡献与许可\n-\n-- 欢迎提交 Issue 与 PR。\n-- 许可：MIT。\n+若需补充 API 类型表、插件配置的更详细示例、或演示截图，请告知具体需求，我将继续完善文档。\n\\ No newline at end of file\n"
                },
                {
                    "date": 1759493294304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,10 +125,8 @@\n - `createBatteryAwarePlugin`：电量/省电模式适配。\r\n - `createExifOrientationPlugin`：EXIF 方向矫正显示。\r\n - `createRedactionPlugin`：敏感信息遮蔽/打码处理。\r\n \r\n-说明：目录中还包含个别实验型插件（如 `GifControlPlugin`、`SmartFaceCropPlugin`），可能未加入桶式导出，具体以 `custom-plugins/index.ts` 为准。\r\n-\r\n ## 目录结构\r\n \r\n 项目关键目录与文件说明：\r\n \r\n"
                },
                {
                    "date": 1759497277592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \r\n 本项目以演示与二次开发为主，推荐直接克隆并本地运行：\r\n \r\n ```bash\r\n-git clone https://github.com/your-username/vane-lazy-image.git\r\n+git clone https://github.com/frankvane/vane-lazy-image.git\r\n cd vane-lazy-image\r\n npm install\r\n # 开发启动\r\n npm run dev\r\n"
                },
                {
                    "date": 1759547750281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,171 +1,645 @@\n-# vane-lazy-image\r\n+# 🖼️ Vane Lazy Image\r\n \r\n-## 项目名称\r\n-- vane-lazy-image（React 图片懒加载与插件系统）\r\n+<div align=\"center\">\r\n \r\n-## 项目简介\r\n-- 一个面向演示与二次开发的图片懒加载组件与插件系统。核心组件只负责视口监听与状态管理，所有视觉与交互通过插件组合完成，便于扩展与快速实验不同加载策略与 UI 效果。\r\n+一个功能强大、高度可扩展的 React 图片懒加载组件库\r\n \r\n-## 安装指南\r\n+[![NPM Version](https://img.shields.io/badge/npm-v1.0.9-blue)](https://www.npmjs.com/package/vane-lazy-image)\r\n+[![License](https://img.shields.io/badge/license-MIT-green)](./LICENSE)\r\n+[![TypeScript](https://img.shields.io/badge/TypeScript-5.x-blue)](https://www.typescriptlang.org/)\r\n+[![React](https://img.shields.io/badge/React-18.x-blue)](https://reactjs.org/)\r\n \r\n-本项目以演示与二次开发为主，推荐直接克隆并本地运行：\r\n+[在线演示](https://your-demo-url.com) | [快速开始](#快速开始) | [插件列表](#插件列表) | [API 文档](#api-文档)\r\n \r\n+</div>\r\n+\r\n+---\r\n+\r\n+## ✨ 核心特性\r\n+\r\n+### 🔌 **插件化架构**\r\n+- 基于事件总线的插件系统，支持灵活组合\r\n+- 60+ 内置插件，覆盖各种使用场景\r\n+- 易于扩展，支持自定义插件开发\r\n+\r\n+### 🎨 **丰富的视觉效果**\r\n+- 水印、模糊占位（BlurUp）、渐变过渡\r\n+- 滤镜、边框发光、视差滚动\r\n+- 骨架屏、进度条、信息叠层\r\n+- 支持自定义 CSS 效果组合\r\n+\r\n+### ⚡ **性能优化**\r\n+- 优先级加载控制\r\n+- 预连接（Preconnect）降低网络延迟\r\n+- 并发控制，避免资源竞争\r\n+- 内存缓存 + IndexedDB 持久化缓存\r\n+- 滚动空闲检测，优化用户体验\r\n+\r\n+### 🛡️ **错误处理**\r\n+- 智能重试机制（指数退避）\r\n+- CDN 回退策略\r\n+- 降级加载（Fallback Image）\r\n+- 离线缓存支持\r\n+- 错误追踪与上报\r\n+\r\n+### ♿ **可访问性与 SEO**\r\n+- ARIA 属性自动注入\r\n+- Alt 文本智能填充\r\n+- 结构化数据支持\r\n+- 搜索引擎优化\r\n+- 符合 WCAG 2.1 标准\r\n+\r\n+### 📊 **监控与分析**\r\n+- 性能指标采集\r\n+- 网络分析与上报\r\n+- 用户行为追踪\r\n+- 加载时序统计\r\n+- 自定义事件日志\r\n+\r\n+---\r\n+\r\n+## 📦 安装\r\n+\r\n+### NPM / Yarn / PNPM\r\n+\r\n ```bash\r\n+# npm\r\n+npm install vane-lazy-image\r\n+\r\n+# yarn\r\n+yarn add vane-lazy-image\r\n+\r\n+# pnpm\r\n+pnpm add vane-lazy-image\r\n+```\r\n+\r\n+### 本地开发\r\n+\r\n+如果您想本地运行演示站点或进行二次开发：\r\n+\r\n+```bash\r\n+# 克隆仓库\r\n git clone https://github.com/frankvane/vane-lazy-image.git\r\n+\r\n+# 进入项目目录\r\n cd vane-lazy-image\r\n+\r\n+# 安装依赖\r\n npm install\r\n-# 开发启动\r\n+\r\n+# 启动开发服务器\r\n npm run dev\r\n-```\r\n \r\n-构建与预览：\r\n+# 构建生产版本\r\n+npm run build\r\n \r\n-```bash\r\n-# 构建演示站点\r\n-npm run build\r\n # 预览构建产物\r\n npm run preview\r\n ```\r\n \r\n-说明：当前仓库同时包含“演示站点”和“插件/核心组件源码”，用于对比不同组合与交互效果。若需集成到你的项目，可根据插件系统的设计在你的项目中实现类似结构，或将本仓库的相关组件按需迁移。\r\n+---\r\n \r\n-## 快速入门\r\n+## 🚀 快速开始\r\n \r\n-以下示例展示如何以插件方式组合核心组件，渲染骨架、进度与信息蒙层：\r\n+### 基础使用\r\n \r\n+最简单的使用方式，不带任何插件：\r\n+\r\n ```tsx\r\n-import React from \"react\";\r\n-import LazyLoadImageCore from \"../../components/LazyLoadImagePlugin/core/LazyLoadImageCore\";\r\n+import { LazyLoadImageCore } from \"vane-lazy-image\";\r\n+\r\n+function App() {\r\n+  return (\r\n+    <div style={{ width: 480, height: 300 }}>\r\n+      <LazyLoadImageCore\r\n+        src=\"https://picsum.photos/800/600\"\r\n+        alt=\"示例图片\"\r\n+        loading=\"lazy\"\r\n+        containerStyle={{ width: \"100%\", height: \"100%\" }}\r\n+        imageStyle={{ width: \"100%\", height: \"100%\", objectFit: \"cover\" }}\r\n+      />\r\n+    </div>\r\n+  );\r\n+}\r\n+```\r\n+\r\n+### 使用插件\r\n+\r\n+通过 `withPlugins` 高阶组件组合多个插件：\r\n+\r\n+```tsx\r\n import {\r\n+  LazyLoadImageCore,\r\n   withPlugins,\r\n-  createProgressOverlayPlugin,\r\n-  createSkeletonPlugin,\r\n-  createOverlayInfoPlugin,\r\n-} from \"../../components/LazyLoadImagePlugin/plugins\";\r\n+  createWatermarkPlugin,\r\n+  createFadeInPlugin,\r\n+  createRetryOnErrorPlugin,\r\n+} from \"vane-lazy-image\";\r\n \r\n+// 组合插件\r\n const LazyImage = withPlugins(LazyLoadImageCore as any, [\r\n-  createProgressOverlayPlugin({ showWhen: \"loading\", height: 3, color: \"#4a90e2\", showPercentText: true }),\r\n-  createSkeletonPlugin({ type: \"shimmer\", showWhen: \"loading\", borderRadius: 6, zIndex: 1 }),\r\n-  createOverlayInfoPlugin({ content: () => \"Loading\", position: \"bottom\", showWhen: \"loading\" }),\r\n+  createWatermarkPlugin({\r\n+    text: \"VANE\",\r\n+    position: \"bottom-right\",\r\n+    opacity: 0.6,\r\n+  }),\r\n+  createFadeInPlugin({\r\n\\ No newline at end of file\n+    duration: 600,\r\n+    timingFunction: \"ease-in-out\",\r\n+  }),\r\n+  createRetryOnErrorPlugin({\r\n+    maxRetries: 3,\r\n+    retryDelay: 1000,\r\n+  }),\r\n ]);\r\n \r\n-export default function Example() {\r\n+function App() {\r\n   return (\r\n-    <div style={{ width: 360, height: 240 }}>\r\n+    <div style={{ width: 480, height: 300 }}>\r\n       <LazyImage\r\n-        src=\"https://picsum.photos/seed/readme-demo/800/600\"\r\n+        src=\"https://picsum.photos/800/600\"\r\n+        alt=\"带插件的图片\"\r\n         loading=\"lazy\"\r\n+        containerStyle={{ width: \"100%\", height: \"100%\" }}\r\n         imageStyle={{ width: \"100%\", height: \"100%\", objectFit: \"cover\" }}\r\n       />\r\n     </div>\r\n   );\r\n }\r\n ```\r\n \r\n-## 插件列表\r\n+### 组合示例：性能优化\r\n \r\n-以下为桶式导出的完整插件清单（以 `custom-plugins/index.ts` 为准），并附一行简介。若需更详细配置示例，可参考 `src/components/LazyLoadImagePlugin/custom-plugins/PLUGIN_LIST.md` 与各插件源文件。\r\n+```tsx\r\n+import {\r\n+  LazyLoadImageCore,\r\n+  withPlugins,\r\n+  createPreconnectPlugin,\r\n+  createPriorityLoadingPlugin,\r\n+  createImageOptimizationPlugin,\r\n+  createMemoryCachePlugin,\r\n+  createConcurrencyControlPlugin,\r\n+} from \"vane-lazy-image\";\r\n \r\n-- `createWatermarkPlugin`：为图片叠加水印文本或标识。\r\n-- `createBadgePlugin`：添加角标或状态标记用于强调信息。\r\n-- `createProgressOverlayPlugin`：加载进度条与百分比文本的覆盖层。\r\n-- `createSkeletonPlugin`：骨架屏遮罩，支持 shimmer 与圆角层级配置。\r\n-- `createOverlayInfoPlugin`：顶部/底部/居中信息蒙层，支持展示时机与交互。\r\n-- `createPreconnectPlugin`：为目标域名预连接，降低 DNS/TLS 建连延迟。\r\n-- `createAltTextPlugin`：统一或增强 alt 文本填充策略。\r\n-- `createPriorityLoadingPlugin`：控制 `loading`/`rootMargin` 等加载优先级策略。\r\n-- `createErrorOverlayPlugin`：加载失败时显示覆盖层提示与操作。\r\n-- `createErrorBadgePlugin`：在失败状态显示角标提醒。\r\n-- `createFallbackImagePlugin`：失败回退到备用图片源。\r\n-- `createRetryOnErrorPlugin`：错误重试与退避策略控制。\r\n-- `createEventLoggerPlugin`：打印或上报图片/插件运行事件。\r\n-- `createLqipPlugin`：低质量图像占位（LQIP）。\r\n-- `createBlurUpPlugin`：从模糊到清晰的渐进过渡效果。\r\n-- `createFadeInPlugin`：图片载入淡入动画。\r\n-- `createDominantColorPlugin`：提取主色用于背景占位。\r\n-- `createAspectRatioSpacerPlugin`：按长宽比占位以减少布局偏移。\r\n-- `createMemoryCachePlugin`：内存缓存策略。\r\n-- `createIDBCachePlugin`：IndexedDB 持久缓存策略。\r\n-- `createCachePrewarmPlugin`：缓存预热与链接提前建立。\r\n-- `createConcurrencyControlPlugin`：限制并发加载数量。\r\n-- `createScrollIdlePlugin`：视口进入后等待滚动空闲再加载。\r\n-- `createViewportDwellPlugin`：基于驻留时长的加载策略。\r\n-- `createGalleryPlugin`：大图/灯箱查看能力。\r\n-- `createFilterPlugin`：应用 CSS 滤镜，可配置悬停去滤镜。\r\n-- `createHoverZoomPlugin`：悬停放大或细节预览交互。\r\n-- `createCaptionPlugin`：图片说明文字叠层。\r\n-- `createBorderGlowPlugin`：边框发光视觉效果。\r\n-- `createSvgPlaceholderPlugin`：SVG 占位图渲染。\r\n-- `createWebPPlugin`：WebP 优先加载与回退策略。\r\n-- `createResponsivePlugin`：响应式 `srcset/sizes` 管理。\r\n-- `createSEOPlugin`：统一 alt/title/优先级与预加载策略。\r\n-- `createA11yPlugin`：可访问性增强（aria、焦点、描述）。\r\n-- `createPerformanceMonitorPlugin`：性能指标采集与显示。\r\n-- `createErrorTrackingPlugin`：错误追踪与上报。\r\n-- `createAuthPlugin`：鉴权/携带 token 的资源加载。\r\n-- `createAdaptiveQualityPlugin`：基于网络/设备的自适应质量。\r\n-- `createCDNFallbackPlugin`：CDN 失败回退主源。\r\n-- `createViewportAwarePlugin`：共享更细粒度的视口状态。\r\n-- `createTransitionPlugin`：统一管理加载过渡效果。\r\n-- `createDataSaverPlugin`：省流模式降级策略。\r\n-- `createImageOptimizationPlugin`：图片参数优化（尺寸、质量等）。\r\n-- `createAntiHotlinkPlugin`：防盗链策略（如 referer 校验）。\r\n-- `createNetworkAnalyticsPlugin`：网络事件与性能数据上报。\r\n-- `createPredictiveLoadingPlugin`：预测性预加载下一个资源。\r\n-- `createViewportDebouncePlugin`：视口变化防抖处理。\r\n-- `createUserBehaviorPlugin`：用户行为统计（驻留、点击、进入/离开）。\r\n-- `createParallaxPlugin`：视差滚动效果。\r\n-- `createColorExtractionPlugin`：颜色提取用于背景/主题。\r\n-- `createOfflinePlugin`：离线占位与状态提示。\r\n-- `createCropPlugin`：裁剪与展示区域控制。\r\n-- `createComparisonPlugin`：前后对比滑块交互。\r\n-- `createHoverPrefetchPlugin`：悬停插入 `preload`，提前获取资源。\r\n-- `createMemoryPressureAbortPlugin`：内存压力触发取消请求。\r\n-- `createDecodeAfterIdlePlugin`：空闲后再解码，提升主线程响应。\r\n-- `createBatteryAwarePlugin`：电量/省电模式适配。\r\n-- `createExifOrientationPlugin`：EXIF 方向矫正显示。\r\n-- `createRedactionPlugin`：敏感信息遮蔽/打码处理。\r\n+const LazyImage = withPlugins(LazyLoadImageCore as any, [\r\n+  createPreconnectPlugin({\r\n+    domains: [\"https://images.example.com\"],\r\n+  }),\r\n+  createPriorityLoadingPlugin({\r\n+    loading: \"lazy\",\r\n+    rootMargin: \"200px\",\r\n+  }),\r\n+  createImageOptimizationPlugin({\r\n+    widthParam: \"w\",\r\n+    qualityParam: \"q\",\r\n+    defaultQuality: 80,\r\n+  }),\r\n+  createMemoryCachePlugin({\r\n+    maxSize: 50,\r\n+  }),\r\n+  createConcurrencyControlPlugin({\r\n+    maxConcurrent: 4,\r\n+  }),\r\n+]);\r\n \r\n-## 目录结构\r\n+export default function PerformanceDemo() {\r\n+  const images = [\r\n+    \"https://images.example.com/photo1.jpg\",\r\n+    \"https://images.example.com/photo2.jpg\",\r\n+    \"https://images.example.com/photo3.jpg\",\r\n+  ];\r\n \r\n-项目关键目录与文件说明：\r\n+  return (\r\n+    <div style={{ display: \"grid\", gap: 16 }}>\r\n+      {images.map((src, i) => (\r\n+        <LazyImage\r\n+          key={i}\r\n+          src={src}\r\n+          alt={`图片 ${i + 1}`}\r\n+          loading=\"lazy\"\r\n+          containerStyle={{ width: 320, height: 200 }}\r\n+          imageStyle={{ width: \"100%\", height: \"100%\", objectFit: \"cover\" }}\r\n+        />\r\n+      ))}\r\n+    </div>\r\n+  );\r\n+}\r\n+```\r\n \r\n-- `src/components/LazyLoadImagePlugin/core/LazyLoadImageCore.tsx`：核心组件，负责 IO 监听、状态管理与生命周期。\r\n-- `src/components/LazyLoadImagePlugin/plugins/`：插件系统（类型、上下文、组合方法 `withPlugins`、桶式导出）。\r\n-- `src/components/LazyLoadImagePlugin/custom-plugins/`：演示用插件集合（进度、骨架、信息蒙层、Hover 预取、滚动空闲等）。\r\n-- `src/pages/LazyLoadImagePlugin/`：各类演示页面与插件组合示例。\r\n-- `src/App.tsx` / `src/main.tsx`：演示站点入口。\r\n-- `vite.config.ts`：Vite 构建与开发配置。\r\n-- `package.json`：项目脚本与依赖管理。\r\n+---\r\n \r\n-## 常见问题解答（FAQ）\r\n+## 📚 插件列表\r\n \r\n-- 问：为什么“Loading...” 文本没有居中？\r\n-  - 答：加载阶段透明 `<img>` 参与 flex 布局可能影响文本居中。仓库已改为绝对定位的居中叠层（`position: absolute; inset: 0; display: flex; align-items: center; justify-content: center;`）。若仍不居中，请检查父容器样式是否覆盖。\r\n+本项目提供 60+ 个开箱即用的插件，按功能分类如下：\r\n \r\n-- 问：悬停预取不生效怎么办？\r\n-  - 答：检查 `target` 与设备事件是否匹配。触屏设备没有 `mouseenter`，可改为 `touchstart`；确保覆盖层未拦截指针（必要时设置 `pointerEvents: \"none\"`）。\r\n+### 🎨 视觉与效果（15 个）\r\n \r\n-- 问：进度条或百分比文本未显示？\r\n-  - 答：资源可能被缓存命中或缺少可观察进度。使用浏览器网络面板关闭缓存或模拟慢网进行验证。\r\n+| 插件 | 说明 |\r\n+|------|------|\r\n+| `createWatermarkPlugin` | 为图片叠加水印文本或标识 |\r\n+| `createBadgePlugin` | 添加角标或状态标记 |\r\n+| `createProgressOverlayPlugin` | 加载进度条与百分比文本覆盖层 |\r\n+| `createSkeletonPlugin` | 骨架屏遮罩，支持 shimmer 动画 |\r\n+| `createOverlayInfoPlugin` | 信息蒙层，支持顶部/底部/居中显示 |\r\n+| `createBlurUpPlugin` | 从模糊到清晰的渐进过渡效果 |\r\n+| `createFadeInPlugin` | 图片淡入动画 |\r\n+| `createDominantColorPlugin` | 提取主色用于背景占位 |\r\n+| `createGalleryPlugin` | 大图/灯箱查看能力 |\r\n+| `createFilterPlugin` | CSS 滤镜，支持悬停交互 |\r\n+| `createCaptionPlugin` | 图片说明文字叠层 |\r\n+| `createBorderGlowPlugin` | 边框发光视觉效果 |\r\n+| `createParallaxPlugin` | 视差滚动效果 |\r\n+| `createColorExtractionPlugin` | 颜色提取用于背景/主题 |\r\n+| `createRedactionPlugin` | 敏感信息遮蔽/打码处理 |\r\n \r\n-- 问：本地端口冲突如何处理？\r\n-  - 答：`npm run dev` 会在占用时切换到其他端口（如 `3001`）。你也可以通过 Vite 配置修改默认端口。\r\n+### ⚡ 性能与网络（12 个）\r\n \r\n-- 问：如何在图片上允许点击而不被覆盖层拦截？\r\n-  - 答：在覆盖层样式中设置 `pointerEvents: \"none\"`，让交互穿透到下层。\r\n+| 插件 | 说明 |\r\n+|------|------|\r\n+| `createPreconnectPlugin` | 预连接目标域名，降低延迟 |\r\n+| `createPriorityLoadingPlugin` | 控制加载优先级策略 |\r\n+| `createCachePrewarmPlugin` | 缓存预热与链接提前建立 |\r\n+| `createMemoryCachePlugin` | 内存缓存策略 |\r\n+| `createIDBCachePlugin` | IndexedDB 持久缓存 |\r\n+| `createConcurrencyControlPlugin` | 限制并发加载数量 |\r\n+| `createScrollIdlePlugin` | 滚动空闲后再加载 |\r\n+| `createNetworkAnalyticsPlugin` | 网络事件与性能数据上报 |\r\n+| `createPredictiveLoadingPlugin` | 预测性预加载下一个资源 |\r\n+| `createDataSaverPlugin` | 省流模式降级策略 |\r\n+| `createImageOptimizationPlugin` | 图片参数优化（尺寸、质量） |\r\n+| `createHoverPrefetchPlugin` | 悬停预取资源 |\r\n \r\n-## 依赖环境\r\n+### 🛡️ 稳健性与错误处理（11 个）\r\n \r\n-- `Node.js`：建议 `>= 18`\r\n-- `npm`：建议 `>= 9`\r\n-- 浏览器支持：现代浏览器（Chromium/Firefox/Safari/Edge）。老旧浏览器会自动使用降级策略（如不支持 IntersectionObserver 时的兼容方案）。\r\n-- 技术栈：`React`、`TypeScript`、`Vite`。\r\n+| 插件 | 说明 |\r\n+|------|------|\r\n+| `createErrorBadgePlugin` | 失败状态显示角标 |\r\n+| `createErrorOverlayPlugin` | 加载失败覆盖层提示 |\r\n+| `createFallbackImagePlugin` | 失败回退到备用图片 |\r\n+| `createRetryOnErrorPlugin` | 错误重试与退避策略 |\r\n+| `createErrorTrackingPlugin` | 错误追踪与上报 |\r\n+| `createOfflinePlugin` | 离线占位与状态提示 |\r\n+| `createMemoryPressureAbortPlugin` | 内存压力触发取消请求 |\r\n+| `createDecodeAfterIdlePlugin` | 空闲后再解码 |\r\n+| `createAntiHotlinkPlugin` | 防盗链策略 |\r\n+| `createCDNFallbackPlugin` | CDN 失败回退主源 |\r\n+| `createAuthPlugin` | 鉴权/携带 token 的资源加载 |\r\n \r\n-## 许可证\r\n+### 👆 视口与交互（7 个）\r\n \r\n-- MIT License（开源可商用，保留版权与许可声明）。\r\n+| 插件 | 说明 |\r\n+|------|------|\r\n+| `createViewportAwarePlugin` | 细粒度的视口状态管理 |\r\n+| `createViewportDebouncePlugin` | 视口变化防抖处理 |\r\n+| `createViewportDwellPlugin` | 基于驻留时长的加载策略 |\r\n+| `createUserBehaviorPlugin` | 用户行为统计 |\r\n+| `createHoverZoomPlugin` | 悬停放大交互 |\r\n+| `createComparisonPlugin` | 前后对比滑块 |\r\n+| `createCropPlugin` | 裁剪与展示区域控制 |\r\n \r\n+### ♿ 可访问性与 SEO（6 个）\r\n+\r\n+| 插件 | 说明 |\r\n+|------|------|\r\n+| `createA11yPlugin` | 可访问性增强（ARIA、焦点） |\r\n+| `createAltTextPlugin` | Alt 文本智能填充 |\r\n+| `createSEOPlugin` | 搜索引擎优化 |\r\n+| `createAspectRatioSpacerPlugin` | 按长宽比占位减少布局偏移 |\r\n+| `createExifOrientationPlugin` | EXIF 方向矫正 |\r\n+| `createResponsivePlugin` | 响应式 srcset/sizes 管理 |\r\n+\r\n+### 🔧 其他（9 个）\r\n+\r\n+| 插件 | 说明 |\r\n+|------|------|\r\n+| `createEventLoggerPlugin` | 事件日志打印与上报 |\r\n+| `createPerformanceMonitorPlugin` | 性能指标采集 |\r\n+| `createLqipPlugin` | 低质量图像占位（LQIP） |\r\n+| `createSvgPlaceholderPlugin` | SVG 占位图渲染 |\r\n+| `createWebPPlugin` | WebP 优先加载与回退 |\r\n+| `createAdaptiveQualityPlugin` | 基于网络/设备的自适应质量 |\r\n+| `createBatteryAwarePlugin` | 电量/省电模式适配 |\r\n+| `createTransitionPlugin` | 统一管理加载过渡效果 |\r\n+| `FetchLoaderPlugin` | 自定义 Fetch 加载器 |\r\n+\r\n+> 💡 **提示**：所有插件都可以通过 `vane-lazy-image` 包导入。详细配置请参考 [API 文档](#api-文档) 或查看 [在线演示](https://your-demo-url.com)。\r\n+\r\n ---\r\n \r\n-若需补充 API 类型表、插件配置的更详细示例、或演示截图，请告知具体需求，我将继续完善文档。\n+## 📂 项目结构\r\n+\r\n+```\r\n+vane-lazy-image/\r\n+├── src/\r\n+│   ├── components/\r\n+│   │   └── LazyLoadImagePlugin/\r\n+│   │       ├── core/\r\n+│   │       │   └── LazyLoadImageCore.tsx    # 核心组件\r\n+│   │       ├── plugins/\r\n+│   │       │   ├── types.ts                 # 插件类型定义\r\n+│   │       │   ├── PluginBus.ts             # 事件总线\r\n+│   │       │   ├── PluginManager.ts         # 插件管理器\r\n+│   │       │   ├── withPlugins.tsx          # HOC 组合方法\r\n+│   │       │   ├── FetchLoaderPlugin.ts     # Fetch 加载器\r\n+│   │       │   └── index.ts                 # 插件系统导出\r\n+│   │       ├── custom-plugins/              # 60+ 自定义插件\r\n+│   │       │   ├── WatermarkPlugin/\r\n+│   │       │   ├── FadeInPlugin/\r\n+│   │       │   ├── RetryOnErrorPlugin/\r\n+│   │       │   └── ...\r\n+│   │       └── index.ts                     # 统一导出\r\n+│   ├── pages/\r\n+│   │   └── LazyLoadImagePlugin/\r\n+│   │       ├── _layout/\r\n+│   │       │   └── DemoPage.tsx             # 演示页面布局\r\n+│   │       ├── Home.tsx                     # 首页\r\n+│   │       ├── WatermarkDemo.tsx            # 各插件演示页面\r\n+│   │       └── ...                          # 60+ 演示文件\r\n+│   ├── App.tsx                              # 应用入口\r\n+│   ├── App.css                              # 全局样式\r\n+│   └── main.tsx                             # React 入口\r\n+├── dist/                                    # 构建产物\r\n+├── public/                                  # 静态资源\r\n+├── vite.config.ts                           # Vite 配置\r\n+├── tsconfig.json                            # TypeScript 配置\r\n+├── package.json                             # 项目配置\r\n+└── README.md                                # 项目文档\r\n+```\r\n+\r\n+---\r\n+\r\n+## 🎯 API 文档\r\n+\r\n+### 核心组件：`LazyLoadImageCore`\r\n+\r\n+#### Props\r\n+\r\n+| 属性 | 类型 | 默认值 | 说明 |\r\n+|------|------|--------|------|\r\n+| `src` | `string` | **必填** | 图片 URL |\r\n+| `alt` | `string` | `\"\"` | 替代文本 |\r\n+| `loading` | `\"lazy\" \\| \"eager\"` | `\"lazy\"` | 加载策略 |\r\n+| `rootMargin` | `string` | `\"0px\"` | 视口边距 |\r\n+| `threshold` | `number \\| number[]` | `0.01` | 可见度阈值 |\r\n+| `containerStyle` | `React.CSSProperties` | `{}` | 容器样式 |\r\n+| `imageStyle` | `React.CSSProperties` | `{}` | 图片样式 |\r\n+| `containerClassName` | `string` | `\"\"` | 容器类名 |\r\n+| `imageClassName` | `string` | `\"\"` | 图片类名 |\r\n+| `onLoad` | `() => void` | - | 加载完成回调 |\r\n+| `onError` | `() => void` | - | 加载失败回调 |\r\n+\r\n+### HOC：`withPlugins`\r\n+\r\n+```tsx\r\n+function withPlugins<P extends CoreImageProps>(\r\n+  Component: React.ComponentType<P>,\r\n+  plugins: Plugin[]\r\n+): React.FC<P>\r\n+```\r\n+\r\n+#### 参数\r\n+\r\n+- `Component`：核心组件（通常是 `LazyLoadImageCore`）\r\n+- `plugins`：插件数组\r\n+\r\n+#### 返回值\r\n+\r\n+增强后的 React 组件\r\n+\r\n+### 插件类型\r\n+\r\n+```typescript\r\n+interface Plugin {\r\n+  name: string;\r\n+  setup: (context: PluginContext) => PluginHooks;\r\n+}\r\n+\r\n+interface PluginContext {\r\n+  src: string;\r\n+  state: LoadingState;\r\n+  element: HTMLImageElement | null;\r\n+  container: HTMLDivElement | null;\r\n+  events: PluginBus;\r\n+  manager: PluginManager;\r\n+}\r\n+\r\n+interface PluginHooks {\r\n+  onInit?: () => void;\r\n+  onLoadStart?: () => void;\r\n+  onProgress?: (progress: number) => void;\r\n+  onLoadEnd?: () => void;\r\n+  onError?: (error: Error) => void;\r\n+  onCleanup?: () => void;\r\n+  renderOverlay?: () => React.ReactNode;\r\n+  modifySrc?: (src: string) => string;\r\n+}\r\n+```\r\n+\r\n+---\r\n+\r\n+## 🔨 自定义插件开发\r\n+\r\n+创建自定义插件非常简单：\r\n+\r\n+```tsx\r\n+import { Plugin } from \"vane-lazy-image\";\r\n+\r\n+export function createMyCustomPlugin(options?: MyOptions): Plugin {\r\n+  return {\r\n+    name: \"my-custom-plugin\",\r\n+    setup: (context) => {\r\n+      return {\r\n+        onInit: () => {\r\n+          console.log(\"插件初始化\");\r\n+        },\r\n+        onLoadStart: () => {\r\n+          console.log(\"开始加载\");\r\n+        },\r\n+        onLoadEnd: () => {\r\n+          console.log(\"加载完成\");\r\n+        },\r\n+        renderOverlay: () => {\r\n+          return <div>自定义覆盖层</div>;\r\n+        },\r\n+      };\r\n+    },\r\n+  };\r\n+}\r\n+```\r\n+\r\n+---\r\n+\r\n+## 💡 使用技巧\r\n+\r\n+### 1. 组合多个视觉效果\r\n+\r\n+```tsx\r\n+const LazyImage = withPlugins(LazyLoadImageCore as any, [\r\n+  createSkeletonPlugin({ type: \"shimmer\" }),\r\n+  createBlurUpPlugin({ duration: 400 }),\r\n+  createFadeInPlugin({ duration: 600 }),\r\n+  createWatermarkPlugin({ text: \"VANE\" }),\r\n+]);\r\n+```\r\n+\r\n+### 2. 性能优化最佳实践\r\n+\r\n+```tsx\r\n+const LazyImage = withPlugins(LazyLoadImageCore as any, [\r\n+  createPreconnectPlugin({ domains: [\"https://cdn.example.com\"] }),\r\n+  createMemoryCachePlugin({ maxSize: 50 }),\r\n+  createConcurrencyControlPlugin({ maxConcurrent: 4 }),\r\n+  createImageOptimizationPlugin({ defaultQuality: 80 }),\r\n+]);\r\n+```\r\n+\r\n+### 3. 错误处理完整方案\r\n+\r\n+```tsx\r\n+const LazyImage = withPlugins(LazyLoadImageCore as any, [\r\n+  createRetryOnErrorPlugin({ maxRetries: 3 }),\r\n+  createCDNFallbackPlugin({ fallbackUrls: [\"https://backup.cdn.com\"] }),\r\n+  createFallbackImagePlugin({ fallbackSrc: \"/404.jpg\" }),\r\n+  createErrorOverlayPlugin({ showRetryButton: true }),\r\n+]);\r\n+```\r\n+\r\n+---\r\n+\r\n+## ❓ 常见问题\r\n+\r\n+### Q: \"Loading...\" 文本没有居中？\r\n+\r\n+**A:** 确保容器使用了正确的定位方式。推荐使用绝对定位 + Flexbox：\r\n+\r\n+```tsx\r\n+containerStyle={{\r\n+  position: \"relative\",\r\n+  width: \"100%\",\r\n+  height: \"100%\",\r\n+}}\r\n+```\r\n+\r\n+覆盖层样式：\r\n+```css\r\n+position: absolute;\r\n+inset: 0;\r\n+display: flex;\r\n+align-items: center;\r\n+justify-content: center;\r\n+```\r\n+\r\n+### Q: 悬停预取不生效？\r\n+\r\n+**A:** 检查以下几点：\r\n+1. 确保设备支持 `mouseenter` 事件（触屏设备需要使用 `touchstart`）\r\n+2. 检查覆盖层是否设置了 `pointerEvents: \"none\"`\r\n+3. 确认网络面板中是否有预取请求\r\n+\r\n+### Q: 进度条不显示？\r\n+\r\n+**A:** 资源可能被缓存。解决方法：\r\n+1. 打开浏览器开发者工具\r\n+2. 在 Network 面板禁用缓存\r\n+3. 或者使用网络限速功能模拟慢速网络\r\n+\r\n+### Q: 如何调试插件？\r\n+\r\n+**A:** 使用 `createEventLoggerPlugin`：\r\n+\r\n+```tsx\r\n+const LazyImage = withPlugins(LazyLoadImageCore as any, [\r\n+  createEventLoggerPlugin(),\r\n+  // 其他插件...\r\n+]);\r\n+```\r\n+\r\n+### Q: 如何在生产环境中使用？\r\n+\r\n+**A:** 安装 npm 包后直接导入：\r\n+\r\n+```tsx\r\n+import { LazyLoadImageCore, withPlugins, createWatermarkPlugin } from \"vane-lazy-image\";\r\n+```\r\n+\r\n+### Q: TypeScript 类型报错？\r\n+\r\n+**A:** 确保安装了类型定义，或者临时使用 `as any`：\r\n+\r\n+```tsx\r\n+const LazyImage = withPlugins(LazyLoadImageCore as any, plugins);\r\n+```\r\n+\r\n+---\r\n+\r\n+## 🌐 浏览器支持\r\n+\r\n+| 浏览器 | 版本 |\r\n+|--------|------|\r\n+| Chrome | ≥ 88 |\r\n+| Firefox | ≥ 85 |\r\n+| Safari | ≥ 14 |\r\n+| Edge | ≥ 88 |\r\n+\r\n+> 对于不支持 `IntersectionObserver` 的老旧浏览器，组件会自动降级为立即加载模式。\r\n+\r\n+---\r\n+\r\n+## 🛠️ 技术栈\r\n+\r\n+- **框架**：React 18+\r\n+- **语言**：TypeScript 5+\r\n+- **构建工具**：Vite 5+\r\n+- **样式**：CSS-in-JS（内联样式）\r\n+- **代码高亮**：react-syntax-highlighter\r\n+\r\n+---\r\n+\r\n+## 🤝 贡献指南\r\n+\r\n+欢迎提交 Issue 和 Pull Request！\r\n+\r\n+### 开发流程\r\n+\r\n+1. Fork 本仓库\r\n+2. 创建特性分支：`git checkout -b feature/your-feature`\r\n+3. 提交更改：`git commit -m \"Add some feature\"`\r\n+4. 推送到分支：`git push origin feature/your-feature`\r\n+5. 提交 Pull Request\r\n+\r\n+### 代码规范\r\n+\r\n+- 使用 ESLint 进行代码检查\r\n+- 遵循 TypeScript 严格模式\r\n+- 保持代码简洁、可读\r\n+- 为新功能添加测试和文档\r\n+\r\n+---\r\n+\r\n+## 📄 许可证\r\n+\r\n+[MIT License](./LICENSE) © 2025 Frank Vane\r\n+\r\n+---\r\n+\r\n+## 🔗 相关链接\r\n+\r\n+- [GitHub 仓库](https://github.com/frankvane/vane-lazy-image)\r\n+- [NPM 包](https://www.npmjs.com/package/vane-lazy-image)\r\n+- [在线演示](https://your-demo-url.com)\r\n+- [问题反馈](https://github.com/frankvane/vane-lazy-image/issues)\r\n+- [更新日志](./CHANGELOG.md)\r\n+\r\n+---\r\n+\r\n+## 🙏 致谢\r\n+\r\n+感谢所有为这个项目做出贡献的开发者！\r\n+\r\n+如果这个项目对您有帮助，欢迎 ⭐ Star 支持！\r\n+\r\n+---\r\n+\r\n+<div align=\"center\">\r\n+Made with ❤️ by Frank Vane\r\n+</div>\r\n"
                },
                {
                    "date": 1759548163959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -615,9 +615,9 @@\n     hooks: {\r\n       // 组件挂载时\r\n       onMount: (context) => {\r\n         console.log(\"组件挂载\", context.src);\r\n-        \r\n+\r\n         // 返回清理函数（可选）\r\n         return () => {\r\n           console.log(\"组件卸载清理\");\r\n         };\r\n@@ -665,9 +665,9 @@\n \r\n       // 渲染覆盖层\r\n       renderOverlay: (context) => {\r\n         if (!showOverlay) return null;\r\n-        \r\n+\r\n         return (\r\n           <div\r\n             style={{\r\n               position: \"absolute\",\r\n@@ -759,9 +759,9 @@\n       },\r\n \r\n       onNetworkChange: (context, networkInfo) => {\r\n         console.log(\"网络状态变化\", networkInfo);\r\n-        \r\n+\r\n         // 根据网络状态调整策略\r\n         if (networkInfo.saveData) {\r\n           console.log(\"开启省流模式\");\r\n         }\r\n@@ -813,9 +813,9 @@\n   onLoadError: (context, error) => {\r\n     try {\r\n       // 处理错误\r\n       console.error(\"插件错误\", error);\r\n-      \r\n+\r\n       // 返回 true 表示已处理\r\n       return true;\r\n     } catch (e) {\r\n       // 避免插件错误影响其他插件\r\n"
                },
                {
                    "date": 1759551147688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n [![License](https://img.shields.io/badge/license-MIT-green)](./LICENSE)\r\n [![TypeScript](https://img.shields.io/badge/TypeScript-5.x-blue)](https://www.typescriptlang.org/)\r\n [![React](https://img.shields.io/badge/React-18.x-blue)](https://reactjs.org/)\r\n \r\n-[在线演示](https://your-demo-url.com) | [快速开始](#快速开始) | [插件列表](#插件列表) | [API 文档](#api-文档)\r\n+[在线演示](https://chinavane.netlify.app/) | [快速开始](#快速开始) | [插件列表](#插件列表) | [API 文档](#api-文档)\r\n \r\n </div>\r\n \r\n ---\r\n@@ -327,9 +327,9 @@\n | `createBatteryAwarePlugin`       | 电量/省电模式适配         |\r\n | `createTransitionPlugin`         | 统一管理加载过渡效果      |\r\n | `FetchLoaderPlugin`              | 自定义 Fetch 加载器       |\r\n \r\n-> 💡 **提示**：所有插件都可以通过 `vane-lazy-image` 包导入。详细配置请参考 [API 文档](#api-文档) 或查看 [在线演示](https://your-demo-url.com)。\r\n+> 💡 **提示**：所有插件都可以通过 `vane-lazy-image` 包导入。详细配置请参考 [API 文档](#api-文档) 或查看 [在线演示](https://chinavane.netlify.app/)。\r\n \r\n ---\r\n \r\n ## 📂 项目结构\r\n@@ -1053,9 +1053,9 @@\n ## 🔗 相关链接\r\n \r\n - [GitHub 仓库](https://github.com/frankvane/vane-lazy-image)\r\n - [NPM 包](https://www.npmjs.com/package/vane-lazy-image)\r\n-- [在线演示](https://your-demo-url.com)\r\n+- [在线演示](https://chinavane.netlify.app/)\r\n - [问题反馈](https://github.com/frankvane/vane-lazy-image/issues)\r\n - [更新日志](./CHANGELOG.md)\r\n \r\n ---\r\n"
                }
            ],
            "date": 1759221821492,
            "name": "Commit-0",
            "content": "# vane-lazy-image\n\n高性能的 React 图片懒加载组件，支持 LQIP、Web Worker、虚拟滚动等功能。\n\n## ✨ 特性\n\n- 🚀 **高性能懒加载** - 基于 Intersection Observer API\n- 🎨 **LQIP 支持** - 低质量图像占位符，提升用户体验\n- ⚡ **Web Worker** - 图片处理不阻塞主线程\n- 📱 **虚拟滚动** - 支持大量图片的虚拟滚动\n- 🎯 **智能缓存** - 多级缓存策略，支持 IndexedDB\n- 🔧 **TypeScript** - 完整的类型定义\n- 📦 **Tree Shaking** - 支持按需导入\n- 🎛️ **高度可配置** - 丰富的配置选项\n\n## 📦 安装\n\n```bash\nnpm install vane-lazy-image\n```\n\n## 🚀 快速开始\n\n### 基础用法\n\n```tsx\nimport { LazyImage } from 'vane-lazy-image';\nimport 'vane-lazy-image/style.css';\n\nfunction App() {\n  return (\n    <LazyImage\n      src=\"https://example.com/image.jpg\"\n      alt=\"描述\"\n      style={{ width: '100%', height: '200px' }}\n    />\n  );\n}\n```\n\n### 启用 LQIP\n\n```tsx\n<LazyImage\n  src=\"https://example.com/large-image.jpg\"\n  alt=\"描述\"\n  enableLQIP={true}\n  lqipWidth={24}\n  lqipQuality={0.6}\n  showLoadingIndicator={true}\n/>\n```\n\n### 使用 Web Worker\n\n```tsx\n<LazyImage\n  src=\"https://example.com/image.jpg\"\n  alt=\"描述\"\n  enableLQIP={true}\n  enableLQIPWorker={true}\n  workerOptions={{\n    maxWorkers: 2,\n    taskTimeout: 30000\n  }}\n/>\n```\n\n## 📚 API 文档\n\n### LazyImage Props\n\n| 属性 | 类型 | 默认值 | 描述 |\n|------|------|--------|------|\n| `src` | `string` | - | 图片源地址 |\n| `alt` | `string` | - | 图片描述 |\n| `enableLQIP` | `boolean` | `false` | 是否启用 LQIP |\n| `enableLQIPWorker` | `boolean` | `true` | 是否使用 Web Worker 处理 LQIP |\n| `lqipWidth` | `number` | `24` | LQIP 宽度 |\n| `lqipQuality` | `number` | `0.6` | LQIP 质量 (0-1) |\n| `showLoadingIndicator` | `boolean` | `false` | 是否显示加载指示器 |\n| `rootMargin` | `string` | `\"50px\"` | 触发加载的边距 |\n| `threshold` | `number` | `0.1` | 触发阈值 |\n| `priority` | `\"low\" \\| \"medium\" \\| \"high\"` | `\"medium\"` | 加载优先级 |\n| `enableCache` | `boolean` | `true` | 是否启用缓存 |\n| `retryCount` | `number` | `3` | 重试次数 |\n| `fallbackSrc` | `string` | - | 备用图片源 |\n| `onLoad` | `() => void` | - | 加载完成回调 |\n| `onError` | `() => void` | - | 加载错误回调 |\n\n### 高级用法\n\n#### 虚拟滚动\n\n```tsx\nimport { LazyImageEnhanced } from 'vane-lazy-image';\n\n<LazyImageEnhanced\n  src=\"image.jpg\"\n  alt=\"描述\"\n  virtualScroll={{\n    enabled: true,\n    itemHeight: 200,\n    containerHeight: 600\n  }}\n/>\n```\n\n#### 自定义 Hook\n\n```tsx\nimport {\n  useImageCache,\n  useMemoryManager,\n  useScrollManager\n} from 'vane-lazy-image';\n\nfunction MyComponent() {\n  const imageCache = useImageCache();\n  const memoryManager = useMemoryManager();\n  const scrollManager = useScrollManager();\n\n  // 使用缓存和内存管理功能\n}\n```\n\n#### Worker 检测和配置\n\n```tsx\nimport {\n  detectWorkerCapabilities,\n  getRecommendedWorkerConfig\n} from 'vane-lazy-image';\n\n// 检测浏览器能力\nconst capabilities = detectWorkerCapabilities();\nconsole.log('Worker 支持:', capabilities.hasWorker);\n\n// 获取推荐配置\nconst config = getRecommendedWorkerConfig();\nconsole.log('推荐配置:', config);\n```\n\n## 🎨 样式定制\n\n组件提供了 CSS 变量，可以轻松定制样式：\n\n```css\n.lazy-image-container {\n  --lazy-image-border-radius: 8px;\n  --lazy-image-transition-duration: 300ms;\n  --lazy-image-skeleton-color: #f0f0f0;\n}\n```\n\n## 🔧 配置选项\n\n### 全局配置\n\n```tsx\nimport { LazyImageConfig } from 'vane-lazy-image';\n\nLazyImageConfig.setConfig({\n  rootMargin: '100px',\n  threshold: 0.1,\n  lqipWidth: 32,\n  lqipQuality: 0.7,\n  retryCount: 5\n});\n```\n\n### Worker 配置\n\n```tsx\nimport { getLQIPWorkerPool } from 'vane-lazy-image';\n\nconst workerPool = getLQIPWorkerPool({\n  maxWorkers: 4,\n  taskTimeout: 30000,\n  enableFallback: true\n});\n```\n\n## 📱 浏览器支持\n\n- ✅ Chrome 64+\n- ✅ Firefox 68+\n- ✅ Safari 11.1+\n- ✅ Edge 79+\n\n对于不支持的浏览器，组件会自动降级到兼容模式。\n\n## 🚀 性能优化\n\n1. **图片预加载** - 使用 `preload` 属性\n2. **智能缓存** - 多级缓存策略\n3. **并发控制** - 限制同时加载的图片数量\n4. **内存管理** - 自动清理不用的图片缓存\n5. **Web Worker** - 图片处理不阻塞主线程\n\n## 📄 许可证\n\nMIT License\n\n## 🤝 贡献\n\n欢迎提交 Issue 和 Pull Request！\n\n## 📞 支持\n\n如有问题，请提交 [Issue](https://github.com/your-username/vane-lazy-image/issues)。"
        }
    ]
}