{
    "sourceFile": "OPTIMIZATION_NOTES.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1759216733883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759220766071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n # LazyImage 空白闪烁优化说明\r\n \r\n ## 问题描述\r\n+\r\n 在图片加载到显示的过程中，会出现短暂的空白阶段。这是因为图片加载完成后可能还在解码中，导致占位符已经消失但图片还未渲染的尴尬时刻。\r\n \r\n ## 优化方案\r\n \r\n@@ -13,8 +14,9 @@\n - 在 img 元素的 `onLoad` 事件中使用 `img.decode()` API\r\n - 确保图片完全解码后再显示，避免解码过程中的空白\r\n \r\n **核心逻辑**:\r\n+\r\n ```tsx\r\n onLoad={(e) => {\r\n   const img = e.currentTarget;\r\n   if (img && 'decode' in img && typeof img.decode === 'function') {\r\n@@ -40,21 +42,24 @@\n \r\n #### 改进点：\r\n \r\n 1. **更快的图片渐入**：\r\n+\r\n    - 图片 opacity 过渡时间从 400ms 降至 350ms\r\n    - 使用更平滑的缓动函数 `cubic-bezier(0.4, 0, 0.2, 1)`\r\n \r\n 2. **延迟的占位符淡出**：\r\n+\r\n    - 占位符 opacity 过渡时间增至 450ms\r\n    - 添加 100ms 的 `transition-delay`\r\n    - 确保图片开始显示后，占位符才开始淡出\r\n \r\n 3. **更好的重叠**：\r\n    - 为 img 添加 `display: block` 和完整的尺寸属性\r\n    - 确保图片在加载时也占据空间，避免布局偏移\r\n \r\n-**核心CSS**:\r\n+**核心 CSS**:\r\n+\r\n ```css\r\n .img {\r\n   transition: opacity 350ms cubic-bezier(0.4, 0, 0.2, 1);\r\n   display: block;\r\n@@ -71,8 +76,9 @@\n \r\n ### 3. 时序优化\r\n \r\n **改动文件**:\r\n+\r\n - `src/components/LazyImage/LazyImage.tsx`\r\n - `src/components/LazyImage/components/ImageErrorHandler.tsx`\r\n \r\n - 将 `onLoad` 回调的调用时机从图片下载完成改为图片完全解码后\r\n@@ -83,19 +89,21 @@\n \r\n **新增文件**: `src/components/LazyImage/hooks/useImageDecode.ts`\r\n \r\n 提供了一个可复用的图片解码 Hook，支持：\r\n+\r\n - 自动检测浏览器是否支持 decode API\r\n - 异步解码处理\r\n - 解码失败的降级策略\r\n - src 变化时的状态重置\r\n \r\n **导出**:\r\n+\r\n ```ts\r\n export {\r\n   useImageDecode,\r\n   type UseImageDecodeOptions,\r\n-  type UseImageDecodeResult\r\n+  type UseImageDecodeResult,\r\n } from \"./hooks/useImageDecode\";\r\n ```\r\n \r\n ## 效果\r\n@@ -110,8 +118,9 @@\n \r\n ## 浏览器兼容性\r\n \r\n `img.decode()` API 兼容性：\r\n+\r\n - ✅ Chrome 64+\r\n - ✅ Firefox 68+\r\n - ✅ Safari 11.1+\r\n - ✅ Edge 79+\r\n@@ -120,13 +129,15 @@\n \r\n ## 使用建议\r\n \r\n 对于用户：\r\n+\r\n 1. 如果图片加载较慢，建议启用 LQIP 或提供 `placeholderSrc`\r\n 2. 可以通过 `showLoadingIndicator` 显示加载动画\r\n 3. 对于重要图片，可以使用 `preload` 属性提前加载\r\n \r\n 示例：\r\n+\r\n ```tsx\r\n <LazyImage\r\n   src=\"large-image.jpg\"\r\n   alt=\"描述\"\r\n@@ -140,16 +151,18 @@\n \r\n ### 为什么使用 decode()?\r\n \r\n `img.decode()` 方法会：\r\n+\r\n 1. 异步解码图片\r\n 2. 不阻塞主线程\r\n 3. 返回 Promise，可以精确控制显示时机\r\n 4. 避免解码时的卡顿和闪烁\r\n \r\n ### 为什么延迟占位符淡出?\r\n \r\n 通过让占位符稍晚淡出（transition-delay: 100ms），确保：\r\n+\r\n 1. 图片已经开始渐入\r\n 2. 两者有短暂的重叠显示期\r\n 3. 视觉上更连贯，无空白时刻\r\n \r\n"
                }
            ],
            "date": 1759216733883,
            "name": "Commit-0",
            "content": "# LazyImage 空白闪烁优化说明\r\n\r\n## 问题描述\r\n在图片加载到显示的过程中，会出现短暂的空白阶段。这是因为图片加载完成后可能还在解码中，导致占位符已经消失但图片还未渲染的尴尬时刻。\r\n\r\n## 优化方案\r\n\r\n### 1. 图片解码优化 (Image Decode API)\r\n\r\n**改动文件**: `src/components/LazyImage/LazyImage.tsx`\r\n\r\n- 添加了 `imageReady` 状态，用于跟踪图片是否完全准备好（包括解码）\r\n- 在 img 元素的 `onLoad` 事件中使用 `img.decode()` API\r\n- 确保图片完全解码后再显示，避免解码过程中的空白\r\n\r\n**核心逻辑**:\r\n```tsx\r\nonLoad={(e) => {\r\n  const img = e.currentTarget;\r\n  if (img && 'decode' in img && typeof img.decode === 'function') {\r\n    img.decode()\r\n      .then(() => {\r\n        setImageReady(true); // 图片完全准备好\r\n        onLoad?.();\r\n      })\r\n      .catch(() => {\r\n        setImageReady(true); // 解码失败也允许显示\r\n        onLoad?.();\r\n      });\r\n  } else {\r\n    setImageReady(true); // 不支持 decode API 时直接显示\r\n    onLoad?.();\r\n  }\r\n}}\r\n```\r\n\r\n### 2. CSS 过渡优化\r\n\r\n**改动文件**: `src/components/LazyImage/style/style.module.css`\r\n\r\n#### 改进点：\r\n\r\n1. **更快的图片渐入**：\r\n   - 图片 opacity 过渡时间从 400ms 降至 350ms\r\n   - 使用更平滑的缓动函数 `cubic-bezier(0.4, 0, 0.2, 1)`\r\n\r\n2. **延迟的占位符淡出**：\r\n   - 占位符 opacity 过渡时间增至 450ms\r\n   - 添加 100ms 的 `transition-delay`\r\n   - 确保图片开始显示后，占位符才开始淡出\r\n\r\n3. **更好的重叠**：\r\n   - 为 img 添加 `display: block` 和完整的尺寸属性\r\n   - 确保图片在加载时也占据空间，避免布局偏移\r\n\r\n**核心CSS**:\r\n```css\r\n.img {\r\n  transition: opacity 350ms cubic-bezier(0.4, 0, 0.2, 1);\r\n  display: block;\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.placeholderImg {\r\n  transition: opacity 450ms cubic-bezier(0.4, 0, 0.6, 1);\r\n  transition-delay: 100ms; /* 延迟淡出 */\r\n}\r\n```\r\n\r\n### 3. 时序优化\r\n\r\n**改动文件**:\r\n- `src/components/LazyImage/LazyImage.tsx`\r\n- `src/components/LazyImage/components/ImageErrorHandler.tsx`\r\n\r\n- 将 `onLoad` 回调的调用时机从图片下载完成改为图片完全解码后\r\n- 确保 `ImageErrorHandler` 保留原始的 `onLoad` 处理程序\r\n- 当 `src` 变化时自动重置 `imageReady` 状态\r\n\r\n### 4. 新增工具 Hook\r\n\r\n**新增文件**: `src/components/LazyImage/hooks/useImageDecode.ts`\r\n\r\n提供了一个可复用的图片解码 Hook，支持：\r\n- 自动检测浏览器是否支持 decode API\r\n- 异步解码处理\r\n- 解码失败的降级策略\r\n- src 变化时的状态重置\r\n\r\n**导出**:\r\n```ts\r\nexport {\r\n  useImageDecode,\r\n  type UseImageDecodeOptions,\r\n  type UseImageDecodeResult\r\n} from \"./hooks/useImageDecode\";\r\n```\r\n\r\n## 效果\r\n\r\n经过以上优化后：\r\n\r\n✅ **消除空白闪烁**：图片完全解码后才显示，避免解码过程中的空白\r\n✅ **更平滑的过渡**：占位符和图片的交叠显示，无缝衔接\r\n✅ **更快的感知速度**：图片渐入更快，用户体验更好\r\n✅ **向后兼容**：不支持 decode API 的浏览器仍能正常工作\r\n✅ **无障碍友好**：考虑了 `prefers-reduced-motion` 用户偏好\r\n\r\n## 浏览器兼容性\r\n\r\n`img.decode()` API 兼容性：\r\n- ✅ Chrome 64+\r\n- ✅ Firefox 68+\r\n- ✅ Safari 11.1+\r\n- ✅ Edge 79+\r\n\r\n对于不支持的浏览器，代码会自动降级到传统的加载方式。\r\n\r\n## 使用建议\r\n\r\n对于用户：\r\n1. 如果图片加载较慢，建议启用 LQIP 或提供 `placeholderSrc`\r\n2. 可以通过 `showLoadingIndicator` 显示加载动画\r\n3. 对于重要图片，可以使用 `preload` 属性提前加载\r\n\r\n示例：\r\n```tsx\r\n<LazyImage\r\n  src=\"large-image.jpg\"\r\n  alt=\"描述\"\r\n  enableLQIP={true}\r\n  showLoadingIndicator={true}\r\n  placeholderSrc=\"thumbnail.jpg\"\r\n/>\r\n```\r\n\r\n## 技术细节\r\n\r\n### 为什么使用 decode()?\r\n\r\n`img.decode()` 方法会：\r\n1. 异步解码图片\r\n2. 不阻塞主线程\r\n3. 返回 Promise，可以精确控制显示时机\r\n4. 避免解码时的卡顿和闪烁\r\n\r\n### 为什么延迟占位符淡出?\r\n\r\n通过让占位符稍晚淡出（transition-delay: 100ms），确保：\r\n1. 图片已经开始渐入\r\n2. 两者有短暂的重叠显示期\r\n3. 视觉上更连贯，无空白时刻\r\n\r\n### 状态流程\r\n\r\n```\r\n1. shouldLoad = true\r\n   ↓\r\n2. 开始下载图片 (displaySrc 设置)\r\n   ↓\r\n3. 图片下载完成 (img onLoad 触发)\r\n   ↓\r\n4. 开始解码 (img.decode())\r\n   ↓\r\n5. 解码完成 (imageReady = true)\r\n   ↓\r\n6. 图片渐入显示 (opacity: 0 → 1)\r\n   ↓\r\n7. 占位符延迟淡出 (opacity: 1 → 0, 100ms delay)\r\n```\r\n\r\n## 测试建议\r\n\r\n1. **慢速网络测试**：使用 Chrome DevTools 的网络限速功能\r\n2. **大图片测试**：使用高分辨率图片测试解码时间\r\n3. **快速切换测试**：快速滚动列表，观察加载体验\r\n4. **降级测试**：在不支持 decode API 的浏览器中测试\r\n\r\n## 更新日期\r\n\r\n2025-09-30\r\n"
        }
    ]
}